<?xml version="1.0" encoding="utf-8"?>
<document>
<cssFile><![CDATA[css/VisDoc.css]]></cssFile>
<title><![CDATA[LocalServerServiceProxy]]></title>
<classDocScript />
<classData>
<inheritsFrom>
<title><![CDATA[Inherits from]]></title><item><link><name><![CDATA[AbstractServerServiceProxy]]></name><uri><![CDATA[org_as2lib_io_conn_core_server_AbstractServerServiceProxy]]></uri></link></item><item><link><name><![CDATA[BasicClass]]></name><uri><![CDATA[org_as2lib_core_BasicClass]]></uri></link></item>
</inheritsFrom>
<conformsTo>
<title><![CDATA[Implements]]></title><item><link><name><![CDATA[ServerServiceProxy]]></name><uri><![CDATA[org_as2lib_io_conn_core_server_ServerServiceProxy]]></uri></link></item>
</conformsTo>
<classDetails>
<item><title><![CDATA[Author]]></title><value><![CDATA[Simon Wacker, Christoph Atteneder]]></value></item>
<item><title><![CDATA[Classpath]]></title><value><![CDATA[org.as2lib.io.conn.local.server.LocalServerServiceProxy]]></value></item>
<item><title><![CDATA[File last modified]]></title><value><![CDATA[Friday, 06 May 2005, 12:13:34]]></value></item>
</classDetails>
<classDescription><summary><![CDATA[<code>LocalServerServiceProxy</code> handles client requests to a certain service and
 its responses.]]></summary><restOfDescription><![CDATA[<p>This client requests normally come from a client service proxy because this
 class is designed to interact with this type of client.<p>You can setup your service proxy as follows to await client requests:<pre><span class="codeKeyword">var</span> service:LocalServerServiceProxy = <span class="codeKeyword">new</span> LocalServerServiceProxy(<span class="codeString">"myService"</span>, <span class="codeKeyword">new</span> MyService());
service.run();</pre><p>A client may then invoke a method on this service proxy.<pre><span class="codeKeyword">var</span> client = <span class="codeKeyword">new</span> LocalClientServiceProxy(<span class="codeString">"myService"</span>);
<span class="codeKeyword">var</span> callback:MethodInvocationCallback = client.myMethod(<span class="codeString">"firstArgument"</span>, <span class="codeString">"secondArgument"</span>);</pre><p>You may choose to combine multiple services in one server for easier usage.<pre><span class="codeKeyword">var</span> server:LocalServer = <span class="codeKeyword">new</span> LocalServer(<span class="codeString">"local.as2lib.org"</span>);
server.addService(<span class="codeKeyword">new</span> LocalServerServiceProxy(<span class="codeString">"myServiceOne"</span>, <span class="codeKeyword">new</span> MyServiceOne()));
server.addService(<span class="codeKeyword">new</span> LocalServerServiceProxy(<span class="codeString">"myServiceTwo"</span>, <span class="codeKeyword">new</span> MyServiceTwo()));
server.run();</pre><p>A client must then prefix the service's name with the host of the server.<pre><span class="codeKeyword">var</span> client = <span class="codeKeyword">new</span> LocalClientServiceProxy(<span class="codeString">"local.as2lib.org/myService"</span>);
<span class="codeKeyword">var</span> callback:MethodInvocationCallback = client.myMethod(<span class="codeString">"firstArgument"</span>, <span class="codeString">"secondArgument"</span>);</pre><p>If the client invokes a method with arguments on this service that are not of
 type <code>Number</code>, <code>String</code>, <code>Boolean</code> or <code>Array</code> which are
 converted dynamically to the correct type, Flash just creates a new object of type
 <code>Object</code> and populates it with the instance variables of the passed object.
 To receive an instance of correct type you must thus register the class. Note
 that the client must register the same class with the same name. This registration
 must also be done for return values on the client and the server.<pre><span class="codeIdentifier">Object</span>.registerClass(<span class="codeString">"MyClass"</span>, MyClass);</pre><p>The received object will now be of correct type. But you still have to be aware
 of some facts.<br>Flash creates a new object in the background and sets the instance variables of
 the sent instance to the new object. It then registers this object to the appropriate
 class (if registered previously) and applies the constructor of that class to the
 new object passing no arguments. This means if the constructor sets instance variables
 it overwrites the ones set previously by <code>undefined</code>.]]></restOfDescription>
</classDescription>
</classData>
<pageSummary>
<methodList>
<title><![CDATA[Summary]]></title>
<methodSummaryPart>
<title><![CDATA[Constructor]]></title>
<item><![CDATA[LocalServerServiceProxy]]></item>
</methodSummaryPart>
<private>
<methodSummaryPart>
<title><![CDATA[Instance properties]]></title>
<item><private><![CDATA[service]]></private></item>
<item><private><![CDATA[path]]></private></item>
<item><private><![CDATA[connection]]></private></item>
<item><private><![CDATA[errorDistributorControl]]></private></item>
<item><private><![CDATA[errorDistributor]]></private></item>
<item><private><![CDATA[running]]></private></item>
<item><private><![CDATA[currentServiceUrl]]></private></item>
</methodSummaryPart>
</private>
<methodSummaryPart>
<title><![CDATA[Class methods]]></title>
<inheritedMethods>
<fromClass><title><text><![CDATA[Class methods inherited from]]></text><link><name><![CDATA[AbstractServerServiceProxy]]></name><uri><![CDATA[org_as2lib_io_conn_core_server_AbstractServerServiceProxy]]></uri></link></title><item><link><name>generateServiceUrl</name><uri>org_as2lib_io_conn_core_server_AbstractServerServiceProxy</uri><method>generateServiceUrl</method></link></item></fromClass>
</inheritedMethods>
</methodSummaryPart>
<methodSummaryPart>
<title><![CDATA[Instance methods]]></title>
<item><![CDATA[getConnection]]></item>
<item><![CDATA[setConnection]]></item>
<item><![CDATA[run]]></item>
<item><![CDATA[stop]]></item>
<item><![CDATA[invokeMethodByNameAndArguments]]></item>
<item><![CDATA[invokeMethodByNameAndArgumentsAndResponseService]]></item>
<item><private><![CDATA[getBlankMethodInvocationErrorListener]]></private></item>
<item><private><![CDATA[sendResponse]]></private></item>
<item><![CDATA[getService]]></item>
<item><![CDATA[getPath]]></item>
<item><![CDATA[isRunning]]></item>
<item><![CDATA[addErrorListener]]></item>
<item><![CDATA[removeErrorListener]]></item>
<inheritedMethods>
<fromClass><title><text><![CDATA[Instance methods inherited from]]></text><link><name><![CDATA[AbstractServerServiceProxy]]></name><uri><![CDATA[org_as2lib_io_conn_core_server_AbstractServerServiceProxy]]></uri></link></title><item><link><name>invokeMethod</name><uri>org_as2lib_io_conn_core_server_AbstractServerServiceProxy</uri><method>invokeMethod</method></link></item></fromClass>
<fromClass><title><text><![CDATA[Instance methods inherited from]]></text><link><name><![CDATA[BasicClass]]></name><uri><![CDATA[org_as2lib_core_BasicClass]]></uri></link></title><item><link><name>toString</name><uri>org_as2lib_core_BasicClass</uri><method>toString</method></link></item></fromClass>
</inheritedMethods>
</methodSummaryPart>
</methodList>
</pageSummary>
<methodSections>
<methodSection>
<title><![CDATA[Constructor]]></title>
<method>
<title><![CDATA[LocalServerServiceProxy]]></title><fullMethod><left><![CDATA[function <b>LocalServerServiceProxy</b> (

]]></left><right><param><name><![CDATA[path]]></name>:<type><![CDATA[String]]></type></param>,
<param><name><![CDATA[service]]></name></param>)</right></fullMethod>
<description>
<text><![CDATA[Constructs a new <code>LocalServerServiceProxy</code> instance.]]></text>
</description>
<fields>
<field><title><![CDATA[Parameters]]></title>
<param><name><![CDATA[path   ]]></name><description><![CDATA[the path of this service]]></description></param>
<param><name><![CDATA[service]]></name><description><![CDATA[object that provides the service's operations]]></description></param>
</field>
<field><title><![CDATA[Throws]]></title><description><![CDATA[<a href="org_as2lib_env_except_IllegalArgumentException.html">IllegalArgumentException</a> if <code>path</code> is <code>null</code>, <code>undefined</code>
 or an empty string or if <code>service</code> is <code>null</code> or <code>undefined</code>]]></description></field>
<field><title><![CDATA[Overrides]]></title><description><![CDATA[<a href="org_as2lib_io_conn_core_server_AbstractServerServiceProxy.html#AbstractServerServiceProxy">org.as2lib.io.conn.core.server.AbstractServerServiceProxy.AbstractServerServiceProxy</a>]]></description></field>
</fields>
</method>
</methodSection>
<private>
<methodSection>
<title><![CDATA[Instance properties]]></title>
<method>
<title><private><![CDATA[connection]]></private></title><private><![CDATA[private]]></private><fullMethod><left><![CDATA[<b>connection</b>:<a href="org_as2lib_io_conn_local_core_EnhancedLocalConnection.html">EnhancedLocalConnection</a>
]]></left><right></right></fullMethod>
<description>
<text><![CDATA[Used to run this service.]]></text>
</description>
</method>
<method>
<title><private><![CDATA[currentServiceUrl]]></private></title><private><![CDATA[private]]></private><fullMethod><left><![CDATA[<b>currentServiceUrl</b>:String
]]></left><right></right></fullMethod>
<description>
<text><![CDATA[Stores the current service url.]]></text>
</description>
</method>
<method>
<title><private><![CDATA[errorDistributor]]></private></title><private><![CDATA[private]]></private><fullMethod><left><![CDATA[<b>errorDistributor</b>:<a href="org_as2lib_io_conn_core_event_MethodInvocationErrorListener.html">MethodInvocationErrorListener</a>
]]></left><right></right></fullMethod>
<description>
<text><![CDATA[Distributes to all added error listeners.]]></text>
</description>
</method>
<method>
<title><private><![CDATA[errorDistributorControl]]></private></title><private><![CDATA[private]]></private><fullMethod><left><![CDATA[<b>errorDistributorControl</b>:<a href="org_as2lib_env_event_distributor_EventDistributorControl.html">EventDistributorControl</a>
]]></left><right></right></fullMethod>
<description>
<text><![CDATA[Stores set error listeners and controls the <code>errorDistributor</code>.]]></text>
</description>
</method>
<method>
<title><private><![CDATA[path]]></private></title><private><![CDATA[private]]></private><fullMethod><left><![CDATA[<b>path</b>:String
]]></left><right></right></fullMethod>
<description>
<text><![CDATA[The service path.]]></text>
</description>
</method>
<method>
<title><private><![CDATA[running]]></private></title><private><![CDATA[private]]></private><fullMethod><left><![CDATA[<b>running</b>:Boolean
]]></left><right></right></fullMethod>
<description>
<text><![CDATA[This service's status.]]></text>
</description>
</method>
<method>
<title><private><![CDATA[service]]></private></title><private><![CDATA[private]]></private><fullMethod><left><![CDATA[<b>service</b>
]]></left><right></right></fullMethod>
<description>
<text><![CDATA[The wrapped service object.]]></text>
</description>
</method>
</methodSection>
</private>
<methodSection>
<title><![CDATA[Instance methods]]></title>
<method>
<title><![CDATA[addErrorListener]]></title><fullMethod><left><![CDATA[function <b>addErrorListener</b> (
]]></left><right><param><name><![CDATA[errorListener]]></name>:<type><![CDATA[<a href="org_as2lib_io_conn_core_event_MethodInvocationErrorListener.html">MethodInvocationErrorListener</a>]]></type></param>) : <![CDATA[Void]]></right></fullMethod>
<description>
<text><![CDATA[Adds an error listener.<p>Error listeners are notified when a client tried to invoke a method on this
 service and something went wrong.]]></text>
</description>
<fields>
<field><title><![CDATA[Parameters]]></title>
<param><name><![CDATA[errorListener]]></name><description><![CDATA[the new error listener to add]]></description></param>
</field>
<field><title><![CDATA[Specified by]]></title><description><![CDATA[<a href="org_as2lib_io_conn_core_server_ServerServiceProxy.html#addErrorListener">org.as2lib.io.conn.core.server.ServerServiceProxy.addErrorListener</a>]]></description></field>
</fields>
</method>
<method>
<title><private><![CDATA[getBlankMethodInvocationErrorListener]]></private></title><private><![CDATA[private]]></private><fullMethod><left><![CDATA[function <b>getBlankMethodInvocationErrorListener</b> (
]]></left><right><param><name><![CDATA[Void]]></name></param>) : <![CDATA[<a href="org_as2lib_io_conn_core_event_MethodInvocationErrorListener.html">MethodInvocationErrorListener</a>]]></right></fullMethod>
<description>
<text><![CDATA[Returns a blank method invocation error listener. This is an error listern with
 no implemented methods.]]></text>
</description>
<fields>
<field><title><![CDATA[Returns]]></title><description><![CDATA[a blank method invocation error listener]]></description></field>
</fields>
</method>
<method>
<title><![CDATA[getConnection]]></title><fullMethod><left><![CDATA[function <b>getConnection</b> (
]]></left><right><param><name><![CDATA[Void]]></name></param>) : <![CDATA[<a href="org_as2lib_io_conn_local_core_EnhancedLocalConnection.html">EnhancedLocalConnection</a>]]></right></fullMethod>
<description>
<text><![CDATA[Returns the currently used connection.<p>This is either the connection set via the <a href="org_as2lib_io_conn_local_server_LocalServerServiceProxy.html#setConnection">setConnection</a> method or
 the default one which is an instance of class <a href="org_as2lib_io_conn_local_core_EnhancedLocalConnection.html">org.as2lib.io.conn.local.core.EnhancedLocalConnection</a>.]]></text>
</description>
<fields>
<field><title><![CDATA[Returns]]></title><description><![CDATA[the currently used connection]]></description></field>
</fields>
</method>
<method>
<title><![CDATA[getPath]]></title><fullMethod><left><![CDATA[function <b>getPath</b> (
]]></left><right><param><name><![CDATA[Void]]></name></param>) : <![CDATA[String]]></right></fullMethod>
<description>
<text><![CDATA[Returns the path of this service.]]></text>
</description>
<fields>
<field><title><![CDATA[Specified by]]></title><description><![CDATA[<a href="org_as2lib_io_conn_core_server_ServerServiceProxy.html#getPath">org.as2lib.io.conn.core.server.ServerServiceProxy.getPath</a>]]></description></field>
</fields>
</method>
<method>
<title><![CDATA[getService]]></title><fullMethod><left><![CDATA[function <b>getService</b> (
]]></left><right><param><name><![CDATA[Void]]></name></param>)</right></fullMethod>
<description>
<text><![CDATA[Returns the wrapped service.]]></text>
</description>
<fields>
<field><title><![CDATA[Returns]]></title><description><![CDATA[the wrapped service]]></description></field>
<field><title><![CDATA[Specified by]]></title><description><![CDATA[<a href="org_as2lib_io_conn_core_server_ServerServiceProxy.html#getService">org.as2lib.io.conn.core.server.ServerServiceProxy.getService</a>]]></description></field>
</fields>
</method>
<method>
<title><![CDATA[invokeMethodByNameAndArguments]]></title><fullMethod><left><![CDATA[function <b>invokeMethodByNameAndArguments</b> (

]]></left><right><param><name><![CDATA[methodName]]></name>:<type><![CDATA[String]]></type></param>,
<param><name><![CDATA[args]]></name>:<type><![CDATA[Array]]></type></param>) : <![CDATA[Void]]></right></fullMethod>
<description>
<text><![CDATA[Handles incoming 'remote' method invocations on the service.<p>The method corresponding to the passed-in <code>methodName</code> is invoked on the
 wrapped service.<p>The error listeners will be informed of a failure if:<ul><li>A method with the passed-in <code>methodName</code> does not exist on the wrapped
     service.</li><li>The service method threw an exception.</li></ul>]]></text>
</description>
<fields>
<field><title><![CDATA[Parameters]]></title>
<param><name><![CDATA[methodName]]></name><description><![CDATA[the name of the method to invoke on the service]]></description></param>
<param><name><![CDATA[args      ]]></name><description><![CDATA[the arguments to use as parameters when invoking the method]]></description></param>
</field>
<field><title><![CDATA[Specified by]]></title><description><![CDATA[<a href="org_as2lib_io_conn_core_server_ServerServiceProxy.html#invokeMethodByNameAndArguments">org.as2lib.io.conn.core.server.ServerServiceProxy.invokeMethodByNameAndArguments</a>]]></description></field>
</fields>
</method>
<method>
<title><![CDATA[invokeMethodByNameAndArgumentsAndResponseService]]></title><fullMethod><left><![CDATA[function <b>invokeMethodByNameAndArgumentsAndResponseService</b> (


]]></left><right><param><name><![CDATA[methodName]]></name>:<type><![CDATA[String]]></type></param>,
<param><name><![CDATA[args]]></name>:<type><![CDATA[Array]]></type></param>,
<param><name><![CDATA[responseServiceUrl]]></name>:<type><![CDATA[String]]></type></param>) : <![CDATA[Void]]></right></fullMethod>
<description>
<text><![CDATA[Handles incoming 'remote' method invocations on the service and responses through
 the <code>responseServiceUrl</code>.<p>The method corresponding to the passed-in <code>methodName</code> is invoked on the
 service and the response of this invocation is passed through the
 <code>responseServiceUrl</code> to the client.<p>If the response service url is <code>null</code> or an empty string the 
 <a href="org_as2lib_io_conn_local_server_LocalServerServiceProxy.html#invokeMethodByNameAndArguments">invokeMethodByNameAndArguments</a> method is invoked instead.<p>The response service is supposed to implement two methods with the following
 signature:<ul><li>onReturn(returnValue):Void</li><li>onError(errorCode:Number, exception):Void</li></ul><p>The <code>onReturn</code> method is invoked on the response service if the method
 returned successfully.<p>The <code>onError</code> method is invoked on the response service if:<ul><li>The method threw an exception.</li><li>The method does not exist on the service.</li></ul><p>The error listeners will be informed of a failure if:<ul><li>A method with the passed-in <code>methodName</code> does not exist on the wrapped
     service.</li><li>The service method threw an exception.</li><li>The response server with the given <code>responseServiceUrl</code> does not exist.</li><li>The return value is too big to send over a local connection.</li><li>An unknown failure occured when trying to send the response.</li></ul>]]></text>
</description>
<fields>
<field><title><![CDATA[Parameters]]></title>
<param><name><![CDATA[methodName        ]]></name><description><![CDATA[the name of the method to invoke on the service]]></description></param>
<param><name><![CDATA[args              ]]></name><description><![CDATA[the arguments to use as parameters when invoking the method]]></description></param>
<param><name><![CDATA[responseServiceUrl]]></name><description><![CDATA[the url to the service that handles the response]]></description></param>
</field>
<field><title><![CDATA[Specified by]]></title><description><![CDATA[<a href="org_as2lib_io_conn_core_server_ServerServiceProxy.html#invokeMethodByNameAndArgumentsAndResponseService">org.as2lib.io.conn.core.server.ServerServiceProxy.invokeMethodByNameAndArgumentsAndResponseService</a>]]></description></field>
</fields>
</method>
<method>
<title><![CDATA[isRunning]]></title><fullMethod><left><![CDATA[function <b>isRunning</b> (
]]></left><right><param><name><![CDATA[Void]]></name></param>) : <![CDATA[Boolean]]></right></fullMethod>
<description>
<text><![CDATA[Returns whether this service is running or not.]]></text>
</description>
<fields>
<field><title><![CDATA[Returns]]></title><description><![CDATA[<code>true</code> if this service is running else <code>false</code>]]></description></field>
<field><title><![CDATA[Specified by]]></title><description><![CDATA[<a href="org_as2lib_io_conn_core_server_ServerServiceProxy.html#isRunning">org.as2lib.io.conn.core.server.ServerServiceProxy.isRunning</a>]]></description></field>
</fields>
</method>
<method>
<title><![CDATA[removeErrorListener]]></title><fullMethod><left><![CDATA[function <b>removeErrorListener</b> (
]]></left><right><param><name><![CDATA[errorListener]]></name>:<type><![CDATA[<a href="org_as2lib_io_conn_core_event_MethodInvocationErrorListener.html">MethodInvocationErrorListener</a>]]></type></param>) : <![CDATA[Void]]></right></fullMethod>
<description>
<text><![CDATA[Removes an error listener.<p>Error listeners are notified when a client tried to invoke a method on this
 service and something went wrong.]]></text>
</description>
<fields>
<field><title><![CDATA[Parameters]]></title>
<param><name><![CDATA[errorListener]]></name><description><![CDATA[the error listener to remove]]></description></param>
</field>
<field><title><![CDATA[Specified by]]></title><description><![CDATA[<a href="org_as2lib_io_conn_core_server_ServerServiceProxy.html#removeErrorListener">org.as2lib.io.conn.core.server.ServerServiceProxy.removeErrorListener</a>]]></description></field>
</fields>
</method>
<method>
<title><![CDATA[run]]></title><fullMethod><left><![CDATA[function <b>run</b> (
]]></left><right><param><name><![CDATA[host]]></name>:<type><![CDATA[String]]></type></param>) : <![CDATA[Void]]></right></fullMethod>
<description>
<text><![CDATA[Runs this service proxy on the passed-in <code>host</code>.<p>This service proxy will be restarted if it is already running. This means it
 it first stops itself and starts itself again.<p>Only the path of this service proxy is used to connect if the passed-in <code>host</code>
 is <code>null</code>, <code>undefined</code> or an empty string.]]></text>
</description>
<fields>
<field><title><![CDATA[Parameters]]></title>
<param><name><![CDATA[host]]></name><description><![CDATA[the host to run the service on]]></description></param>
</field>
<field><title><![CDATA[Throws]]></title><description><![CDATA[<a href="org_as2lib_io_conn_core_server_ReservedServiceException.html">ReservedServiceException</a> if a service on the passed-in <code>host</code> with
 the service's path is already in use]]></description></field>
<field><title><![CDATA[Specified by]]></title><description><![CDATA[<a href="org_as2lib_io_conn_core_server_ServerServiceProxy.html#run">org.as2lib.io.conn.core.server.ServerServiceProxy.run</a>]]></description></field>
</fields>
</method>
<method>
<title><private><![CDATA[sendResponse]]></private></title><private><![CDATA[private]]></private><fullMethod><left><![CDATA[function <b>sendResponse</b> (





]]></left><right><param><name><![CDATA[methodName]]></name>:<type><![CDATA[String]]></type></param>,
<param><name><![CDATA[methodArguments]]></name>:<type><![CDATA[Array]]></type></param>,
<param><name><![CDATA[responseServiceUrl]]></name>:<type><![CDATA[String]]></type></param>,
<param><name><![CDATA[responseMethod]]></name>:<type><![CDATA[String]]></type></param>,
<param><name><![CDATA[responseArguments]]></name>:<type><![CDATA[Array]]></type></param>,
<param><name><![CDATA[responseListener]]></name>:<type><![CDATA[<a href="org_as2lib_io_conn_core_event_MethodInvocationErrorListener.html">MethodInvocationErrorListener</a>]]></type></param>) : <![CDATA[Void]]></right></fullMethod>
<description>
<text><![CDATA[Sends a response to the client.]]></text>
</description>
<fields>
<field><title><![CDATA[Parameters]]></title>
<param><name><![CDATA[methodName        ]]></name><description><![CDATA[the name of the method]]></description></param>
<param><name><![CDATA[methodArguments   ]]></name><description><![CDATA[the arguments used for the method invocation]]></description></param>
<param><name><![CDATA[responseServiceUrl]]></name><description><![CDATA[the url of the response service]]></description></param>
<param><name><![CDATA[responseMethod    ]]></name><description><![CDATA[the response method to invoke on the response service]]></description></param>
<param><name><![CDATA[responseArguments ]]></name><description><![CDATA[the arguments to pass to the response method]]></description></param>
<param><name><![CDATA[responseListener  ]]></name><description><![CDATA[the listener that listens for failures that may occur when
 sending the response]]></description></param>
</field>
</fields>
</method>
<method>
<title><![CDATA[setConnection]]></title><fullMethod><left><![CDATA[function <b>setConnection</b> (
]]></left><right><param><name><![CDATA[connection]]></name>:<type><![CDATA[<a href="org_as2lib_io_conn_local_core_EnhancedLocalConnection.html">EnhancedLocalConnection</a>]]></type></param>) : <![CDATA[Void]]></right></fullMethod>
<description>
<text><![CDATA[Sets a new connection.<p>If <code>connection</code> is <code>null</code> or <code>undefined</code>, <a href="org_as2lib_io_conn_local_server_LocalServerServiceProxy.html#getConnection">getConnection</a>
 will return the default connection.]]></text>
</description>
<fields>
<field><title><![CDATA[Parameters]]></title>
<param><name><![CDATA[connection]]></name><description><![CDATA[the new connection]]></description></param>
</field>
</fields>
</method>
<method>
<title><![CDATA[stop]]></title><fullMethod><left><![CDATA[function <b>stop</b> (
]]></left><right><param><name><![CDATA[Void]]></name></param>) : <![CDATA[Void]]></right></fullMethod>
<description>
<text><![CDATA[Stops this service.]]></text>
</description>
<fields>
<field><title><![CDATA[Specified by]]></title><description><![CDATA[<a href="org_as2lib_io_conn_core_server_ServerServiceProxy.html#stop">org.as2lib.io.conn.core.server.ServerServiceProxy.stop</a>]]></description></field>
</fields>
</method>
</methodSection>
</methodSections>
<footer><copyright><![CDATA[2005 as2lib]]></copyright>
<date><![CDATA[Tuesday, 31 May 2005, 20:29:19]]>
</date><showTOC>show TOC</showTOC><hideTOC>hide TOC</hideTOC><showPrivate>show private members</showPrivate><hidePrivate>hide private members</hidePrivate>
</footer>
</document>