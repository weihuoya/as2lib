<?xml version="1.0" encoding="utf-8"?>
<document>
<cssFile><![CDATA[css/VisDoc.css]]></cssFile>
<title><![CDATA[EnhancedLocalConnection]]></title>
<classDocScript />
<classData>
<inheritsFrom>
<title><![CDATA[Inherits from]]></title><item><link><name><![CDATA[BasicClass]]></name><uri><![CDATA[org_as2lib_core_BasicClass]]></uri></link></item>
</inheritsFrom>
<classDetails>
<item><title><![CDATA[Author]]></title><value><![CDATA[Simon Wacker, Christoph Atteneder]]></value></item>
<item><title><![CDATA[Classpath]]></title><value><![CDATA[org.as2lib.io.conn.local.core.EnhancedLocalConnection]]></value></item>
<item><title><![CDATA[File last modified]]></title><value><![CDATA[Friday, 06 May 2005, 12:13:34]]></value></item>
</classDetails>
<classDescription><summary><![CDATA[<code>EnhancedLocalConnection</code> provides enhanced local connection functionalities.]]></summary><restOfDescription><![CDATA[<p>These functionalities are proper listener support for asynchronous failures
 and comprehensible exceptions on synchronous errors like reserved and unknown
 connections and oversized arguments. Refer to the specific method for further
 descriptions.<p>You can set up a connection to receive 'remote' method invocations as follows:<pre><span class="codeKeyword">var</span> service:EnhancedLocalConnection = <span class="codeKeyword">new</span> EnhancedLocalConnection();
service[<span class="codeString">"myMethod"</span>] = <span class="codeKeyword">function</span>(myArg1:<span class="codeIdentifier">String</span>, myArg2:<span class="codeIdentifier">String</span>):<span class="codeIdentifier">Void</span> {
    <span class="codeIdentifier">trace</span>(<span class="codeString">"invoked myMethod("</span> + myArg1 + <span class="codeString">", "</span> + myArg2 + <span class="codeString">")"</span>);
}
service.connect(<span class="codeString">"myService"</span>);</pre><p>While the above example works it is not as neat as it could be. It would be
 better to use another instance as service and the connection only to set it up
 to receive 'remote' method calls.<pre><span class="codeKeyword">var</span> service:MyService = <span class="codeKeyword">new</span> MyService();
<span class="codeKeyword">var</span> connection:EnhancedLocalConnection = <span class="codeKeyword">new</span> EnhancedLocalConnection(service);
connection.connect(<span class="codeString">"myService"</span>);</pre><p>The service is set up now to receive 'remote' method invocations. You can now
 invoke a method on it as follows:<pre><span class="codeKeyword">var</span> client:EnhancedLocalConnection = <span class="codeKeyword">new</span> EnhancedLocalConnection();
<span class="codeKeyword">var</span> listener:MethodInvocationErrorListener = client.send(<span class="codeString">"myService"</span>, <span class="codeString">"myMethod"</span>, [<span class="codeString">"arg1"</span>, <span class="codeString">"arg2"</span>]);
listener.onError = <span class="codeKeyword">function</span>(errorInfo:MethodInvocationErrorInfo):<span class="codeIdentifier">Void</span> {
    <span class="codeIdentifier">trace</span>(<span class="codeString">"Error occured: "</span> + errorInfo); 
}</pre>]]></restOfDescription>
</classDescription>
</classData>
<pageSummary>
<methodList>
<title><![CDATA[Summary]]></title>
<methodSummaryPart>
<title><![CDATA[Constructor]]></title>
<item><![CDATA[EnhancedLocalConnection]]></item>
</methodSummaryPart>
<private>
<methodSummaryPart>
<title><![CDATA[Instance properties]]></title>
<item><private><![CDATA[target]]></private></item>
<item><private><![CDATA[connected]]></private></item>
<item><private><![CDATA[errorDistributorControl]]></private></item>
<item><private><![CDATA[clientArray]]></private></item>
</methodSummaryPart>
</private>
<methodSummaryPart>
<title><![CDATA[Class methods]]></title>
<item><![CDATA[connectionExists]]></item>
</methodSummaryPart>
<methodSummaryPart>
<title><![CDATA[Instance methods]]></title>
<item><private><![CDATA[EnhancedLocalConnectionByVoid]]></private></item>
<item><private><![CDATA[EnhancedLocalConnectionByTarget]]></private></item>
<item><![CDATA[connect]]></item>
<item><![CDATA[close]]></item>
<item><![CDATA[send]]></item>
<item><![CDATA[sendByConnectionAndMethod]]></item>
<item><![CDATA[sendByConnectionAndMethodAndArguments]]></item>
<item><![CDATA[sendByConnectionAndMethodAndListener]]></item>
<item><![CDATA[sendByConnectionAndMethodAndArgumentsAndListener]]></item>
<item><private><![CDATA[getBlankMethodInvocationErrorListener]]></private></item>
<item><private><![CDATA[dispatchError]]></private></item>
<item><![CDATA[addErrorListener]]></item>
<item><![CDATA[removeErrorListener]]></item>
<inheritedMethods>
<fromClass><title><text><![CDATA[Instance methods inherited from]]></text><link><name><![CDATA[BasicClass]]></name><uri><![CDATA[org_as2lib_core_BasicClass]]></uri></link></title><item><link><name>toString</name><uri>org_as2lib_core_BasicClass</uri><method>toString</method></link></item></fromClass>
</inheritedMethods>
</methodSummaryPart>
</methodList>
</pageSummary>
<methodSections>
<methodSection>
<title><![CDATA[Constructor]]></title>
<method>
<title><![CDATA[EnhancedLocalConnection]]></title><fullMethod><left><![CDATA[function <b>EnhancedLocalConnection</b> (
]]></left><right>)</right></fullMethod>
<fields>
<field><title><![CDATA[Overloading]]></title><description><![CDATA[<a href="org_as2lib_io_conn_local_core_EnhancedLocalConnection.html#EnhancedLocalConnectionByVoid">EnhancedLocalConnectionByVoid</a> <code>(Void) : Void</code><br /><a href="org_as2lib_io_conn_local_core_EnhancedLocalConnection.html#EnhancedLocalConnectionByTarget">EnhancedLocalConnectionByTarget</a> <code>(target) : Void</code>]]></description></field>
</fields>
</method>
</methodSection>
<private>
<methodSection>
<title><![CDATA[Instance properties]]></title>
<method>
<title><private><![CDATA[clientArray]]></private></title><private><![CDATA[private]]></private><fullMethod><left><![CDATA[<b>clientArray</b>:Array
]]></left><right></right></fullMethod>
<description>
<text><![CDATA[Stores clients waiting for status reports.]]></text>
</description>
</method>
<method>
<title><private><![CDATA[connected]]></private></title><private><![CDATA[private]]></private><fullMethod><left><![CDATA[<b>connected</b>:Boolean
]]></left><right></right></fullMethod>
<description>
<text><![CDATA[Indicates whether this connection is open <code>true</code> or closed <code>false</code>.]]></text>
</description>
</method>
<method>
<title><private><![CDATA[errorDistributorControl]]></private></title><private><![CDATA[private]]></private><fullMethod><left><![CDATA[<b>errorDistributorControl</b>:<a href="org_as2lib_env_event_distributor_EventDistributorControl.html">EventDistributorControl</a>
]]></left><right></right></fullMethod>
<description>
<text><![CDATA[Stores added error listeners and provides distribution functionality.]]></text>
</description>
</method>
<method>
<title><private><![CDATA[target]]></private></title><private><![CDATA[private]]></private><fullMethod><left><![CDATA[<b>target</b>:Object
]]></left><right></right></fullMethod>
<description>
<text><![CDATA[Target that is used as server.]]></text>
</description>
</method>
</methodSection>
</private>
<methodSection>
<title><![CDATA[Class methods]]></title>
<method>
<title><![CDATA[connectionExists]]></title><fullMethod><left><![CDATA[static function <b>connectionExists</b> (
]]></left><right><param><name><![CDATA[connectionName]]></name>:<type><![CDATA[String]]></type></param>) : <![CDATA[Boolean]]></right></fullMethod>
<description>
<text><![CDATA[Checks if a connection with the passed-in <code>connectionName</code> exists.<p><code>false</code> will always be returned if the <code>connectionName</code> is <code>null</code>, 
 <code>undefined</code> or an empty string.]]></text>
</description>
<fields>
<field><title><![CDATA[Parameters]]></title>
<param><name><![CDATA[connectionName]]></name><description><![CDATA[the name of the connection]]></description></param>
</field>
<field><title><![CDATA[Returns]]></title><description><![CDATA[<code>true</code> if the connection exists else <code>false</code>]]></description></field>
</fields>
</method>
</methodSection>
<methodSection>
<title><![CDATA[Instance methods]]></title>
<method>
<title><![CDATA[addErrorListener]]></title><fullMethod><left><![CDATA[function <b>addErrorListener</b> (
]]></left><right><param><name><![CDATA[listener]]></name>:<type><![CDATA[<a href="org_as2lib_io_conn_core_event_MethodInvocationErrorListener.html">MethodInvocationErrorListener</a>]]></type></param>) : <![CDATA[Void]]></right></fullMethod>
<description>
<text><![CDATA[Adds a new error listener.<p>Error listener is invoked if an asynchron error occured. This is mostly when
 you try to invoke a remote method.]]></text>
</description>
<fields>
<field><title><![CDATA[Parameters]]></title>
<param><name><![CDATA[listener]]></name><description><![CDATA[the new error listener to add]]></description></param>
</field>
</fields>
</method>
<method>
<title><![CDATA[close]]></title><fullMethod><left><![CDATA[function <b>close</b> (
]]></left><right><param><name><![CDATA[Void]]></name></param>) : <![CDATA[Void]]></right></fullMethod>
<description>
<text><![CDATA[Closes this connection.]]></text>
</description>
</method>
<method>
<title><![CDATA[connect]]></title><fullMethod><left><![CDATA[function <b>connect</b> (
]]></left><right><param><name><![CDATA[connectionName]]></name>:<type><![CDATA[String]]></type></param>) : <![CDATA[Void]]></right></fullMethod>
<description>
<text><![CDATA[Prepares this connection to receive 'remote' method invocations.<p>Closes this connection if it is currenlty running and opens a new one.<p>If you specified a target, the 'remote' method invocations will be led directly
 to it.]]></text>
</description>
<fields>
<field><title><![CDATA[Parameters]]></title>
<param><name><![CDATA[connectionName]]></name><description><![CDATA[name of the connection the client uses to send method calls]]></description></param>
</field>
<field><title><![CDATA[Throws]]></title><description><![CDATA[<a href="org_as2lib_env_except_IllegalArgumentException.html">IllegalArgumentException</a> if the passed-in <code>connectionName</code> is 
 <code>null</code>, <code>undefined</code> or an empty string<br /><a href="org_as2lib_io_conn_local_core_ReservedConnectionException.html">ReservedConnectionException</a> if a connection with the passed-in
 <code>connectionName</code> is already in use]]></description></field>
</fields>
</method>
<method>
<title><private><![CDATA[dispatchError]]></private></title><private><![CDATA[private]]></private><fullMethod><left><![CDATA[function <b>dispatchError</b> (
]]></left><right><param><name><![CDATA[info]]></name>:<type><![CDATA[<a href="org_as2lib_io_conn_core_event_MethodInvocationErrorInfo.html">MethodInvocationErrorInfo</a>]]></type></param>)</right></fullMethod>
<description>
<text><![CDATA[Dispatches the occured error to all registered error listeners.]]></text>
</description>
<fields>
<field><title><![CDATA[Parameters]]></title>
<param><name><![CDATA[info]]></name><description><![CDATA[that contains further information about the error]]></description></param>
</field>
</fields>
</method>
<method>
<title><private><![CDATA[EnhancedLocalConnectionByTarget]]></private></title><private><![CDATA[private]]></private><fullMethod><left><![CDATA[function <b>EnhancedLocalConnectionByTarget</b> (
]]></left><right><param><name><![CDATA[target]]></name></param>) : <![CDATA[Void]]></right></fullMethod>
<description>
<text><![CDATA[Constructs a new <code>EnhancedLocalConnection</code> instance with target.<p>If the passed-in <code>target</code> is <code>null</code> or <code>undefined</code>, the it
 will be set to <code>this</code>.]]></text>
</description>
<fields>
<field><title><![CDATA[Parameters]]></title>
<param><name><![CDATA[target]]></name><description><![CDATA[the target to use as server when creating a new connection]]></description></param>
</field>
</fields>
</method>
<method>
<title><private><![CDATA[EnhancedLocalConnectionByVoid]]></private></title><private><![CDATA[private]]></private><fullMethod><left><![CDATA[function <b>EnhancedLocalConnectionByVoid</b> (
]]></left><right><param><name><![CDATA[Void]]></name></param>) : <![CDATA[Void]]></right></fullMethod>
<description>
<text><![CDATA[Constructs a new <code>EnhancedLocalConnection</code> instance.<p>The target is set to <code>this</code>.]]></text>
</description>
</method>
<method>
<title><private><![CDATA[getBlankMethodInvocationErrorListener]]></private></title><private><![CDATA[private]]></private><fullMethod><left><![CDATA[function <b>getBlankMethodInvocationErrorListener</b> (
]]></left><right><param><name><![CDATA[Void]]></name></param>) : <![CDATA[<a href="org_as2lib_io_conn_core_event_MethodInvocationErrorListener.html">MethodInvocationErrorListener</a>]]></right></fullMethod>
<description>
<text><![CDATA[Returns a blank method invocation error listener. This is an error listener with
 no implemented methods.]]></text>
</description>
<fields>
<field><title><![CDATA[Returns]]></title><description><![CDATA[a blank method invocation error listener]]></description></field>
</fields>
</method>
<method>
<title><![CDATA[removeErrorListener]]></title><fullMethod><left><![CDATA[function <b>removeErrorListener</b> (
]]></left><right><param><name><![CDATA[listener]]></name>:<type><![CDATA[<a href="org_as2lib_io_conn_core_event_MethodInvocationErrorListener.html">MethodInvocationErrorListener</a>]]></type></param>) : <![CDATA[Void]]></right></fullMethod>
<description>
<text><![CDATA[Removes an error listener.<p>Error listener is invoked if an asynchron error occured. This is mostly when
 you try to invoke a remote method.]]></text>
</description>
<fields>
<field><title><![CDATA[Parameters]]></title>
<param><name><![CDATA[listener]]></name><description><![CDATA[the error listener to remove]]></description></param>
</field>
</fields>
</method>
<method>
<title><![CDATA[send]]></title><fullMethod><left><![CDATA[function <b>send</b> (
]]></left><right>) : <![CDATA[<a href="org_as2lib_io_conn_core_event_MethodInvocationErrorListener.html">MethodInvocationErrorListener</a>]]></right></fullMethod>
<fields>
<field><title><![CDATA[Overloading]]></title><description><![CDATA[<a href="org_as2lib_io_conn_local_core_EnhancedLocalConnection.html#sendByConnectionAndMethod">sendByConnectionAndMethod</a> <code>(connectionName:String, methodName:String) : {VISDOC_LINK_0}</code><br /><a href="org_as2lib_io_conn_local_core_EnhancedLocalConnection.html#sendByConnectionAndMethodAndArguments">sendByConnectionAndMethodAndArguments</a> <code>(connectionName:String, methodName:String, args:Array) : {VISDOC_LINK_0}</code><br /><a href="org_as2lib_io_conn_local_core_EnhancedLocalConnection.html#sendByConnectionAndMethodAndListener">sendByConnectionAndMethodAndListener</a> <code>(connectionName:String, methodName:String, listener:{VISDOC_LINK_0}) : {VISDOC_LINK_1}</code><br /><a href="org_as2lib_io_conn_local_core_EnhancedLocalConnection.html#sendByConnectionAndMethodAndArgumentsAndListener">sendByConnectionAndMethodAndArgumentsAndListener</a> <code>(connectionName:String, methodName:String, args:Array, listener:{VISDOC_LINK_0}) : {VISDOC_LINK_1}</code>]]></description></field>
</fields>
</method>
<method>
<title><![CDATA[sendByConnectionAndMethod]]></title><fullMethod><left><![CDATA[function <b>sendByConnectionAndMethod</b> (

]]></left><right><param><name><![CDATA[connectionName]]></name>:<type><![CDATA[String]]></type></param>,
<param><name><![CDATA[methodName]]></name>:<type><![CDATA[String]]></type></param>) : <![CDATA[<a href="org_as2lib_io_conn_core_event_MethodInvocationErrorListener.html">MethodInvocationErrorListener</a>]]></right></fullMethod>
<description>
<text><![CDATA[Invokes a method remotely on the connection specified by the passed-in
 <code>connectionName</code>, passing no arguments.<p>Error listeners are informed if the 'remote' method invocation failed asynchron
 of an unknown reason.<p>A new <code>MethodInvocationErrorListener</code> instance is created and returned.
 You can set the <code>onError</code> method on it to be informed of occuring errors.]]></text>
</description>
<fields>
<field><title><![CDATA[Parameters]]></title>
<param><name><![CDATA[connectionName]]></name><description><![CDATA[the name of the connection to invoke the method on]]></description></param>
<param><name><![CDATA[methodName    ]]></name><description><![CDATA[the name of the method to invoke on the connection]]></description></param>
</field>
<field><title><![CDATA[Returns]]></title><description><![CDATA[an error listener that informs you of occuring errors if you set the
 <code>onError</code> method on it]]></description></field>
<field><title><![CDATA[Throws]]></title><description><![CDATA[<a href="org_as2lib_env_except_IllegalArgumentException.html">IllegalArgumentException</a> if <code>connectionName</code> or <code>methodName</code>
 are <code>null</code>, <code>undefined</code> or an empty string<br /><a href="org_as2lib_io_conn_local_core_UnknownConnectionException.html">UnknownConnectionException</a> if a connection with the passed-in
 <code>connectionName</code> does not exist]]></description></field>
</fields>
</method>
<method>
<title><![CDATA[sendByConnectionAndMethodAndArguments]]></title><fullMethod><left><![CDATA[function <b>sendByConnectionAndMethodAndArguments</b> (


]]></left><right><param><name><![CDATA[connectionName]]></name>:<type><![CDATA[String]]></type></param>,
<param><name><![CDATA[methodName]]></name>:<type><![CDATA[String]]></type></param>,
<param><name><![CDATA[args]]></name>:<type><![CDATA[Array]]></type></param>) : <![CDATA[<a href="org_as2lib_io_conn_core_event_MethodInvocationErrorListener.html">MethodInvocationErrorListener</a>]]></right></fullMethod>
<description>
<text><![CDATA[Invokes a method remotely on the connection specified by the passed-in
 <code>connectionName</code> passing <code>args</code> as parameters.<p>Error listeners are informed if the 'remote' method invocation failed asynchron
 of an unknown reason.<p>A new <code>MethodInvocationErrorListener</code> instance is created and returned.
 You can set the <code>onError</code> method on it to be informed of occuring errors.]]></text>
</description>
<fields>
<field><title><![CDATA[Parameters]]></title>
<param><name><![CDATA[connectionName]]></name><description><![CDATA[the name of the connection to invoke the method on]]></description></param>
<param><name><![CDATA[methodName    ]]></name><description><![CDATA[the name of the method to invoke on the connection]]></description></param>
<param><name><![CDATA[args          ]]></name><description><![CDATA[the arguments to pass as parameters when invoking the connection]]></description></param>
</field>
<field><title><![CDATA[Returns]]></title><description><![CDATA[an error listener that informs you of occuring errors if you set the 
 <code>onError</code> method on it]]></description></field>
<field><title><![CDATA[Throws]]></title><description><![CDATA[<a href="org_as2lib_env_except_IllegalArgumentException.html">IllegalArgumentException</a> if <code>connectionName</code> or <code>methodName</code>
 are <code>null</code>, <code>undefined</code> or an empty string<br /><a href="org_as2lib_io_conn_local_core_UnknownConnectionException.html">UnknownConnectionException</a> if a connection with the passed-in 
 <code>connectionName</code> does not exist<br /><a href="org_as2lib_io_conn_core_client_MethodInvocationException.html">MethodInvocationException</a> if the arguments you try to pass are out of size]]></description></field>
</fields>
</method>
<method>
<title><![CDATA[sendByConnectionAndMethodAndArgumentsAndListener]]></title><fullMethod><left><![CDATA[function <b>sendByConnectionAndMethodAndArgumentsAndListener</b> (



]]></left><right><param><name><![CDATA[connectionName]]></name>:<type><![CDATA[String]]></type></param>,
<param><name><![CDATA[methodName]]></name>:<type><![CDATA[String]]></type></param>,
<param><name><![CDATA[args]]></name>:<type><![CDATA[Array]]></type></param>,
<param><name><![CDATA[listener]]></name>:<type><![CDATA[<a href="org_as2lib_io_conn_core_event_MethodInvocationErrorListener.html">MethodInvocationErrorListener</a>]]></type></param>) : <![CDATA[<a href="org_as2lib_io_conn_core_event_MethodInvocationErrorListener.html">MethodInvocationErrorListener</a>]]></right></fullMethod>
<description>
<text><![CDATA[Invokes a method remotely on the connection specified by the passed-in
 <code>connectionName</code> passing <code>args</code> as parameters.<p>Error listeners are informed if the 'remote' method invocation failed asynchron
 of an unknown reason.<p>A new <code>MethodInvocationErrorListener</code> instance is created and returned,
 if the passed-in <code>listener</code> is <code>null</code>. Otherwise the passed-in one
 is returned. You can set the <code>onError</code> method on it to be informed of
 occuring errors.]]></text>
</description>
<fields>
<field><title><![CDATA[Parameters]]></title>
<param><name><![CDATA[connectionName]]></name><description><![CDATA[the name of the connection to invoke a method on]]></description></param>
<param><name><![CDATA[methodName    ]]></name><description><![CDATA[the name of the method to invoke on the connection]]></description></param>
<param><name><![CDATA[args          ]]></name><description><![CDATA[the arguments to pass as parameters when invoking the method]]></description></param>
<param><name><![CDATA[listener      ]]></name><description><![CDATA[the listener to notify if the method invocation failed out of an
 asynchron unknwon reason]]></description></param>
</field>
<field><title><![CDATA[Returns]]></title><description><![CDATA[either the passed-in listener if it was not <code>null</code> or <code>undefined</code>,
 or a new listener]]></description></field>
<field><title><![CDATA[Throws]]></title><description><![CDATA[<a href="org_as2lib_env_except_IllegalArgumentException.html">IllegalArgumentException</a> if <code>connectionName</code> or <code>methodName</code>
 are <code>null</code>, <code>undefined</code> or an empty string<br /><a href="org_as2lib_io_conn_local_core_UnknownConnectionException.html">UnknownConnectionException</a> if a connection with the passed-in 
 <code>connectionName</code> does not exist<br /><a href="org_as2lib_io_conn_core_client_MethodInvocationException.html">MethodInvocationException</a> if the arguments you try to pass are out of size]]></description></field>
</fields>
</method>
<method>
<title><![CDATA[sendByConnectionAndMethodAndListener]]></title><fullMethod><left><![CDATA[function <b>sendByConnectionAndMethodAndListener</b> (


]]></left><right><param><name><![CDATA[connectionName]]></name>:<type><![CDATA[String]]></type></param>,
<param><name><![CDATA[methodName]]></name>:<type><![CDATA[String]]></type></param>,
<param><name><![CDATA[listener]]></name>:<type><![CDATA[<a href="org_as2lib_io_conn_core_event_MethodInvocationErrorListener.html">MethodInvocationErrorListener</a>]]></type></param>) : <![CDATA[<a href="org_as2lib_io_conn_core_event_MethodInvocationErrorListener.html">MethodInvocationErrorListener</a>]]></right></fullMethod>
<description>
<text><![CDATA[Invokes a method remotely on the connection specified by the passed-in
 <code>connectionName</code> passing <code>args</code> as parameters.<p>Error listeners are informed if the 'remote' method invocation failed asynchron
 of an unknown reason.<p>A new <code>MethodInvocationErrorListener</code> instance is created and returned,
 if the passed-in <code>listener</code> is <code>null</code>. Otherwise the passed-in one
 is returned. You can set the <code>onError</code> method on it to be informed of
 occuring errors.]]></text>
</description>
<fields>
<field><title><![CDATA[Parameters]]></title>
<param><name><![CDATA[connectionName]]></name><description><![CDATA[the name of the connection to invoke a method on]]></description></param>
<param><name><![CDATA[methodName    ]]></name><description><![CDATA[the name of the method to invoke on the connection]]></description></param>
<param><name><![CDATA[listener      ]]></name><description><![CDATA[the listener to notify if the method invocation failed out of an
 asynchron unknwon reason]]></description></param>
</field>
<field><title><![CDATA[Returns]]></title><description><![CDATA[either the passed-in listener if it was not <code>null</code> or <code>undefined</code>,
 or a new listener]]></description></field>
<field><title><![CDATA[Throws]]></title><description><![CDATA[<a href="org_as2lib_env_except_IllegalArgumentException.html">IllegalArgumentException</a> if <code>connectionName</code> or <code>methodName</code>
 are <code>null</code>, <code>undefined</code> or an empty string<br /><a href="org_as2lib_io_conn_local_core_UnknownConnectionException.html">UnknownConnectionException</a> if a connection with the passed-in 
 <code>connectionName</code> does not exist<br /><a href="org_as2lib_io_conn_core_client_MethodInvocationException.html">MethodInvocationException</a> if the arguments you try to pass are out of size]]></description></field>
</fields>
</method>
</methodSection>
</methodSections>
<footer><copyright><![CDATA[2005 as2lib]]></copyright>
<date><![CDATA[Tuesday, 31 May 2005, 20:29:12]]>
</date><showTOC>show TOC</showTOC><hideTOC>hide TOC</hideTOC><showPrivate>show private members</showPrivate><hidePrivate>hide private members</hidePrivate>
</footer>
</document>