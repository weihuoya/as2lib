<?xml version="1.0" encoding="utf-8"?>
<document>
<cssFile><![CDATA[css/VisDoc.css]]></cssFile>
<title><![CDATA[LoggerHierarchy]]></title>
<classDocScript />
<classData>
<inheritsFrom>
<title><![CDATA[Inherits from]]></title><item><link><name><![CDATA[BasicClass]]></name><uri><![CDATA[org_as2lib_core_BasicClass]]></uri></link></item>
</inheritsFrom>
<conformsTo>
<title><![CDATA[Implements]]></title><item><link><name><![CDATA[LoggerRepository]]></name><uri><![CDATA[org_as2lib_env_log_LoggerRepository]]></uri></link></item>
</conformsTo>
<classDetails>
<item><title><![CDATA[Author]]></title><value><![CDATA[Simon Wacker]]></value></item>
<item><title><![CDATA[Classpath]]></title><value><![CDATA[org.as2lib.env.log.repository.LoggerHierarchy]]></value></item>
<item><title><![CDATA[File last modified]]></title><value><![CDATA[Sunday, 10 April 2005, 10:34:10]]></value></item>
</classDetails>
<classDescription><summary><![CDATA[<code>LoggerHierarchy</code> organizes loggers in a hierarchical structure.]]></summary><restOfDescription><![CDATA[<p>It works only with loggers that are capable of acting properly in a hierarchy.
 These loggers must implement the <a href="org_as2lib_env_log_ConfigurableHierarchicalLogger.html">org.as2lib.env.log.ConfigurableHierarchicalLogger</a>
 interface.<p>The names of the loggers must be fully qualified and the differnt parts of
 the preceding structure/path must be separated by periods.<p>This repository takes care that the parents of all loggers are correct and
 updates them if necessary. The hierarchical loggers themselves are responsible
 of obtaining the level and handlers from its parents if necessary and desired.<p>Example:<pre><span class="codeKeyword">var</span> repository:LoggerHierarchy = <span class="codeKeyword">new</span> LoggerHierarchy();
LogManager.setLoggerRepository(repository);
<span class="codeKeyword">var</span> traceLogger:SimpleHierarchicalLogger = <span class="codeKeyword">new</span> SimpleHierarchicalLogger(<span class="codeString">"org.as2lib"</span>);
traceLogger.addHandler(<span class="codeKeyword">new</span> TraceHandler());
repository.addLogger(traceLogger);
<span class="codeComment">// in some other class or something</span>
<span class="codeKeyword">var</span> myLogger:Logger = LogManager.getLogger(<span class="codeString">"org.as2lib.mypackage.MyClass"</span>);
myLogger.warning(<span class="codeString">"Someone did something he should not do."</span>);</pre><p>The message is traced because the namespace of <code>myLogger</code> is the same
 as the one of <code>traceLogger</code>. You can of course add multiple handlers to
 one logger and also multiple loggers to different namespaces.]]></restOfDescription>
</classDescription>
</classData>
<pageSummary>
<methodList>
<title><![CDATA[Summary]]></title>
<methodSummaryPart>
<title><![CDATA[Constructor]]></title>
<item><![CDATA[LoggerHierarchy]]></item>
</methodSummaryPart>
<private>
<methodSummaryPart>
<title><![CDATA[Instance properties]]></title>
<item><private><![CDATA[root]]></private></item>
<item><private><![CDATA[loggers]]></private></item>
<item><private><![CDATA[defaultLoggerFactory]]></private></item>
</methodSummaryPart>
</private>
<methodSummaryPart>
<title><![CDATA[Instance methods]]></title>
<item><![CDATA[getDefaultLoggerFactory]]></item>
<item><private><![CDATA[getNormalLoggerFactory]]></private></item>
<item><![CDATA[setDefaultLoggerFactory]]></item>
<item><![CDATA[getRootLogger]]></item>
<item><![CDATA[addLogger]]></item>
<item><private><![CDATA[getSingletonFactory]]></private></item>
<item><![CDATA[getLogger]]></item>
<item><![CDATA[getLoggerByFactory]]></item>
<item><private><![CDATA[updateParents]]></private></item>
<item><private><![CDATA[updateChildren]]></private></item>
<item><private><![CDATA[getBlankConfigurableHierarchicalLoggerFactory]]></private></item>
<inheritedMethods>
<fromClass><title><text><![CDATA[Instance methods inherited from]]></text><link><name><![CDATA[BasicClass]]></name><uri><![CDATA[org_as2lib_core_BasicClass]]></uri></link></title><item><link><name>toString</name><uri>org_as2lib_core_BasicClass</uri><method>toString</method></link></item></fromClass>
</inheritedMethods>
</methodSummaryPart>
</methodList>
</pageSummary>
<methodSections>
<methodSection>
<title><![CDATA[Constructor]]></title>
<method>
<title><![CDATA[LoggerHierarchy]]></title><fullMethod><left><![CDATA[function <b>LoggerHierarchy</b> (
]]></left><right><param><name><![CDATA[root]]></name>:<type><![CDATA[<a href="org_as2lib_env_log_ConfigurableHierarchicalLogger.html">ConfigurableHierarchicalLogger</a>]]></type></param>)</right></fullMethod>
<description>
<text><![CDATA[Constructs a new <code>LoggerHierarchy</code> instance.<p>Registers the root logger with name <code>"root"</code> if the <code>root</code>'s
 <code>getName</code> method returns <code>null</code> or <code>undefined</code>. Otherwise it
 will be registered with the name returned by the <code>root</code>'s <code>getName</code>
 method.<p>If the passed-in <code>root</code> is <code>null</code> or <code>undefined</code> an
 instance of type <a href="org_as2lib_env_log_logger_RootLogger.html">org.as2lib.env.log.logger.RootLogger</a> with name <code>"root"</code> and log level
 <code>ALL</code> will be used instead.]]></text>
</description>
<fields>
<field><title><![CDATA[Parameters]]></title>
<param><name><![CDATA[root]]></name><description><![CDATA[the root of the hierarchy]]></description></param>
</field>
</fields>
</method>
</methodSection>
<private>
<methodSection>
<title><![CDATA[Instance properties]]></title>
<method>
<title><private><![CDATA[defaultLoggerFactory]]></private></title><private><![CDATA[private]]></private><fullMethod><left><![CDATA[<b>defaultLoggerFactory</b>:<a href="org_as2lib_env_log_repository_ConfigurableHierarchicalLoggerFactory.html">ConfigurableHierarchicalLoggerFactory</a>
]]></left><right></right></fullMethod>
<description>
<text><![CDATA[This factory is used when no custom factory is specified.]]></text>
</description>
</method>
<method>
<title><private><![CDATA[loggers]]></private></title><private><![CDATA[private]]></private><fullMethod><left><![CDATA[<b>loggers</b>:Array
]]></left><right></right></fullMethod>
<description>
<text><![CDATA[Stores added loggers.]]></text>
</description>
</method>
<method>
<title><private><![CDATA[root]]></private></title><private><![CDATA[private]]></private><fullMethod><left><![CDATA[<b>root</b>:<a href="org_as2lib_env_log_ConfigurableHierarchicalLogger.html">ConfigurableHierarchicalLogger</a>
]]></left><right></right></fullMethod>
<description>
<text><![CDATA[Stores the root of this hierarchy.]]></text>
</description>
</method>
</methodSection>
</private>
<methodSection>
<title><![CDATA[Instance methods]]></title>
<method>
<title><![CDATA[addLogger]]></title><fullMethod><left><![CDATA[function <b>addLogger</b> (
]]></left><right><param><name><![CDATA[logger]]></name>:<type><![CDATA[<a href="org_as2lib_env_log_ConfigurableHierarchicalLogger.html">ConfigurableHierarchicalLogger</a>]]></type></param>) : <![CDATA[Void]]></right></fullMethod>
<description>
<text><![CDATA[Adds a new logger to this hierarchical repository.<p>The logger is automatically integrated into the hierarchy.]]></text>
</description>
<fields>
<field><title><![CDATA[Parameters]]></title>
<param><name><![CDATA[logger]]></name><description><![CDATA[the logger to add to this hierarchy]]></description></param>
</field>
<field><title><![CDATA[Throws]]></title><description><![CDATA[<a href="org_as2lib_env_except_IllegalArgumentException.html">IllegalArgumentException</a> if the passed-in <code>logger</code> is <code>null</code>
 or <code>undefined</code> or if the passed-in <code>logger</code>'s <code>getName</code> method
 returns <code>null</code> or <code>undefined</code> or if a logger with the <code>logger</code>'s
 name is already in use]]></description></field>
</fields>
</method>
<method>
<title><private><![CDATA[getBlankConfigurableHierarchicalLoggerFactory]]></private></title><private><![CDATA[private]]></private><fullMethod><left><![CDATA[function <b>getBlankConfigurableHierarchicalLoggerFactory</b> (
]]></left><right><param><name><![CDATA[Void]]></name></param>) : <![CDATA[<a href="org_as2lib_env_log_repository_ConfigurableHierarchicalLoggerFactory.html">ConfigurableHierarchicalLoggerFactory</a>]]></right></fullMethod>
<description>
<text><![CDATA[Returns a blank configurable hierarchical logger factory. That is a logger
 factory with no implemented methods.]]></text>
</description>
<fields>
<field><title><![CDATA[Returns]]></title><description><![CDATA[a blank configurable hierarchical logger factory]]></description></field>
</fields>
</method>
<method>
<title><![CDATA[getDefaultLoggerFactory]]></title><fullMethod><left><![CDATA[function <b>getDefaultLoggerFactory</b> (
]]></left><right><param><name><![CDATA[Void]]></name></param>) : <![CDATA[<a href="org_as2lib_env_log_repository_ConfigurableHierarchicalLoggerFactory.html">ConfigurableHierarchicalLoggerFactory</a>]]></right></fullMethod>
<description>
<text><![CDATA[Returns either the factory set via <a href="org_as2lib_env_log_repository_LoggerHierarchy.html#setDefaultLoggerFactory">setDefaultLoggerFactory</a> or the
 default one.<p>The default factory returns instances of type
 <a href="org_as2lib_env_log_logger_SimpleHierarchicalLogger.html">org.as2lib.env.log.logger.SimpleHierarchicalLogger</a>.]]></text>
</description>
<fields>
<field><title><![CDATA[Returns]]></title><description><![CDATA[the factory used as default]]></description></field>
</fields>
</method>
<method>
<title><![CDATA[getLogger]]></title><fullMethod><left><![CDATA[function <b>getLogger</b> (
]]></left><right><param><name><![CDATA[name]]></name>:<type><![CDATA[String]]></type></param>) : <![CDATA[<a href="org_as2lib_env_log_Logger.html">Logger</a>]]></right></fullMethod>
<description>
<text><![CDATA[Returns the logger appropriate to the given <code>name</code>.<p>The <code>name</code> can exist of a path as well as the actual specifier, for
 example <code>org.as2lib.core.BasicClass</code>. In case no logger instance has been
 put for the passed-in <code>name</code> a new will be created by the set factory,
 that by default obtains all its configuration from the parent logger.<p><code>null</code> will be returned if passed-in <code>name</code> is <code>null</code> or
 <code>undefined</code>.]]></text>
</description>
<fields>
<field><title><![CDATA[Parameters]]></title>
<param><name><![CDATA[name]]></name><description><![CDATA[the name of the logger to obtain]]></description></param>
</field>
<field><title><![CDATA[Returns]]></title><description><![CDATA[the logger corresponding to the <code>name</code>]]></description></field>
<field><title><![CDATA[Specified by]]></title><description><![CDATA[<a href="org_as2lib_env_log_LoggerRepository.html#getLogger">org.as2lib.env.log.LoggerRepository.getLogger</a>]]></description></field>
</fields>
</method>
<method>
<title><![CDATA[getLoggerByFactory]]></title><fullMethod><left><![CDATA[function <b>getLoggerByFactory</b> (

]]></left><right><param><name><![CDATA[name]]></name>:<type><![CDATA[String]]></type></param>,
<param><name><![CDATA[factory]]></name>:<type><![CDATA[<a href="org_as2lib_env_log_repository_ConfigurableHierarchicalLoggerFactory.html">ConfigurableHierarchicalLoggerFactory</a>]]></type></param>) : <![CDATA[<a href="org_as2lib_env_log_Logger.html">Logger</a>]]></right></fullMethod>
<description>
<text><![CDATA[Returns the logger corresponding to the passed-in <code>name</code>.<p>If a logger with the passed-in name is not explicitely registered the logger
 returned by the factory is registered with the passed-in <code>name</code>,
 integrated in the hierarchy and returned.<p>The <code>name</code> can exist of a path as well as the actual specifier, for
 example <code>org.as2lib.core.BasicClass</code>. In case no logger instance has been
 put for the passed-in <code>name</code> a new will be created by the set factory,
 that by default obtains all its configuration from the parent logger.<p><code>null</code> will be returned if the passed-in <code>name</code> is <code>null</code>
 or <code>undefined</code>.<p>If the passed-in <code>factory</code> is <code>null</code> or <code>undefined</code> the
 default one will be used.]]></text>
</description>
<fields>
<field><title><![CDATA[Parameters]]></title>
<param><name><![CDATA[name]]></name><description><![CDATA[the name of the logger to return]]></description></param>
</field>
<field><title><![CDATA[Returns]]></title><description><![CDATA[the logger appropriate to the passed-in <code>name</code>]]></description></field>
</fields>
</method>
<method>
<title><private><![CDATA[getNormalLoggerFactory]]></private></title><private><![CDATA[private]]></private><fullMethod><left><![CDATA[function <b>getNormalLoggerFactory</b> (
]]></left><right><param><name><![CDATA[Void]]></name></param>) : <![CDATA[<a href="org_as2lib_env_log_repository_ConfigurableHierarchicalLoggerFactory.html">ConfigurableHierarchicalLoggerFactory</a>]]></right></fullMethod>
<description>
<text><![CDATA[Returns the normal factory that returns instances of class
 <a href="org_as2lib_env_log_logger_SimpleHierarchicalLogger.html">org.as2lib.env.log.logger.SimpleHierarchicalLogger</a>.]]></text>
</description>
<fields>
<field><title><![CDATA[Returns]]></title><description><![CDATA[the normal factory]]></description></field>
</fields>
</method>
<method>
<title><![CDATA[getRootLogger]]></title><fullMethod><left><![CDATA[function <b>getRootLogger</b> (
]]></left><right><param><name><![CDATA[Void]]></name></param>) : <![CDATA[<a href="org_as2lib_env_log_Logger.html">Logger</a>]]></right></fullMethod>
<description>
<text><![CDATA[Returns the root logger of this hierarchy.]]></text>
</description>
<fields>
<field><title><![CDATA[Returns]]></title><description><![CDATA[the root logger of this hierarchy]]></description></field>
</fields>
</method>
<method>
<title><private><![CDATA[getSingletonFactory]]></private></title><private><![CDATA[private]]></private><fullMethod><left><![CDATA[function <b>getSingletonFactory</b> (
]]></left><right><param><name><![CDATA[logger]]></name>:<type><![CDATA[<a href="org_as2lib_env_log_ConfigurableHierarchicalLogger.html">ConfigurableHierarchicalLogger</a>]]></type></param>) : <![CDATA[<a href="org_as2lib_env_log_repository_ConfigurableHierarchicalLoggerFactory.html">ConfigurableHierarchicalLoggerFactory</a>]]></right></fullMethod>
<description>
<text><![CDATA[Returns the factory used to obtain the passed-in <code>logger</code>.]]></text>
</description>
<fields>
<field><title><![CDATA[Parameters]]></title>
<param><name><![CDATA[logger]]></name><description><![CDATA[the logger to be returned by the returned factory]]></description></param>
</field>
<field><title><![CDATA[Returns]]></title><description><![CDATA[a factory that returns the passed-in <code>logger</code>]]></description></field>
</fields>
</method>
<method>
<title><![CDATA[setDefaultLoggerFactory]]></title><fullMethod><left><![CDATA[function <b>setDefaultLoggerFactory</b> (
]]></left><right><param><name><![CDATA[defaultLoggerFactory]]></name>:<type><![CDATA[<a href="org_as2lib_env_log_repository_ConfigurableHierarchicalLoggerFactory.html">ConfigurableHierarchicalLoggerFactory</a>]]></type></param>) : <![CDATA[Void]]></right></fullMethod>
<description>
<text><![CDATA[Sets the factory used to obtain loggers that have not been set manually before.]]></text>
</description>
<fields>
<field><title><![CDATA[Parameters]]></title>
<param><name><![CDATA[defaultLoggerFactory]]></name><description><![CDATA[the factory to use as default]]></description></param>
</field>
</fields>
</method>
<method>
<title><private><![CDATA[updateChildren]]></private></title><private><![CDATA[private]]></private><fullMethod><left><![CDATA[function <b>updateChildren</b> (

]]></left><right><param><name><![CDATA[c]]></name>:<type><![CDATA[Array]]></type></param>,
<param><name><![CDATA[l]]></name>:<type><![CDATA[<a href="org_as2lib_env_log_ConfigurableHierarchicalLogger.html">ConfigurableHierarchicalLogger</a>]]></type></param>) : <![CDATA[Void]]></right></fullMethod>
<description>
<text><![CDATA[Updates the affected children of the node.]]></text>
</description>
<fields>
<field><title><![CDATA[Parameters]]></title>
<param><name><![CDATA[c]]></name><description><![CDATA[the children to update]]></description></param>
<param><name><![CDATA[l]]></name><description><![CDATA[the logger that now replaces the node]]></description></param>
</field>
</fields>
</method>
<method>
<title><private><![CDATA[updateParents]]></private></title><private><![CDATA[private]]></private><fullMethod><left><![CDATA[function <b>updateParents</b> (
]]></left><right><param><name><![CDATA[l]]></name>:<type><![CDATA[<a href="org_as2lib_env_log_ConfigurableHierarchicalLogger.html">ConfigurableHierarchicalLogger</a>]]></type></param>) : <![CDATA[Void]]></right></fullMethod>
<description>
<text><![CDATA[Updates the affected parents.]]></text>
</description>
<fields>
<field><title><![CDATA[Parameters]]></title>
<param><name><![CDATA[l]]></name><description><![CDATA[the newly added logger]]></description></param>
</field>
</fields>
</method>
</methodSection>
</methodSections>
<footer><copyright><![CDATA[2005 as2lib]]></copyright>
<date><![CDATA[Tuesday, 31 May 2005, 20:28:00]]>
</date><showTOC>show TOC</showTOC><hideTOC>hide TOC</hideTOC><showPrivate>show private members</showPrivate><hidePrivate>hide private members</hidePrivate>
</footer>
</document>