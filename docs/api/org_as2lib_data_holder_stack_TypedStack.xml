<?xml version="1.0" encoding="utf-8"?>
<document>
<cssFile><![CDATA[css/VisDoc.css]]></cssFile>
<title><![CDATA[TypedStack]]></title>
<classDocScript />
<classData>
<inheritsFrom>
<title><![CDATA[Inherits from]]></title><item><link><name><![CDATA[BasicClass]]></name><uri><![CDATA[org_as2lib_core_BasicClass]]></uri></link></item>
</inheritsFrom>
<conformsTo>
<title><![CDATA[Implements]]></title><item><link><name><![CDATA[Stack]]></name><uri><![CDATA[org_as2lib_data_holder_Stack]]></uri></link></item>
</conformsTo>
<classDetails>
<item><title><![CDATA[Author]]></title><value><![CDATA[Simon Wacker]]></value></item>
<item><title><![CDATA[Classpath]]></title><value><![CDATA[org.as2lib.data.holder.stack.TypedStack]]></value></item>
<item><title><![CDATA[File last modified]]></title><value><![CDATA[Friday, 13 May 2005, 09:47:30]]></value></item>
</classDetails>
<classDescription><summary><![CDATA[<code>TypedStack</code> is a wrapper for <a href="org_as2lib_data_holder_Stack.html">org.as2lib.data.holder.Stack</a> instances that ensures that
 only values of a specific type can be added to the wrapped stack.]]></summary><restOfDescription><![CDATA[<p>This class simply delegates all method invocations to the wrapped stack. If
 the specific method is responsible for adding values it first checks if the values
 to add are of the expected type. If they are the method invocation is forwarded,
 otherwise an <a href="org_as2lib_env_except_IllegalArgumentException.html">org.as2lib.env.except.IllegalArgumentException</a> is thrown.]]></restOfDescription>
</classDescription>
</classData>
<pageSummary>
<methodList>
<title><![CDATA[Summary]]></title>
<methodSummaryPart>
<title><![CDATA[Constructor]]></title>
<item><![CDATA[TypedStack]]></item>
</methodSummaryPart>
<private>
<methodSummaryPart>
<title><![CDATA[Instance properties]]></title>
<item><private><![CDATA[stack]]></private></item>
<item><private><![CDATA[type]]></private></item>
</methodSummaryPart>
</private>
<methodSummaryPart>
<title><![CDATA[Instance methods]]></title>
<item><![CDATA[getType]]></item>
<item><![CDATA[push]]></item>
<item><![CDATA[pop]]></item>
<item><![CDATA[peek]]></item>
<item><![CDATA[iterator]]></item>
<item><![CDATA[isEmpty]]></item>
<item><![CDATA[size]]></item>
<item><![CDATA[toArray]]></item>
<item><![CDATA[toString]]></item>
<item><private><![CDATA[validate]]></private></item>
<inheritedMethods>
<fromClass><title><text><![CDATA[Instance methods inherited from]]></text><link><name><![CDATA[BasicClass]]></name><uri><![CDATA[org_as2lib_core_BasicClass]]></uri></link></title><item><link><name>toString</name><uri>org_as2lib_core_BasicClass</uri><method>toString</method></link></item></fromClass>
</inheritedMethods>
</methodSummaryPart>
</methodList>
</pageSummary>
<methodSections>
<methodSection>
<title><![CDATA[Constructor]]></title>
<method>
<title><![CDATA[TypedStack]]></title><fullMethod><left><![CDATA[function <b>TypedStack</b> (

]]></left><right><param><name><![CDATA[type]]></name>:<type><![CDATA[Function]]></type></param>,
<param><name><![CDATA[stack]]></name>:<type><![CDATA[<a href="org_as2lib_data_holder_Stack.html">Stack</a>]]></type></param>)</right></fullMethod>
<description>
<text><![CDATA[Constructs a new <code>TypedStack</code> instance.<p>If the passed-in stack does already contain values, these values do not get
 type-checked.]]></text>
</description>
<fields>
<field><title><![CDATA[Parameters]]></title>
<param><name><![CDATA[type ]]></name><description><![CDATA[the type of values the stack can have]]></description></param>
<param><name><![CDATA[stack]]></name><description><![CDATA[the stack to type-check]]></description></param>
</field>
<field><title><![CDATA[Throws]]></title><description><![CDATA[<a href="org_as2lib_env_except_IllegalArgumentException.html">IllegalArgumentException</a> if the passed-in <code>type</code> is <code>null</code>
 or <code>undefined</code><br /><a href="org_as2lib_env_except_IllegalArgumentException.html">IllegalArgumentException</a> if <code>stack</code> is <code>null</code> or
 <code>undefined</code>]]></description></field>
</fields>
</method>
</methodSection>
<private>
<methodSection>
<title><![CDATA[Instance properties]]></title>
<method>
<title><private><![CDATA[stack]]></private></title><private><![CDATA[private]]></private><fullMethod><left><![CDATA[<b>stack</b>:<a href="org_as2lib_data_holder_Stack.html">Stack</a>
]]></left><right></right></fullMethod>
<description>
<text><![CDATA[The wrapped Stack.]]></text>
</description>
</method>
<method>
<title><private><![CDATA[type]]></private></title><private><![CDATA[private]]></private><fullMethod><left><![CDATA[<b>type</b>:Function
]]></left><right></right></fullMethod>
<description>
<text><![CDATA[The type of the values that are allowed.]]></text>
</description>
</method>
</methodSection>
</private>
<methodSection>
<title><![CDATA[Instance methods]]></title>
<method>
<title><![CDATA[getType]]></title><fullMethod><left><![CDATA[function <b>getType</b> (
]]></left><right><param><name><![CDATA[Void]]></name></param>) : <![CDATA[Function]]></right></fullMethod>
<description>
<text><![CDATA[Returns the type that all values in the wrapped stack have.<p>This is the type passed-in on construction.]]></text>
</description>
<fields>
<field><title><![CDATA[Returns]]></title><description><![CDATA[the type that all values of the wrapped stack have]]></description></field>
</fields>
</method>
<method>
<title><![CDATA[isEmpty]]></title><fullMethod><left><![CDATA[function <b>isEmpty</b> (
]]></left><right><param><name><![CDATA[Void]]></name></param>) : <![CDATA[Boolean]]></right></fullMethod>
<description>
<text><![CDATA[Returns whether this stack is empty.]]></text>
</description>
<fields>
<field><title><![CDATA[Returns]]></title><description><![CDATA[<code>true</code> if this stack is empty else <code>false</code>]]></description></field>
<field><title><![CDATA[Specified by]]></title><description><![CDATA[<a href="org_as2lib_data_holder_Stack.html#isEmpty">org.as2lib.data.holder.Stack.isEmpty</a>]]></description></field>
</fields>
</method>
<method>
<title><![CDATA[iterator]]></title><fullMethod><left><![CDATA[function <b>iterator</b> (
]]></left><right><param><name><![CDATA[Void]]></name></param>) : <![CDATA[<a href="org_as2lib_data_holder_Iterator.html">Iterator</a>]]></right></fullMethod>
<description>
<text><![CDATA[Returns an iterator to iterate over the values of this stack.]]></text>
</description>
<fields>
<field><title><![CDATA[Returns]]></title><description><![CDATA[an iterator to iterate over this stack's values]]></description></field>
<field><title><![CDATA[See also]]></title><description><![CDATA[<a href="org_as2lib_data_holder_stack_TypedStack.html#toArray">toArray</a>]]></description></field>
<field><title><![CDATA[Specified by]]></title><description><![CDATA[<a href="org_as2lib_data_holder_Stack.html#iterator">org.as2lib.data.holder.Stack.iterator</a>]]></description></field>
</fields>
</method>
<method>
<title><![CDATA[peek]]></title><fullMethod><left><![CDATA[function <b>peek</b> (
]]></left><right><param><name><![CDATA[Void]]></name></param>)</right></fullMethod>
<description>
<text><![CDATA[Returns the lastly pushed value without removing it.]]></text>
</description>
<fields>
<field><title><![CDATA[Returns]]></title><description><![CDATA[the lastly pushed value]]></description></field>
<field><title><![CDATA[Throws]]></title><description><![CDATA[<a href="org_as2lib_data_holder_EmptyDataHolderException.html">EmptyDataHolderException</a> if this stack is empty]]></description></field>
<field><title><![CDATA[Specified by]]></title><description><![CDATA[<a href="org_as2lib_data_holder_Stack.html#peek">org.as2lib.data.holder.Stack.peek</a>]]></description></field>
</fields>
</method>
<method>
<title><![CDATA[pop]]></title><fullMethod><left><![CDATA[function <b>pop</b> (
]]></left><right><param><name><![CDATA[Void]]></name></param>)</right></fullMethod>
<description>
<text><![CDATA[Removes and returns the lastly pushed value.]]></text>
</description>
<fields>
<field><title><![CDATA[Returns]]></title><description><![CDATA[the lastly pushed value]]></description></field>
<field><title><![CDATA[Throws]]></title><description><![CDATA[<a href="org_as2lib_data_holder_EmptyDataHolderException.html">EmptyDataHolderException</a> if this stack is empty]]></description></field>
<field><title><![CDATA[Specified by]]></title><description><![CDATA[<a href="org_as2lib_data_holder_Stack.html#pop">org.as2lib.data.holder.Stack.pop</a>]]></description></field>
</fields>
</method>
<method>
<title><![CDATA[push]]></title><fullMethod><left><![CDATA[function <b>push</b> (
]]></left><right><param><name><![CDATA[value]]></name></param>) : <![CDATA[Void]]></right></fullMethod>
<description>
<text><![CDATA[Pushes the passed-in value to this stack.<p>The value is only pushed if it is of the expected type.]]></text>
</description>
<fields>
<field><title><![CDATA[Parameters]]></title>
<param><name><![CDATA[value]]></name><description><![CDATA[the value to push to this stack]]></description></param>
</field>
<field><title><![CDATA[Throws]]></title><description><![CDATA[<a href="org_as2lib_env_except_IllegalArgumentException.html">IllegalArgumentException</a> if the type of the passed-in <code>value</code> is
 invalid]]></description></field>
<field><title><![CDATA[Specified by]]></title><description><![CDATA[<a href="org_as2lib_data_holder_Stack.html#push">org.as2lib.data.holder.Stack.push</a>]]></description></field>
</fields>
</method>
<method>
<title><![CDATA[size]]></title><fullMethod><left><![CDATA[function <b>size</b> (
]]></left><right><param><name><![CDATA[Void]]></name></param>) : <![CDATA[Number]]></right></fullMethod>
<description>
<text><![CDATA[Returns the number of pushed values.]]></text>
</description>
<fields>
<field><title><![CDATA[Returns]]></title><description><![CDATA[the number of pushed values]]></description></field>
<field><title><![CDATA[See also]]></title><description><![CDATA[<a href="org_as2lib_data_holder_stack_TypedStack.html#push">push</a>]]></description></field>
<field><title><![CDATA[Specified by]]></title><description><![CDATA[<a href="org_as2lib_data_holder_Stack.html#size">org.as2lib.data.holder.Stack.size</a>]]></description></field>
</fields>
</method>
<method>
<title><![CDATA[toArray]]></title><fullMethod><left><![CDATA[function <b>toArray</b> (
]]></left><right><param><name><![CDATA[Void]]></name></param>) : <![CDATA[Array]]></right></fullMethod>
<description>
<text><![CDATA[Returns an array representation of this stack.<p>The elements are copied onto the array in a 'last-in, first-out' order, similar
 to the order of the elements returned by a succession of calls to the <a href="org_as2lib_data_holder_stack_TypedStack.html#pop">pop</a>
 method.]]></text>
</description>
<fields>
<field><title><![CDATA[Returns]]></title><description><![CDATA[the array representation of this stack]]></description></field>
<field><title><![CDATA[Specified by]]></title><description><![CDATA[<a href="org_as2lib_data_holder_Stack.html#toArray">org.as2lib.data.holder.Stack.toArray</a>]]></description></field>
</fields>
</method>
<method>
<title><![CDATA[toString]]></title><fullMethod><left><![CDATA[function <b>toString</b> (
]]></left><right>) : <![CDATA[String]]></right></fullMethod>
<description>
<text><![CDATA[Returns the string representation of the wrapped stack.]]></text>
</description>
<fields>
<field><title><![CDATA[Returns]]></title><description><![CDATA[the string representation of the wrapped stack]]></description></field>
<field><title><![CDATA[Overrides]]></title><description><![CDATA[<a href="org_as2lib_core_BasicClass.html#toString">org.as2lib.core.BasicClass.toString</a>]]></description></field>
<field><title><![CDATA[Specified by]]></title><description><![CDATA[<a href="org_as2lib_core_BasicInterface.html#toString">org.as2lib.core.BasicInterface.toString</a>]]></description></field>
</fields>
</method>
<method>
<title><private><![CDATA[validate]]></private></title><private><![CDATA[private]]></private><fullMethod><left><![CDATA[function <b>validate</b> (
]]></left><right><param><name><![CDATA[value]]></name></param>) : <![CDATA[Void]]></right></fullMethod>
<description>
<text><![CDATA[Validates the passed-in <code>value</code> based on its type.]]></text>
</description>
<fields>
<field><title><![CDATA[Parameters]]></title>
<param><name><![CDATA[value]]></name><description><![CDATA[the value whose type to validate]]></description></param>
</field>
<field><title><![CDATA[Throws]]></title><description><![CDATA[<a href="org_as2lib_env_except_IllegalArgumentException.html">IllegalArgumentException</a> if the type of the value is invalid]]></description></field>
</fields>
</method>
</methodSection>
</methodSections>
<footer><copyright><![CDATA[2005 as2lib]]></copyright>
<date><![CDATA[Tuesday, 31 May 2005, 20:26:39]]>
</date><showTOC>show TOC</showTOC><hideTOC>hide TOC</hideTOC><showPrivate>show private members</showPrivate><hidePrivate>hide private members</hidePrivate>
</footer>
</document>