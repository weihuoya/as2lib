<?xml version="1.0" encoding="utf-8"?>
<document>
<cssFile><![CDATA[css/VisDoc.css]]></cssFile>
<title><![CDATA[LoggerRepository]]></title>
<classDocScript />
<classData>
<kindOfClass>
<![CDATA[Interface]]>
</kindOfClass>
<inheritsFrom>
<title><![CDATA[Inherits from]]></title><item><link><name><![CDATA[BasicInterface]]></name><uri><![CDATA[org_as2lib_core_BasicInterface]]></uri></link></item>
</inheritsFrom>
<classDetails>
<item><title><![CDATA[Author]]></title><value><![CDATA[Simon Wacker]]></value></item>
<item><title><![CDATA[Classpath]]></title><value><![CDATA[org.as2lib.env.log.LoggerRepository]]></value></item>
<item><title><![CDATA[File last modified]]></title><value><![CDATA[Sunday, 10 April 2005, 10:33:34]]></value></item>
</classDetails>
<classDescription><summary><![CDATA[<code>LoggerRepository</code> is used to obtain <code>Logger</code> instances.]]></summary><restOfDescription><![CDATA[<p>What logger instances are returned and how they are organized depends on the
 specific implementation.<p>There are simple implementations that just always returns instances of the
 same class that are configured with the passed-in name.<p>Other implementations organize the loggers in a more complex way like in a
 hierarchy.<p>All implementations have their strengths and weaknesses. In most cases you
 have to decide between performance and functionality, like ease of configuration.
 Take a look at the <code>org.as2lib.env.log.repository</code> package on what logger
 repositories are supported.<p>When working with logger repositories you normally store them in the log
 manager using the static <a href="org_as2lib_env_log_LogManager.html#setLoggerRepository">LogManager.setLoggerRepository</a> method. You can
 then use the static <a href="org_as2lib_env_log_LogManager.html#getLogger">LogManager.getLogger</a> method to obtain loggers from
 the set repository.]]></restOfDescription>
</classDescription>
</classData>
<pageSummary>
<methodList>
<title><![CDATA[Summary]]></title>
<methodSummaryPart>
<title><![CDATA[Instance methods]]></title>
<item><![CDATA[getLogger]]></item>
<inheritedMethods>
<fromClass><title><text><![CDATA[Instance methods inherited from]]></text><link><name><![CDATA[BasicInterface]]></name><uri><![CDATA[org_as2lib_core_BasicInterface]]></uri></link></title><item><link><name>toString</name><uri>org_as2lib_core_BasicInterface</uri><method>toString</method></link></item></fromClass>
</inheritedMethods>
</methodSummaryPart>
</methodList>
</pageSummary>
<methodSections>
<methodSection>
<title><![CDATA[Instance methods]]></title>
<method>
<title><![CDATA[getLogger]]></title><fullMethod><left><![CDATA[function <b>getLogger</b> (
]]></left><right><param><name><![CDATA[name]]></name>:<type><![CDATA[String]]></type></param>) : <![CDATA[<a href="org_as2lib_env_log_Logger.html">Logger</a>]]></right></fullMethod>
<description>
<text><![CDATA[Returns a pre-configured logger for the passed-in <code>name</code>.<p>The implementation of this method can be simple and only return new logger
 instances or complex and structuring the loggers in a hierarchy. Thus invoking
 this method can be very fast or not that fast. So it is proposed to store the
 received logger by yourself.]]></text>
</description>
<fields>
<field><title><![CDATA[Parameters]]></title>
<param><name><![CDATA[name]]></name><description><![CDATA[the name of the logger to return]]></description></param>
</field>
<field><title><![CDATA[Returns]]></title><description><![CDATA[a specific logger depending on the passed-in <code>name</code>]]></description></field>
</fields>
</method>
</methodSection>
</methodSections>
<footer><copyright><![CDATA[2005 as2lib]]></copyright>
<date><![CDATA[Tuesday, 31 May 2005, 20:27:50]]>
</date><showTOC>show TOC</showTOC><hideTOC>hide TOC</hideTOC><showPrivate>show private members</showPrivate><hidePrivate>hide private members</hidePrivate>
</footer>
</document>