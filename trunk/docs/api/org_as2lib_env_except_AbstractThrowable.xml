<?xml version="1.0" encoding="utf-8"?>
<document>
<cssFile><![CDATA[css/VisDoc.css]]></cssFile>
<title><![CDATA[AbstractThrowable]]></title>
<classDocScript />
<classData>
<inheritsFrom>
<title><![CDATA[Inherits from]]></title><item><link><name><![CDATA[Error]]></name></link></item>
</inheritsFrom>
<classDetails>
<item><title><![CDATA[Author]]></title><value><![CDATA[Simon Wacker]]></value></item>
<item><title><![CDATA[Classpath]]></title><value><![CDATA[org.as2lib.env.except.AbstractThrowable]]></value></item>
<item><title><![CDATA[File last modified]]></title><value><![CDATA[Saturday, 09 April 2005, 17:33:24]]></value></item>
</classDetails>
<classDescription><summary><![CDATA[<code>AbstractThrowable</code> is an abstract class that contains sourced out
 functionalities used by the classes <a href="org_as2lib_env_except_Exception.html">Exception</a> and
 <a href="org_as2lib_env_except_FatalException.html">FatalException</a>.]]></summary><restOfDescription><![CDATA[<p>It is thought to be an abstract implementation of the <a href="org_as2lib_env_except_Throwable.html">Throwable</a>
 interface. Because of that sub-classes must implement the <code>Throwable</code>
 interface if they are themselves not abstract.<p>This class extends the <code>Error</code> class. Thus you can use sub-classes of
 it as throwable type in catch-blocks in Flex.]]></restOfDescription>
</classDescription>
<fields>
<field><title><![CDATA[See also]]></title><description><![CDATA[<a href="org_as2lib_env_except_Throwable.html">Throwable</a>]]></description></field>
</fields>
</classData>
<pageSummary>
<methodList>
<title><![CDATA[Summary]]></title>
<private>
<methodSummaryPart>
<title><![CDATA[Constructor]]></title>
<item><private><![CDATA[AbstractThrowable]]></private></item>
</methodSummaryPart>
</private>
<private>
<methodSummaryPart>
<title><![CDATA[Class properties]]></title>
<item><private><![CDATA[stringifier]]></private></item>
<item><private><![CDATA[logger]]></private></item>
</methodSummaryPart>
</private>
<private>
<methodSummaryPart>
<title><![CDATA[Instance properties]]></title>
<item><private><![CDATA[stackTrace]]></private></item>
<item><private><![CDATA[cause]]></private></item>
<item><private><![CDATA[message]]></private></item>
</methodSummaryPart>
</private>
<methodSummaryPart>
<title><![CDATA[Class methods]]></title>
<item><![CDATA[getStringifier]]></item>
<item><![CDATA[setStringifier]]></item>
<item><private><![CDATA[getLogger]]></private></item>
</methodSummaryPart>
<methodSummaryPart>
<title><![CDATA[Instance methods]]></title>
<item><![CDATA[addStackTraceElement]]></item>
<item><![CDATA[getStackTrace]]></item>
<item><![CDATA[getCause]]></item>
<item><![CDATA[initCause]]></item>
<item><![CDATA[getMessage]]></item>
<item><private><![CDATA[doToString]]></private></item>
</methodSummaryPart>
</methodList>
</pageSummary>
<methodSections>
<private>
<methodSection>
<title><![CDATA[Constructor]]></title>
<method>
<title><private><![CDATA[AbstractThrowable]]></private></title><private><![CDATA[private]]></private><fullMethod><left><![CDATA[function <b>AbstractThrowable</b> (


]]></left><right><param><name><![CDATA[message]]></name>:<type><![CDATA[String]]></type></param>,
<param><name><![CDATA[thrower]]></name></param>,
<param><name><![CDATA[args]]></name>:<type><![CDATA[Array]]></type></param>)</right></fullMethod>
<description>
<text><![CDATA[Constructs a new <code>AbstractThrowable</code> instance.<p>All arguments are allowed to be <code>null</code> or <code>undefined</code>. But
 if one is, the string representation returned by the <code>toString</code>
 method will not be complete.<p>The <code>args</code> array should be the internal arguments array of the
 method that throws the throwable. The internal arguments array exists in
 every method and contains its parameters, the callee method and the caller
 method. You can refernce it in every method using the name
 <code>"arguments"</code>.]]></text>
</description>
<fields>
<field><title><![CDATA[Parameters]]></title>
<param><name><![CDATA[message]]></name><description><![CDATA[the message that describes the problem in detail]]></description></param>
<param><name><![CDATA[thrower]]></name><description><![CDATA[the object that declares the method that throws this
 throwable]]></description></param>
<param><name><![CDATA[args   ]]></name><description><![CDATA[the arguments of the throwing method]]></description></param>
</field>
</fields>
</method>
</methodSection>
</private>
<private>
<methodSection>
<title><![CDATA[Class properties]]></title>
<method>
<title><private><![CDATA[logger]]></private></title><private><![CDATA[private]]></private><fullMethod><left><![CDATA[static <b>logger</b>:<a href="org_as2lib_env_log_Logger.html">Logger</a>
]]></left><right></right></fullMethod>
<description>
<text><![CDATA[Logger used to output this throwable.]]></text>
</description>
</method>
<method>
<title><private><![CDATA[stringifier]]></private></title><private><![CDATA[private]]></private><fullMethod><left><![CDATA[static <b>stringifier</b>:<a href="org_as2lib_util_Stringifier.html">Stringifier</a>
]]></left><right></right></fullMethod>
<description>
<text><![CDATA[Stringifier used to stringify throwables.]]></text>
</description>
</method>
</methodSection>
</private>
<private>
<methodSection>
<title><![CDATA[Instance properties]]></title>
<method>
<title><private><![CDATA[cause]]></private></title><private><![CDATA[private]]></private><fullMethod><left><![CDATA[<b>cause</b>
]]></left><right></right></fullMethod>
<description>
<text><![CDATA[The throwable that caused this throwable to be thrown.]]></text>
</description>
</method>
<method>
<title><private><![CDATA[message]]></private></title><private><![CDATA[private]]></private><fullMethod><left><![CDATA[<b>message</b>:String
]]></left><right></right></fullMethod>
<description>
<text><![CDATA[The message describing what went wrong.]]></text>
</description>
</method>
<method>
<title><private><![CDATA[stackTrace]]></private></title><private><![CDATA[private]]></private><fullMethod><left><![CDATA[<b>stackTrace</b>:Array
]]></left><right></right></fullMethod>
<description>
<text><![CDATA[The saved stack of method calls.]]></text>
</description>
</method>
</methodSection>
</private>
<methodSection>
<title><![CDATA[Class methods]]></title>
<method>
<title><private><![CDATA[getLogger]]></private></title><private><![CDATA[private]]></private><fullMethod><left><![CDATA[static function <b>getLogger</b> (
]]></left><right><param><name><![CDATA[Void]]></name></param>) : <![CDATA[<a href="org_as2lib_env_log_Logger.html">Logger</a>]]></right></fullMethod>
<description>
<text><![CDATA[Returns the logger used to log this throwable.<p><code>null</code> will be returned if the <a href="org_as2lib_env_log_LogManager.html#getLogger">org.as2lib.env.log.LogManager.getLogger</a>
 method returns <code>null</code> or <code>undefined</code>.]]></text>
</description>
<fields>
<field><title><![CDATA[Returns]]></title><description><![CDATA[the logger used to output this throwable]]></description></field>
</fields>
</method>
<method>
<title><![CDATA[getStringifier]]></title><fullMethod><left><![CDATA[static function <b>getStringifier</b> (
]]></left><right><param><name><![CDATA[Void]]></name></param>) : <![CDATA[<a href="org_as2lib_util_Stringifier.html">Stringifier</a>]]></right></fullMethod>
<description>
<text><![CDATA[Returns the stringifier to stringify throwables.<p>The returned stringifier is either the default
 <a href="org_as2lib_env_except_ThrowableStringifier.html">ThrowableStringifier</a> if no custom stringifier was set or if the
 stringifier was set to <code>null</code>.]]></text>
</description>
<fields>
<field><title><![CDATA[Returns]]></title><description><![CDATA[the current stringifier]]></description></field>
</fields>
</method>
<method>
<title><![CDATA[setStringifier]]></title><fullMethod><left><![CDATA[static function <b>setStringifier</b> (
]]></left><right><param><name><![CDATA[throwableStringifier]]></name>:<type><![CDATA[<a href="org_as2lib_util_Stringifier.html">Stringifier</a>]]></type></param>) : <![CDATA[Void]]></right></fullMethod>
<description>
<text><![CDATA[Sets the stringifier to stringify throwables.<p>If <code>throwableStringifier</code> is <code>null</code> the static
 <a href="org_as2lib_env_except_AbstractThrowable.html#getStringifier">getStringifier</a> method will return the default stringifier.]]></text>
</description>
<fields>
<field><title><![CDATA[Parameters]]></title>
<param><name><![CDATA[throwableStringifier]]></name><description><![CDATA[the stringifier to stringify throwables]]></description></param>
</field>
</fields>
</method>
</methodSection>
<methodSection>
<title><![CDATA[Instance methods]]></title>
<method>
<title><![CDATA[addStackTraceElement]]></title><fullMethod><left><![CDATA[function <b>addStackTraceElement</b> (


]]></left><right><param><name><![CDATA[thrower]]></name></param>,
<param><name><![CDATA[method]]></name>:<type><![CDATA[Function]]></type></param>,
<param><name><![CDATA[args]]></name>:<type><![CDATA[Array]]></type></param>) : <![CDATA[Void]]></right></fullMethod>
<description>
<text><![CDATA[Adds a stack trace element to the stack trace.<p>The new stack trace element is added to the end of the stack trace.<p>At some parts in your application you may want to add stack trace elements
 manually. This can help you to get a clearer image of what went where wrong and
 why. You can use this method to do so.]]></text>
</description>
<fields>
<field><title><![CDATA[Parameters]]></title>
<param><name><![CDATA[thrower]]></name><description><![CDATA[the object that threw, rethrew or forwarded (let pass) the
 throwable]]></description></param>
<param><name><![CDATA[method ]]></name><description><![CDATA[the method that threw, rethrew or forwarded (let pass) the
 throwable]]></description></param>
<param><name><![CDATA[args   ]]></name><description><![CDATA[the arguments the method was invoked with when throwing, rethrowing
 or forwarding (leting pass) the throwable]]></description></param>
</field>
</fields>
</method>
<method>
<title><private><![CDATA[doToString]]></private></title><private><![CDATA[private]]></private><fullMethod><left><![CDATA[function <b>doToString</b> (
]]></left><right><param><name><![CDATA[Void]]></name></param>) : <![CDATA[String]]></right></fullMethod>
<description>
<text><![CDATA[Returns the string representation of this throwable.<p>The string representation is obtained via the stringifier returned by
 the static <a href="org_as2lib_env_except_AbstractThrowable.html#getStringifier">getStringifier</a> method.<p>If you want to change the string representation either set a new
 stringifier via the static <a href="org_as2lib_env_except_AbstractThrowable.html#setStringifier">setStringifier</a> method or if you want
 the string representation only change for one throwable and its
 sub-classes overwrite this method.]]></text>
</description>
<fields>
<field><title><![CDATA[Returns]]></title><description><![CDATA[the string representation of this throwable]]></description></field>
</fields>
</method>
<method>
<title><![CDATA[getCause]]></title><fullMethod><left><![CDATA[function <b>getCause</b> (
]]></left><right><param><name><![CDATA[Void]]></name></param>)</right></fullMethod>
<description>
<text><![CDATA[Returns the initialized cause.<p>The cause is the throwable that caused this throwable to be thrown.]]></text>
</description>
<fields>
<field><title><![CDATA[Returns]]></title><description><![CDATA[the initialized cause]]></description></field>
<field><title><![CDATA[See also]]></title><description><![CDATA[<a href="org_as2lib_env_except_AbstractThrowable.html#initCause">initCause</a>]]></description></field>
</fields>
</method>
<method>
<title><![CDATA[getMessage]]></title><fullMethod><left><![CDATA[function <b>getMessage</b> (
]]></left><right><param><name><![CDATA[Void]]></name></param>) : <![CDATA[String]]></right></fullMethod>
<description>
<text><![CDATA[Returns the message that describes in detail what went wrong.<p>The message should be understandable, even for non-programmers. It should
 contain detailed information about what went wrong. And maybe also how the user
 that sees this message can solve the problem.<p>If the throwable was thrown for example because of a wrong collaborator or
 an illegal string or something similar, provide the string representation of it
 in the error message. It is recommended to put these between []-characters.]]></text>
</description>
<fields>
<field><title><![CDATA[Returns]]></title><description><![CDATA[the message that describes the problem in detail]]></description></field>
</fields>
</method>
<method>
<title><![CDATA[getStackTrace]]></title><fullMethod><left><![CDATA[function <b>getStackTrace</b> (
]]></left><right><param><name><![CDATA[Void]]></name></param>) : <![CDATA[Array]]></right></fullMethod>
<description>
<text><![CDATA[Returns an array that contains <a href="org_as2lib_env_except_StackTraceElement.html">StackTraceElement</a> instances of the
 methods invoked before this throwable was thrown.<p>The last element is always the one that contains the actual method that
 threw the throwable.<p>The stack trace helps you a lot because it says you where the throwing of
 the throwable took place and also what arguments caused the throwing.<p>The returned stack trace is never <code>null</code> or <code>undefined</code>. If
 no stack trace element has been set an empty array is returned.]]></text>
</description>
<fields>
<field><title><![CDATA[Returns]]></title><description><![CDATA[a stack containing the invoked methods until the throwable was thrown]]></description></field>
</fields>
</method>
<method>
<title><![CDATA[initCause]]></title><fullMethod><left><![CDATA[function <b>initCause</b> (
]]></left><right><param><name><![CDATA[newCause]]></name></param>) : <![CDATA[<a href="org_as2lib_env_except_Throwable.html">Throwable</a>]]></right></fullMethod>
<description>
<text><![CDATA[Initializes the cause of this throwable.<p>The cause can only be initialized once. You normally initialize a cause
 if you throw a throwable due to the throwing of another throwable. Thereby
 you do not lose the information the cause offers.<p>This method returns this throwable to have an easy way to initialize the
 cause. Following is how you could use the cause mechanism.<pre><span class="codeKeyword">try</span> {
    myInstance.invokeMethodThatThrowsAThrowable();
} <span class="codeKeyword">catch</span> (e:org.as2lib.env.except.Throwable) {
    <span class="codeKeyword">throw</span> <span class="codeKeyword">new</span> MyThrowable(<span class="codeString">"myMessage"</span>, <span class="codeIdentifier">this</span>, arguments).initCause(e);
}</pre>]]></text>
</description>
<fields>
<field><title><![CDATA[Parameters]]></title>
<param><name><![CDATA[cause]]></name><description><![CDATA[the throwable that caused the throwing of this throwable]]></description></param>
</field>
<field><title><![CDATA[Returns]]></title><description><![CDATA[this throwable itself]]></description></field>
<field><title><![CDATA[Throws]]></title><description><![CDATA[<a href="org_as2lib_env_except_IllegalArgumentException.html">IllegalArgumentException</a> if the passed-in
 <code>newCause</code> is <code>null</code> or <code>undefined</code><br /><a href="org_as2lib_env_except_IllegalStateException.html">IllegalStateException</a> if the cause has
 already been initialized]]></description></field>
<field><title><![CDATA[See also]]></title><description><![CDATA[<a href="org_as2lib_env_except_AbstractThrowable.html#getCause">getCause</a>]]></description></field>
</fields>
</method>
</methodSection>
</methodSections>
<footer><copyright><![CDATA[2005 as2lib]]></copyright>
<date><![CDATA[Tuesday, 31 May 2005, 20:27:01]]>
</date><showTOC>show TOC</showTOC><hideTOC>hide TOC</hideTOC><showPrivate>show private members</showPrivate><hidePrivate>hide private members</hidePrivate>
</footer>
</document>