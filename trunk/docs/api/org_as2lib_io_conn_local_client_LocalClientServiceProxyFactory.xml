<?xml version="1.0" encoding="utf-8"?>
<document>
<cssFile><![CDATA[css/VisDoc.css]]></cssFile>
<title><![CDATA[LocalClientServiceProxyFactory]]></title>
<classDocScript />
<classData>
<inheritsFrom>
<title><![CDATA[Inherits from]]></title><item><link><name><![CDATA[AbstractClientServiceProxyFactory]]></name><uri><![CDATA[org_as2lib_io_conn_core_client_AbstractClientServiceProxyFactory]]></uri></link></item><item><link><name><![CDATA[BasicClass]]></name><uri><![CDATA[org_as2lib_core_BasicClass]]></uri></link></item>
</inheritsFrom>
<conformsTo>
<title><![CDATA[Implements]]></title><item><link><name><![CDATA[ClientServiceProxyFactory]]></name><uri><![CDATA[org_as2lib_io_conn_core_client_ClientServiceProxyFactory]]></uri></link></item>
</conformsTo>
<classDetails>
<item><title><![CDATA[Author]]></title><value><![CDATA[Simon Wacker, Christoph Atteneder]]></value></item>
<item><title><![CDATA[Classpath]]></title><value><![CDATA[org.as2lib.io.conn.local.client.LocalClientServiceProxyFactory]]></value></item>
<item><title><![CDATA[File last modified]]></title><value><![CDATA[Saturday, 28 May 2005, 12:19:12]]></value></item>
</classDetails>
<classDescription><summary><![CDATA[<code>LocalClientServiceProxyFactory</code> acts as central provider of client service
 proxies.]]></summary><restOfDescription><![CDATA[<p>This provision is in the simplest case just the returning of a new client 
 service proxy.<pre><span class="codeKeyword">var</span> clientFactory:LocalClientServiceProxyFactory = <span class="codeKeyword">new</span> LocalClientServiceProxyFactory();
<span class="codeKeyword">var</span> client:ClientServiceProxy = clientFactory.getClientServiceProxy(<span class="codeString">"local.as2lib.org/myService"</span>);</pre><p>In a more complex case this means creating a client service proxy for a specific
 type, mostly an interface, that is the same type of the 'remote' service.<pre><span class="codeKeyword">var</span> clientFactory:LocalClientServiceProxyFactory = <span class="codeKeyword">new</span> LocalClientServiceProxyFactory();
<span class="codeKeyword">var</span> client:MyType = clientFactory.getClientServiceProxy(<span class="codeString">"local.as2lib.org/myService"</span>, MyType);
client.myMethod(<span class="codeString">"myArg1"</span>, <span class="codeString">"myArg2"</span>);</pre><p>There is sadly one flaw with the last type of usage. That is that the method
 cannot response directly due to the asynchronity of the call. To get a response
 you therefore have to pass a third argument of type <code>MethodInvocationCallback</code>.<pre><span class="codeKeyword">var</span> clientFactory:LocalClientServiceProxyFactory = <span class="codeKeyword">new</span> LocalClientServiceProxyFactory();
<span class="codeKeyword">var</span> client:MyType = clientFactory.getClientServiceProxy(<span class="codeString">"local.as2lib.org/myService"</span>, MyType);
<span class="codeKeyword">var</span> callback:MethodInvocationCallback = <span class="codeKeyword">new</span> MethodInvocationCallback();
client.myMethod(<span class="codeString">"myArg1"</span>, <span class="codeString">"myArg2"</span>, callback);
callback.onReturn = <span class="codeKeyword">function</span>(returnInfo:MethodInvocationReturnInfo):<span class="codeIdentifier">Void</span> {
    <span class="codeIdentifier">trace</span>(<span class="codeString">"myMethod - return value: "</span> + returnInfo.getReturnValue());
}
callback.onError = <span class="codeKeyword">function</span>(errorInfo:MethodInvocationErrorInfo):<span class="codeIdentifier">Void</span> {
    <span class="codeIdentifier">trace</span>(<span class="codeString">"myMethod - error: "</span> + errorInfo.getException());
}</pre>]]></restOfDescription>
</classDescription>
<fields>
<field><title><![CDATA[See also]]></title><description><![CDATA[<a href="org_as2lib_io_conn_core_event_MethodInvocationCallback.html">org.as2lib.io.conn.core.event.MethodInvocationCallback</a>]]></description></field>
</fields>
</classData>
<pageSummary>
<methodList>
<title><![CDATA[Summary]]></title>
<methodSummaryPart>
<title><![CDATA[Constructor]]></title>
<item><![CDATA[LocalClientServiceProxyFactory]]></item>
</methodSummaryPart>
<private>
<methodSummaryPart>
<title><![CDATA[Instance properties]]></title>
<item><private><![CDATA[typeProxyFactory]]></private></item>
<item><private><![CDATA[clientServiceProxyFactory]]></private></item>
</methodSummaryPart>
</private>
<methodSummaryPart>
<title><![CDATA[Instance methods]]></title>
<item><![CDATA[getTypeProxyFactory]]></item>
<item><![CDATA[setTypeProxyFactory]]></item>
<item><![CDATA[getClientServiceProxyFactory]]></item>
<item><![CDATA[setClientServiceProxyFactory]]></item>
<item><![CDATA[getClientServiceProxyByUrl]]></item>
<item><![CDATA[getClientServiceProxyByUrlAndType]]></item>
<item><private><![CDATA[getBlankInvocationHandler]]></private></item>
<inheritedMethods>
<fromClass><title><text><![CDATA[Instance methods inherited from]]></text><link><name><![CDATA[AbstractClientServiceProxyFactory]]></name><uri><![CDATA[org_as2lib_io_conn_core_client_AbstractClientServiceProxyFactory]]></uri></link></title><item><link><name>getClientServiceProxy</name><uri>org_as2lib_io_conn_core_client_AbstractClientServiceProxyFactory</uri><method>getClientServiceProxy</method></link></item><item><link><name>getClientServiceProxyByUrlAndType</name><uri>org_as2lib_io_conn_core_client_AbstractClientServiceProxyFactory</uri><method>getClientServiceProxyByUrlAndType</method></link></item></fromClass>
<fromClass><title><text><![CDATA[Instance methods inherited from]]></text><link><name><![CDATA[BasicClass]]></name><uri><![CDATA[org_as2lib_core_BasicClass]]></uri></link></title><item><link><name>toString</name><uri>org_as2lib_core_BasicClass</uri><method>toString</method></link></item></fromClass>
</inheritedMethods>
</methodSummaryPart>
</methodList>
</pageSummary>
<methodSections>
<methodSection>
<title><![CDATA[Constructor]]></title>
<method>
<title><![CDATA[LocalClientServiceProxyFactory]]></title><fullMethod><left><![CDATA[function <b>LocalClientServiceProxyFactory</b> (
]]></left><right><param><name><![CDATA[Void]]></name></param>)</right></fullMethod>
<description>
<text><![CDATA[Constructs a new <code>LocalClientServiceProxyFactory</code> instance.]]></text>
</description>
<fields>
<field><title><![CDATA[Overrides]]></title><description><![CDATA[<a href="org_as2lib_io_conn_core_client_AbstractClientServiceProxyFactory.html#AbstractClientServiceProxyFactory">org.as2lib.io.conn.core.client.AbstractClientServiceProxyFactory.AbstractClientServiceProxyFactory</a>]]></description></field>
</fields>
</method>
</methodSection>
<private>
<methodSection>
<title><![CDATA[Instance properties]]></title>
<method>
<title><private><![CDATA[clientServiceProxyFactory]]></private></title><private><![CDATA[private]]></private><fullMethod><left><![CDATA[<b>clientServiceProxyFactory</b>:<a href="org_as2lib_io_conn_core_client_ClientServiceProxyFactory.html">ClientServiceProxyFactory</a>
]]></left><right></right></fullMethod>
<description>
<text><![CDATA[Stores the client service proxy factory used to get client service proxy instances.]]></text>
</description>
</method>
<method>
<title><private><![CDATA[typeProxyFactory]]></private></title><private><![CDATA[private]]></private><fullMethod><left><![CDATA[<b>typeProxyFactory</b>:<a href="org_as2lib_env_reflect_ProxyFactory.html">ProxyFactory</a>
]]></left><right></right></fullMethod>
<description>
<text><![CDATA[The currently used proxy factory to create proxies for a specific type.]]></text>
</description>
</method>
</methodSection>
</private>
<methodSection>
<title><![CDATA[Instance methods]]></title>
<method>
<title><private><![CDATA[getBlankInvocationHandler]]></private></title><private><![CDATA[private]]></private><fullMethod><left><![CDATA[function <b>getBlankInvocationHandler</b> (
]]></left><right><param><name><![CDATA[Void]]></name></param>) : <![CDATA[<a href="org_as2lib_env_reflect_InvocationHandler.html">InvocationHandler</a>]]></right></fullMethod>
<description>
<text><![CDATA[Returns a blank invocation handler. This is a handler with no methods implemented.]]></text>
</description>
<fields>
<field><title><![CDATA[Returns]]></title><description><![CDATA[a blank invocation handler]]></description></field>
</fields>
</method>
<method>
<title><![CDATA[getClientServiceProxyByUrl]]></title><fullMethod><left><![CDATA[function <b>getClientServiceProxyByUrl</b> (
]]></left><right><param><name><![CDATA[url]]></name>:<type><![CDATA[String]]></type></param>) : <![CDATA[<a href="org_as2lib_io_conn_core_client_ClientServiceProxy.html">ClientServiceProxy</a>]]></right></fullMethod>
<description>
<text><![CDATA[Returns a client service proxy for the service specified by the passed-in
 <code>url</code>.<p>You can use the returned proxy to invoke methods on the 'remote' service and
 to handle responses.]]></text>
</description>
<fields>
<field><title><![CDATA[Parameters]]></title>
<param><name><![CDATA[url]]></name><description><![CDATA[the url of the 'remote' service]]></description></param>
</field>
<field><title><![CDATA[Returns]]></title><description><![CDATA[a client service proxy to invoke methods on the 'remote' service]]></description></field>
<field><title><![CDATA[Specified by]]></title><description><![CDATA[<a href="org_as2lib_io_conn_core_client_ClientServiceProxyFactory.html#getClientServiceProxyByUrl">org.as2lib.io.conn.core.client.ClientServiceProxyFactory.getClientServiceProxyByUrl</a>]]></description></field>
</fields>
</method>
<method>
<title><![CDATA[getClientServiceProxyByUrlAndType]]></title><fullMethod><left><![CDATA[function <b>getClientServiceProxyByUrlAndType</b> (

]]></left><right><param><name><![CDATA[url]]></name>:<type><![CDATA[String]]></type></param>,
<param><name><![CDATA[type]]></name>:<type><![CDATA[Function]]></type></param>)</right></fullMethod>
<description>
<text><![CDATA[Returns a client service proxy that can be typed to the passed-in <code>type</code>
 (class or interface).<p>The type is therefore normally the type of the 'remote' service you wanna
 invoke methods on.<p>If <code>type</code> is <code>null</code>, an instance of type <a href="org_as2lib_io_conn_core_client_ClientServiceProxy.html">org.as2lib.io.conn.core.client.ClientServiceProxy</a>
 will be returned. That means this method will then do the same as the
 <a href="org_as2lib_io_conn_local_client_LocalClientServiceProxyFactory.html#getClientServiceProxyByUrl">getClientServiceProxyByUrl</a> method.<p>Note that with the default configuration only interfaces can be used as
 <code>type</code>. You can edit this behavior through the <a href="org_as2lib_io_conn_local_client_LocalClientServiceProxyFactory.html#setTypeProxyFactory">setTypeProxyFactory</a>.
 method.]]></text>
</description>
<fields>
<field><title><![CDATA[Parameters]]></title>
<param><name><![CDATA[url ]]></name><description><![CDATA[the url of the 'remote' service]]></description></param>
<param><name><![CDATA[type]]></name><description><![CDATA[the type of the 'remote' service]]></description></param>
</field>
<field><title><![CDATA[Returns]]></title><description><![CDATA[a client service proxy that can be casted to the passed-in <code>type</code>]]></description></field>
<field><title><![CDATA[Overrides]]></title><description><![CDATA[<a href="org_as2lib_io_conn_core_client_AbstractClientServiceProxyFactory.html#getClientServiceProxyByUrlAndType">org.as2lib.io.conn.core.client.AbstractClientServiceProxyFactory.getClientServiceProxyByUrlAndType</a>]]></description></field>
<field><title><![CDATA[Specified by]]></title><description><![CDATA[<a href="org_as2lib_io_conn_core_client_ClientServiceProxyFactory.html#getClientServiceProxyByUrlAndType">org.as2lib.io.conn.core.client.ClientServiceProxyFactory.getClientServiceProxyByUrlAndType</a>]]></description></field>
</fields>
</method>
<method>
<title><![CDATA[getClientServiceProxyFactory]]></title><fullMethod><left><![CDATA[function <b>getClientServiceProxyFactory</b> (
]]></left><right><param><name><![CDATA[Void]]></name></param>) : <![CDATA[<a href="org_as2lib_io_conn_core_client_ClientServiceProxyFactory.html">ClientServiceProxyFactory</a>]]></right></fullMethod>
<description>
<text><![CDATA[Returns the client service proxy factory used to create client service proxy
 instances.<p>The returned factory is either the one set via <a href="org_as2lib_io_conn_local_client_LocalClientServiceProxyFactory.html#setClientServiceProxyFactory">setClientServiceProxyFactory</a>
 or the default one which is an instance of <a href="org_as2lib_io_conn_local_client_SimpleClientServiceProxyFactory.html">SimpleClientServiceProxyFactory</a>.]]></text>
</description>
<fields>
<field><title><![CDATA[Returns]]></title><description><![CDATA[the currently used client service proxy factory]]></description></field>
</fields>
</method>
<method>
<title><![CDATA[getTypeProxyFactory]]></title><fullMethod><left><![CDATA[function <b>getTypeProxyFactory</b> (
]]></left><right><param><name><![CDATA[Void]]></name></param>) : <![CDATA[<a href="org_as2lib_env_reflect_ProxyFactory.html">ProxyFactory</a>]]></right></fullMethod>
<description>
<text><![CDATA[Returns the currently used type proxy factory that is used to create proxies for
 a specific type.<p>That is either the proxy factory set via <a href="org_as2lib_io_conn_local_client_LocalClientServiceProxyFactory.html#setTypeProxyFactory">setTypeProxyFactory</a>
 or the default one, which is an instance of type <a href="org_as2lib_env_reflect_InterfaceProxyFactory.html">org.as2lib.env.reflect.InterfaceProxyFactory</a>.<p>The default <a href="org_as2lib_env_reflect_InterfaceProxyFactory.html">org.as2lib.env.reflect.InterfaceProxyFactory</a> can only be used to create proxies
 of interfaces.]]></text>
</description>
<fields>
<field><title><![CDATA[Returns]]></title><description><![CDATA[the currently used type proxy factory]]></description></field>
</fields>
</method>
<method>
<title><![CDATA[setClientServiceProxyFactory]]></title><fullMethod><left><![CDATA[function <b>setClientServiceProxyFactory</b> (
]]></left><right><param><name><![CDATA[clientServiceProxyFactory]]></name>:<type><![CDATA[<a href="org_as2lib_io_conn_core_client_ClientServiceProxyFactory.html">ClientServiceProxyFactory</a>]]></type></param>) : <![CDATA[Void]]></right></fullMethod>
<description>
<text><![CDATA[Sets a new client service proxy factory used to get client service
 proxy instances.<p>If you set a new factory of value null or undefined <a href="org_as2lib_io_conn_local_client_LocalClientServiceProxyFactory.html#getClientServiceProxyFactory">getClientServiceProxyFactory</a>
 will return the default factory.]]></text>
</description>
<fields>
<field><title><![CDATA[Parameters]]></title>
<param><name><![CDATA[clientServiceProxyFactory]]></name><description><![CDATA[the new client service proxy factory]]></description></param>
</field>
</fields>
</method>
<method>
<title><![CDATA[setTypeProxyFactory]]></title><fullMethod><left><![CDATA[function <b>setTypeProxyFactory</b> (
]]></left><right><param><name><![CDATA[typeServiceProxyFactory]]></name>:<type><![CDATA[<a href="org_as2lib_env_reflect_ProxyFactory.html">ProxyFactory</a>]]></type></param>) : <![CDATA[Void]]></right></fullMethod>
<description>
<text><![CDATA[Sets the new type proxy factory that is used to create proxies for a specific type.<p>If you set a type proxy factory of value <code>null</code>, <a href="org_as2lib_io_conn_local_client_LocalClientServiceProxyFactory.html#getTypeProxyFactory">getTypeProxyFactory</a>
 will return the default factory.]]></text>
</description>
<fields>
<field><title><![CDATA[Parameters]]></title>
<param><name><![CDATA[proxyFactory]]></name><description><![CDATA[the new type proxy factory]]></description></param>
</field>
</fields>
</method>
</methodSection>
</methodSections>
<footer><copyright><![CDATA[2005 as2lib]]></copyright>
<date><![CDATA[Tuesday, 31 May 2005, 20:29:09]]>
</date><showTOC>show TOC</showTOC><hideTOC>hide TOC</hideTOC><showPrivate>show private members</showPrivate><hidePrivate>hide private members</hidePrivate>
</footer>
</document>