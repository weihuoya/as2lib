<?xml version="1.0" encoding="utf-8"?>
<document>
<cssFile><![CDATA[css/VisDoc.css]]></cssFile>
<title><![CDATA[TypeProxyFactory]]></title>
<classDocScript />
<classData>
<inheritsFrom>
<title><![CDATA[Inherits from]]></title><item><link><name><![CDATA[BasicClass]]></name><uri><![CDATA[org_as2lib_core_BasicClass]]></uri></link></item>
</inheritsFrom>
<conformsTo>
<title><![CDATA[Implements]]></title><item><link><name><![CDATA[ProxyFactory]]></name><uri><![CDATA[org_as2lib_env_reflect_ProxyFactory]]></uri></link></item>
</conformsTo>
<classDetails>
<item><title><![CDATA[Author]]></title><value><![CDATA[Simon Wacker]]></value></item>
<item><title><![CDATA[Classpath]]></title><value><![CDATA[org.as2lib.env.reflect.TypeProxyFactory]]></value></item>
<item><title><![CDATA[File last modified]]></title><value><![CDATA[Sunday, 24 April 2005, 19:39:34]]></value></item>
</classDetails>
<classDescription><summary><![CDATA[<code>TypeProxyFactory</code> creates proxies of types, that means classes or
 interfaces.]]></summary><restOfDescription><![CDATA[<p>If you know that you only need interface proxies you could think of using
 <a href="org_as2lib_env_reflect_InterfaceProxyFactory.html">InterfaceProxyFactory</a> because it offers better performance.]]></restOfDescription>
</classDescription>
</classData>
<pageSummary>
<methodList>
<title><![CDATA[Summary]]></title>
<methodSummaryPart>
<title><![CDATA[Instance methods]]></title>
<item><![CDATA[createProxy]]></item>
<inheritedMethods>
<fromClass><title><text><![CDATA[Instance methods inherited from]]></text><link><name><![CDATA[BasicClass]]></name><uri><![CDATA[org_as2lib_core_BasicClass]]></uri></link></title><item><link><name>toString</name><uri>org_as2lib_core_BasicClass</uri><method>toString</method></link></item></fromClass>
</inheritedMethods>
</methodSummaryPart>
</methodList>
</pageSummary>
<methodSections>
<methodSection>
<title><![CDATA[Instance methods]]></title>
<method>
<title><![CDATA[createProxy]]></title><fullMethod><left><![CDATA[function <b>createProxy</b> (

]]></left><right><param><name><![CDATA[type]]></name>:<type><![CDATA[Function]]></type></param>,
<param><name><![CDATA[handler]]></name>:<type><![CDATA[<a href="org_as2lib_env_reflect_InvocationHandler.html">InvocationHandler</a>]]></type></param>)</right></fullMethod>
<description>
<text><![CDATA[Creates proxies for the passed-in <code>type</code>, that are classes and interfaces.<p>You can cast the returned proxy to the passed-in <code>type</code>.<p><code>null</code> will be returned if the passed-in <code>type</code> is <code>null</code>
 or <code>undefined</code>.<p>This proxy catches method invocations by creating proxy methods for every
 method of the <code>type</code> that forward the invocations to the handler. Unknown,
 that means not declared or implemented methods are catched by <code>__resolve</code>.<p>Note that also methods that are not declared on the <code>type</code> but get
 invoked on the proxy, are forwarded to the passed-in <code>handler</code>.]]></text>
</description>
<fields>
<field><title><![CDATA[Parameters]]></title>
<param><name><![CDATA[type   ]]></name><description><![CDATA[the type to create the proxy for]]></description></param>
<param><name><![CDATA[handler]]></name><description><![CDATA[the handler to invoke on proxy method invocations]]></description></param>
</field>
<field><title><![CDATA[Returns]]></title><description><![CDATA[the created type proxy]]></description></field>
<field><title><![CDATA[Specified by]]></title><description><![CDATA[<a href="org_as2lib_env_reflect_ProxyFactory.html#createProxy">ProxyFactory.createProxy</a>]]></description></field>
</fields>
</method>
</methodSection>
</methodSections>
<footer><copyright><![CDATA[2005 as2lib]]></copyright>
<date><![CDATA[Tuesday, 31 May 2005, 20:28:49]]>
</date><showTOC>show TOC</showTOC><hideTOC>hide TOC</hideTOC><showPrivate>show private members</showPrivate><hidePrivate>hide private members</hidePrivate>
</footer>
</document>