<?xml version="1.0" encoding="utf-8"?>
<document>
<cssFile><![CDATA[css/VisDoc.css]]></cssFile>
<title><![CDATA[Overload]]></title>
<classDocScript />
<classData>
<inheritsFrom>
<title><![CDATA[Inherits from]]></title><item><link><name><![CDATA[BasicClass]]></name><uri><![CDATA[org_as2lib_core_BasicClass]]></uri></link></item>
</inheritsFrom>
<classDetails>
<item><title><![CDATA[Author]]></title><value><![CDATA[Simon Wacker]]></value></item>
<item><title><![CDATA[Classpath]]></title><value><![CDATA[org.as2lib.env.overload.Overload]]></value></item>
<item><title><![CDATA[File last modified]]></title><value><![CDATA[Saturday, 28 May 2005, 12:15:34]]></value></item>
</classDetails>
<classDescription><summary><![CDATA[<code>Overload</code> provides methods to overload a method.]]></summary><restOfDescription><![CDATA[<p>With overloading you have typically two or more methods with the same name. Which
 method gets actually invoked depends on its type signature, that means its return
 and arguments' types. Here is an example of what overloading may look if it would be
 supported by Flash (note that this code does actually not work).<p>Example:<pre><span class="codeComment">// MyClass.as</span>
<span class="codeKeyword">class</span> MyClass {
    <span class="codeKeyword">public</span> <span class="codeKeyword">function</span> myMethod(number:<span class="codeIdentifier">Number</span>, string:<span class="codeIdentifier">String</span>):<span class="codeIdentifier">Void</span> {
        <span class="codeIdentifier">trace</span>(<span class="codeString">"myMethod(Number, String):Void"</span>);
    }
    <span class="codeKeyword">public</span> <span class="codeKeyword">function</span> myMethod(number:<span class="codeIdentifier">Number</span>):<span class="codeIdentifier">Void</span> {
        <span class="codeIdentifier">trace</span>(<span class="codeString">"myMethod(Number):Void"</span>);
    }
    <span class="codeKeyword">public</span> <span class="codeKeyword">function</span> myMethod(string:<span class="codeIdentifier">String</span>):<span class="codeIdentifier">Number</span> {
        <span class="codeIdentifier">trace</span>(<span class="codeString">"myMethod(String):Number"</span>);
        <span class="codeKeyword">return</span> <span class="codeNumber">1</span>;
    }
}</pre><p>Usage:<pre><span class="codeComment">// test.fla</span>
<span class="codeKeyword">var</span> myInstance:MyClass = <span class="codeKeyword">new</span> MyClass();
myInstance.myMethod(<span class="codeNumber">1</span>);
myInstance.myMethod(<span class="codeNumber">2</span>, <span class="codeString">"myString"</span>);
<span class="codeKeyword">var</span> number:<span class="codeIdentifier">Number</span> = myInstance.myMethod(<span class="codeString">"myString"</span>);
<span class="codeIdentifier">trace</span>(number);</pre><p>Output:<pre>myMethod(<span class="codeIdentifier">Number</span>):<span class="codeIdentifier">Void</span>
myMethod(<span class="codeIdentifier">Number</span>, <span class="codeIdentifier">String</span>):<span class="codeIdentifier">Void</span>
myMethod(<span class="codeIdentifier">String</span>):<span class="codeIdentifier">Number</span>
<span class="codeNumber">1</span></pre><p>As you can see, depending on what type the passed-in arguments have a different
 method is invoked. This is sadly not possible with ActionScript, that is what this
 class is for. Using the overload mechanism this class offers the overloading looks
 as follows:<pre><span class="codeComment">// MyClass.as</span>
<span class="codeKeyword">class</span> MyClass {
    <span class="codeKeyword">public</span> functino myMethod() {
        <span class="codeKeyword">var</span> o:Overload = <span class="codeKeyword">new</span> Overload(<span class="codeIdentifier">this</span>);
        o.addHandler([<span class="codeIdentifier">Number</span>, <span class="codeIdentifier">String</span>], myMethodByNumberAndString);
        o.addHandler([<span class="codeIdentifier">Number</span>], myMethodByNumber);
        o.addHandler([<span class="codeIdentifier">String</span>], myMethodByString);
        <span class="codeKeyword">return</span> o.forward(arguments);
    }
    <span class="codeKeyword">public</span> <span class="codeKeyword">function</span> myMethodByNumberAndString(number:<span class="codeIdentifier">Number</span>, string:<span class="codeIdentifier">String</span>):<span class="codeIdentifier">Void</span> {
        <span class="codeIdentifier">trace</span>(<span class="codeString">"myMethod(Number, String):Void"</span>);
    }
    <span class="codeKeyword">public</span> <span class="codeKeyword">function</span> myMethodByNumber(number:<span class="codeIdentifier">Number</span>):<span class="codeIdentifier">Void</span> {
        <span class="codeIdentifier">trace</span>(<span class="codeString">"myMethod(Number):Void"</span>);
    }
    <span class="codeKeyword">public</span> <span class="codeKeyword">function</span> myMethodByString(string:<span class="codeIdentifier">String</span>):<span class="codeIdentifier">Number</span> {
        <span class="codeIdentifier">trace</span>(<span class="codeString">"myMethod(String):Number"</span>);
        <span class="codeKeyword">return</span> <span class="codeNumber">1</span>;
    }
}</pre><p>Using the above testing code the output looks the same.<p>While this is a good overloading mechanism / overloading alternative it still has
 some disadvantages.<ul><li>If not all methods the overloaded method forwards to returns a value of the
     same type, return type type-checking is lost.</li><li>The type checking of the arguments is also lost at compile time. At run-time the
     <code>Overload</code> class throws an <code>UnknownOverloadHandlerException</code> if the
     real arguments match no added overload handler.</li><li>The overloading slows the method execution a little bit down.</li></ul><p>But if you declare the methods to overload to as public, as in the example, you
 can still invoke them directly. Doing so, all the above problems do not hold true
 anymore. The overloaded methods then acts more as a convenient method that is easy
 to use if appropriate.]]></restOfDescription>
</classDescription>
</classData>
<pageSummary>
<methodList>
<title><![CDATA[Summary]]></title>
<methodSummaryPart>
<title><![CDATA[Constructor]]></title>
<item><![CDATA[Overload]]></item>
</methodSummaryPart>
<private>
<methodSummaryPart>
<title><![CDATA[Instance properties]]></title>
<item><private><![CDATA[handlers]]></private></item>
<item><private><![CDATA[defaultHandler]]></private></item>
<item><private><![CDATA[target]]></private></item>
</methodSummaryPart>
</private>
<methodSummaryPart>
<title><![CDATA[Instance methods]]></title>
<item><![CDATA[setDefaultHandler]]></item>
<item><![CDATA[removeDefaultHandler]]></item>
<item><![CDATA[addHandler]]></item>
<item><![CDATA[addHandlerByHandler]]></item>
<item><![CDATA[addHandlerByValue]]></item>
<item><![CDATA[removeHandler]]></item>
<item><![CDATA[forward]]></item>
<item><![CDATA[getMatchingHandler]]></item>
<item><private><![CDATA[doGetMatchingHandler]]></private></item>
<item><private><![CDATA[getMatchingHandlers]]></private></item>
<inheritedMethods>
<fromClass><title><text><![CDATA[Instance methods inherited from]]></text><link><name><![CDATA[BasicClass]]></name><uri><![CDATA[org_as2lib_core_BasicClass]]></uri></link></title><item><link><name>toString</name><uri>org_as2lib_core_BasicClass</uri><method>toString</method></link></item></fromClass>
</inheritedMethods>
</methodSummaryPart>
</methodList>
</pageSummary>
<methodSections>
<methodSection>
<title><![CDATA[Constructor]]></title>
<method>
<title><![CDATA[Overload]]></title><fullMethod><left><![CDATA[function <b>Overload</b> (
]]></left><right><param><name><![CDATA[target]]></name></param>)</right></fullMethod>
<description>
<text><![CDATA[Constructs a new <code>Overload</code> instance.<p>The passed-in <code>target</code> is normally the object on which the overloading
 takes place. This means it is the object that declares all methods that take
 part at the overloading.]]></text>
</description>
<fields>
<field><title><![CDATA[Parameters]]></title>
<param><name><![CDATA[target]]></name><description><![CDATA[the target to invoke the overloaded method on]]></description></param>
</field>
</fields>
</method>
</methodSection>
<private>
<methodSection>
<title><![CDATA[Instance properties]]></title>
<method>
<title><private><![CDATA[defaultHandler]]></private></title><private><![CDATA[private]]></private><fullMethod><left><![CDATA[<b>defaultHandler</b>:<a href="org_as2lib_env_overload_OverloadHandler.html">OverloadHandler</a>
]]></left><right></right></fullMethod>
<description>
<text><![CDATA[Handler to use if no handler matches.]]></text>
</description>
</method>
<method>
<title><private><![CDATA[handlers]]></private></title><private><![CDATA[private]]></private><fullMethod><left><![CDATA[<b>handlers</b>:Array
]]></left><right></right></fullMethod>
<description>
<text><![CDATA[All registered handlers.]]></text>
</description>
</method>
<method>
<title><private><![CDATA[target]]></private></title><private><![CDATA[private]]></private><fullMethod><left><![CDATA[<b>target</b>
]]></left><right></right></fullMethod>
<description>
<text><![CDATA[The target object to invoke the method on.]]></text>
</description>
</method>
</methodSection>
</private>
<methodSection>
<title><![CDATA[Instance methods]]></title>
<method>
<title><![CDATA[addHandler]]></title><fullMethod><left><![CDATA[function <b>addHandler</b> (
]]></left><right>)</right></fullMethod>
<fields>
<field><title><![CDATA[Overloading]]></title><description><![CDATA[<a href="org_as2lib_env_overload_Overload.html#addHandlerByHandler">addHandlerByHandler</a> <code>(handler:{VISDOC_LINK_3}) : Void</code><br /><a href="org_as2lib_env_overload_Overload.html#addHandlerByValue">addHandlerByValue</a> <code>(argumentsTypes:Array, method:Function) : {VISDOC_LINK_4}</code>]]></description></field>
</fields>
</method>
<method>
<title><![CDATA[addHandlerByHandler]]></title><fullMethod><left><![CDATA[function <b>addHandlerByHandler</b> (
]]></left><right><param><name><![CDATA[handler]]></name>:<type><![CDATA[<a href="org_as2lib_env_overload_OverloadHandler.html">OverloadHandler</a>]]></type></param>) : <![CDATA[Void]]></right></fullMethod>
<description>
<text><![CDATA[Adds the passed-in <code>handler</code>.<p>Overload handlers are used to determine the method to forward to. This is
 done using the methods <a href="org_as2lib_env_overload_OverloadHandler.html#matches">OverloadHandler.matches</a> and
 <a href="org_as2lib_env_overload_OverloadHandler.html#isMoreExplicit">OverloadHandler.isMoreExplicit</a>. If both conditions hold true the method
 invocation is forwarded to the method of the handler, that gets returned by the
 <a href="org_as2lib_env_overload_OverloadHandler.html#getMethod">OverloadHandler.getMethod</a> method.<p>If the passed-in <code>handler</code> is <code>null</code> or <code>undefined</code> no
 actions will take place.]]></text>
</description>
<fields>
<field><title><![CDATA[Parameters]]></title>
<param><name><![CDATA[handler]]></name><description><![CDATA[the new overload handler to add]]></description></param>
</field>
</fields>
</method>
<method>
<title><![CDATA[addHandlerByValue]]></title><fullMethod><left><![CDATA[function <b>addHandlerByValue</b> (

]]></left><right><param><name><![CDATA[argumentsTypes]]></name>:<type><![CDATA[Array]]></type></param>,
<param><name><![CDATA[method]]></name>:<type><![CDATA[Function]]></type></param>) : <![CDATA[<a href="org_as2lib_env_overload_OverloadHandler.html">OverloadHandler</a>]]></right></fullMethod>
<description>
<text><![CDATA[Adds a new <a href="org_as2lib_env_overload_SimpleOverloadHandler.html">SimpleOverloadHandler</a> instance, that gets configured with the
 passed-in <code>argumentsTypes</code> and <code>method</code>.<p>Overload handlers are used to determine the method to forward to. This is
 done using the methods <a href="org_as2lib_env_overload_OverloadHandler.html#matches">OverloadHandler.matches</a> and
 <a href="org_as2lib_env_overload_OverloadHandler.html#isMoreExplicit">OverloadHandler.isMoreExplicit</a>. If both conditions hold true the method
 invocation is forwarded to the method of the handler, that gets returned by the
 <a href="org_as2lib_env_overload_OverloadHandler.html#getMethod">OverloadHandler.getMethod</a> method.<p>The passed-in <code>argumentsTypes</code> are the types of arguments the method
 expects from the real arguments to have. The <code>SimpleOverloadHandler</code> does
 its matches and explicity checks upon these arguments' types.<p>The passed-in <code>method</code> is the method to invoke if the added handler
 matches the real arguments and if it is the most explicit handler among all 
 matching ones.]]></text>
</description>
<fields>
<field><title><![CDATA[Parameters]]></title>
<param><name><![CDATA[argumentsTypes]]></name><description><![CDATA[the arguments' types of the overload handler]]></description></param>
<param><name><![CDATA[method        ]]></name><description><![CDATA[the method corresponding to the passed-in <code>argumentsTypes</code>]]></description></param>
</field>
<field><title><![CDATA[Returns]]></title><description><![CDATA[the newly created overload handler]]></description></field>
<field><title><![CDATA[See also]]></title><description><![CDATA[<a href="org_as2lib_env_overload_SimpleOverloadHandler.html#SimpleOverloadHandler">SimpleOverloadHandler.SimpleOverloadHandler</a>]]></description></field>
</fields>
</method>
<method>
<title><private><![CDATA[doGetMatchingHandler]]></private></title><private><![CDATA[private]]></private><fullMethod><left><![CDATA[function <b>doGetMatchingHandler</b> (

]]></left><right><param><name><![CDATA[overloadedMethod]]></name>:<type><![CDATA[Function]]></type></param>,
<param><name><![CDATA[overloadArguments]]></name>:<type><![CDATA[Array]]></type></param>) : <![CDATA[<a href="org_as2lib_env_overload_OverloadHandler.html">OverloadHandler</a>]]></right></fullMethod>
<description>
<text><![CDATA[Returns the most explicit overload handler out of the array of matching overload
 handlers.<p>If the passed-in <code>args</code> array is <code>null</code> or <code>undefined</code> an
 empty array is used instead.<p>If no handler matches the default handler gets returned if it has been set.<p>Overload handlers are supposed to have the same type signature if the
 <a href="org_as2lib_env_overload_OverloadHandler.html#isMoreExplicit">OverloadHandler.isMoreExplicit</a> method returns <code>null</code>.]]></text>
</description>
<fields>
<field><title><![CDATA[Parameters]]></title>
<param><name><![CDATA[overloadedMethod ]]></name><description><![CDATA[the overloaded method on the target]]></description></param>
<param><name><![CDATA[overloadArguments]]></name><description><![CDATA[the arguments for which the overload shall be performed]]></description></param>
</field>
<field><title><![CDATA[Returns]]></title><description><![CDATA[the most explicit overload handler]]></description></field>
<field><title><![CDATA[Throws]]></title><description><![CDATA[<a href="org_as2lib_env_overload_UnknownOverloadHandlerException.html">UnknownOverloadHandlerException</a> if no adequate
 overload handler could be found<br /><a href="org_as2lib_env_overload_SameTypeSignatureException.html">SameTypeSignatureException</a> if there exist at
 least two overload handlers with the same type siganture, that means their
 arguments' types are the same]]></description></field>
</fields>
</method>
<method>
<title><![CDATA[forward]]></title><fullMethod><left><![CDATA[function <b>forward</b> (
]]></left><right><param><name><![CDATA[args]]></name>:<type><![CDATA[Array]]></type></param>)</right></fullMethod>
<description>
<text><![CDATA[Forwards to the appropriate overload handler depending on the passed-in
 <code>args</code>.<p>This is not done by using the <a href="org_as2lib_env_overload_OverloadHandler.html#execute">OverloadHandler.execute</a> method but
 manually by using <code>apply</code> on the method returned by the
 <a href="org_as2lib_env_overload_OverloadHandler.html#getMethod">OverloadHandler.getMethod</a> method. Invoking the method this way
 increases the number of possible recurions with overlaoded methods.<p>If the <code>args</code> array is <code>null</code> or <code>undefined</code> an empty array
 is used instead.<p>If no overload handler matches, the default overload handler will be used if
 it has been set.<p>Overload handlers are supposed to have the same type signature if the
 <a href="org_as2lib_env_overload_OverloadHandler.html#isMoreExplicit">OverloadHandler.isMoreExplicit</a> method returns <code>null</code>.]]></text>
</description>
<fields>
<field><title><![CDATA[Returns]]></title><description><![CDATA[the return value of the invoked method]]></description></field>
<field><title><![CDATA[Throws]]></title><description><![CDATA[<a href="org_as2lib_env_overload_UnknownOverloadHandlerException.html">UnknownOverloadHandlerException</a> if no adequate
 overload handler could be found<br /><a href="org_as2lib_env_overload_SameTypeSignatureException.html">SameTypeSignatureException</a> if there exist at
 least two overload handlers with the same type siganture, that means their
 arguments' types are the same]]></description></field>
</fields>
</method>
<method>
<title><![CDATA[getMatchingHandler]]></title><fullMethod><left><![CDATA[function <b>getMatchingHandler</b> (
]]></left><right><param><name><![CDATA[args]]></name>:<type><![CDATA[Array]]></type></param>) : <![CDATA[<a href="org_as2lib_env_overload_OverloadHandler.html">OverloadHandler</a>]]></right></fullMethod>
<description>
<text><![CDATA[Returns the most explicit overload handler from the array of matching handlers.<p>If the <code>args</code> array is <code>null</code> or <code>undefined</code> an empty array
 is used instead.<p>If no handler matches the default handler gets returned if it has been set.<p>Overload handlers are supposed to have the same type signature if the
 <a href="org_as2lib_env_overload_OverloadHandler.html#isMoreExplicit">OverloadHandler.isMoreExplicit</a> method returns <code>null</code>.]]></text>
</description>
<fields>
<field><title><![CDATA[Parameters]]></title>
<param><name><![CDATA[args]]></name><description><![CDATA[the arguments that shall match to a specific overload handler]]></description></param>
</field>
<field><title><![CDATA[Returns]]></title><description><![CDATA[the most explicit overload handler]]></description></field>
<field><title><![CDATA[Throws]]></title><description><![CDATA[<a href="org_as2lib_env_overload_UnknownOverloadHandlerException.html">UnknownOverloadHandlerException</a> if no adequate
 overload handler could be found<br /><a href="org_as2lib_env_overload_SameTypeSignatureException.html">SameTypeSignatureException</a> if there exist at
 least two overload handlers with the same type siganture, that means their
 arguments' types are the same]]></description></field>
</fields>
</method>
<method>
<title><private><![CDATA[getMatchingHandlers]]></private></title><private><![CDATA[private]]></private><fullMethod><left><![CDATA[function <b>getMatchingHandlers</b> (
]]></left><right><param><name><![CDATA[args]]></name>:<type><![CDATA[Array]]></type></param>) : <![CDATA[Array]]></right></fullMethod>
<description>
<text><![CDATA[Returns OverlaodHandler instances that match the passed-in <code>args</code>.<p>The match is performed using the OverlaodHandler#matches method.]]></text>
</description>
<fields>
<field><title><![CDATA[Parameters]]></title>
<param><name><![CDATA[args]]></name><description><![CDATA[the arguments that shall match to overload handlers]]></description></param>
</field>
<field><title><![CDATA[Returns]]></title><description><![CDATA[an array containing the matching <code>OverloadHandler</code> instances]]></description></field>
</fields>
</method>
<method>
<title><![CDATA[removeDefaultHandler]]></title><fullMethod><left><![CDATA[function <b>removeDefaultHandler</b> (
]]></left><right><param><name><![CDATA[Void]]></name></param>) : <![CDATA[Void]]></right></fullMethod>
<description>
<text><![CDATA[Removes the default handler.<p>This handler is used if no other handler matches to a list of arguments.]]></text>
</description>
<fields>
<field><title><![CDATA[See also]]></title><description><![CDATA[<a href="org_as2lib_env_overload_Overload.html#setDefaultHandler">setDefaultHandler</a>]]></description></field>
</fields>
</method>
<method>
<title><![CDATA[removeHandler]]></title><fullMethod><left><![CDATA[function <b>removeHandler</b> (
]]></left><right><param><name><![CDATA[handler]]></name>:<type><![CDATA[<a href="org_as2lib_env_overload_OverloadHandler.html">OverloadHandler</a>]]></type></param>) : <![CDATA[Void]]></right></fullMethod>
<description>
<text><![CDATA[Removes the passed-in <code>handler</code>.<p>All occurrences of the passed-in <code>handler</code> are removed.]]></text>
</description>
<fields>
<field><title><![CDATA[Parameters]]></title>
<param><name><![CDATA[handler]]></name><description><![CDATA[the overload handler to remove]]></description></param>
</field>
</fields>
</method>
<method>
<title><![CDATA[setDefaultHandler]]></title><fullMethod><left><![CDATA[function <b>setDefaultHandler</b> (
]]></left><right><param><name><![CDATA[method]]></name>:<type><![CDATA[Function]]></type></param>) : <![CDATA[Void]]></right></fullMethod>
<description>
<text><![CDATA[Sets the default handler.<p>This handler will be used if no other handler matches to a list of arguments.
 All real arguments used for the overloading are passed as parameters to the
 method of this default handler.<p>The method is invoked on the same scope as the other handlers. That is the
 target passed-in on construction.<pre><span class="codeKeyword">var</span> overload:Overload = <span class="codeKeyword">new</span> Overload(<span class="codeIdentifier">this</span>);
overload.addHandler([<span class="codeIdentifier">String</span>], methodWithStringArgument);
overload.addHandler([<span class="codeIdentifier">Number</span>], methodWithNumberArgument);
overload.setDefaultHandler(<span class="codeKeyword">function</span>() {
    <span class="codeIdentifier">trace</span>(arguments.<span class="codeIdentifier">length</span> + <span class="codeString">" arguments were used."</span>);
});
<span class="codeKeyword">return</span> overload.forward(arguments);</pre><p>If the passed-in <code>method</code> is <code>null</code>, <code>undefined</code> or not of
 type <code>"function"</code> the default handler gets removed.]]></text>
</description>
<fields>
<field><title><![CDATA[Parameters]]></title>
<param><name><![CDATA[method]]></name><description><![CDATA[the method of the handler to invoke if no added handler matches
 the overload arguments]]></description></param>
</field>
<field><title><![CDATA[See also]]></title><description><![CDATA[<a href="org_as2lib_env_overload_Overload.html#removeDefaultHandler">removeDefaultHandler</a>]]></description></field>
</fields>
</method>
</methodSection>
</methodSections>
<footer><copyright><![CDATA[2005 as2lib]]></copyright>
<date><![CDATA[Tuesday, 31 May 2005, 20:28:02]]>
</date><showTOC>show TOC</showTOC><hideTOC>hide TOC</hideTOC><showPrivate>show private members</showPrivate><hidePrivate>hide private members</hidePrivate>
</footer>
</document>