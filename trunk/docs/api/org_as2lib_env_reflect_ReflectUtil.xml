<?xml version="1.0" encoding="utf-8"?>
<document>
<cssFile><![CDATA[css/VisDoc.css]]></cssFile>
<title><![CDATA[ReflectUtil]]></title>
<classDocScript />
<classData>
<inheritsFrom>
<title><![CDATA[Inherits from]]></title><item><link><name><![CDATA[BasicClass]]></name><uri><![CDATA[org_as2lib_core_BasicClass]]></uri></link></item>
</inheritsFrom>
<classDetails>
<item><title><![CDATA[Author]]></title><value><![CDATA[Simon Wacker]]></value></item>
<item><title><![CDATA[Classpath]]></title><value><![CDATA[org.as2lib.env.reflect.ReflectUtil]]></value></item>
<item><title><![CDATA[File last modified]]></title><value><![CDATA[Sunday, 29 May 2005, 14:42:00]]></value></item>
</classDetails>
<classDescription><summary><![CDATA[<code>ReflectUtil</code> obtains simple information about members.]]></summary><restOfDescription><![CDATA[<p>It is independent on any module of the As2lib. And thus does not include them
 and does not dramatically increase the file size.]]></restOfDescription>
</classDescription>
</classData>
<pageSummary>
<methodList>
<title><![CDATA[Summary]]></title>
<private>
<methodSummaryPart>
<title><![CDATA[Constructor]]></title>
<item><private><![CDATA[ReflectUtil]]></private></item>
</methodSummaryPart>
</private>
<methodSummaryPart>
<title><![CDATA[Class properties]]></title>
<item><![CDATA[CONSTRUCTOR]]></item>
<item><![CDATA[UNKNOWN]]></item>
<item><private><![CDATA[MEMBER_PREFIX]]></private></item>
</methodSummaryPart>
<methodSummaryPart>
<title><![CDATA[Class methods]]></title>
<item><![CDATA[getUnusedMemberName]]></item>
<item><![CDATA[getTypeAndMethodInfo]]></item>
<item><![CDATA[getTypeAndMethodInfoByType]]></item>
<item><![CDATA[getTypeAndMethodInfoByInstance]]></item>
<item><![CDATA[getTypeAndMethodInfoByPrototype]]></item>
<item><![CDATA[getTypeName]]></item>
<item><![CDATA[getTypeNameForInstance]]></item>
<item><![CDATA[getTypeNameForType]]></item>
<item><private><![CDATA[getTypeNameForPrototype]]></private></item>
<item><![CDATA[getMethodName]]></item>
<item><![CDATA[getMethodNameByInstance]]></item>
<item><![CDATA[getMethodNameByType]]></item>
<item><private><![CDATA[getMethodNameByPrototype]]></private></item>
<item><private><![CDATA[getMethodNameByObject]]></private></item>
<item><![CDATA[isMethodStatic]]></item>
<item><![CDATA[isMethodStaticByInstance]]></item>
<item><![CDATA[isMethodStaticByType]]></item>
<item><![CDATA[isConstructor]]></item>
<item><![CDATA[isConstructorByInstance]]></item>
<item><![CDATA[isConstructorByType]]></item>
<item><![CDATA[getVariableNames]]></item>
</methodSummaryPart>
<methodSummaryPart>
<title><![CDATA[Instance methods]]></title>
<inheritedMethods>
<fromClass><title><text><![CDATA[Instance methods inherited from]]></text><link><name><![CDATA[BasicClass]]></name><uri><![CDATA[org_as2lib_core_BasicClass]]></uri></link></title><item><link><name>toString</name><uri>org_as2lib_core_BasicClass</uri><method>toString</method></link></item></fromClass>
</inheritedMethods>
</methodSummaryPart>
</methodList>
</pageSummary>
<methodSections>
<private>
<methodSection>
<title><![CDATA[Constructor]]></title>
<method>
<title><private><![CDATA[ReflectUtil]]></private></title><private><![CDATA[private]]></private><fullMethod><left><![CDATA[function <b>ReflectUtil</b> (
]]></left><right><param><name><![CDATA[Void]]></name></param>)</right></fullMethod>
<description>
<text><![CDATA[Private constructor.]]></text>
</description>
</method>
</methodSection>
</private>
<methodSection>
<title><![CDATA[Class properties]]></title>
<method>
<title><![CDATA[CONSTRUCTOR]]></title><fullMethod><left><![CDATA[static <b>CONSTRUCTOR</b>:String = <span class="codeString">"new"</span>
]]></left><right></right></fullMethod><access><![CDATA[(read,write)]]></access>
<description>
<text><![CDATA[The name to use for constructors.]]></text>
</description>
</method>
<method>
<title><private><![CDATA[MEMBER_PREFIX]]></private></title><private><![CDATA[private]]></private><fullMethod><left><![CDATA[static <b>MEMBER_PREFIX</b>:String = <span class="codeString">"__as2lib__member"</span>
]]></left><right></right></fullMethod>
<description>
<text><![CDATA[The prefix for a generic member name.]]></text>
</description>
</method>
<method>
<title><![CDATA[UNKNOWN]]></title><fullMethod><left><![CDATA[static <b>UNKNOWN</b>:String = <span class="codeString">"[unknown]"</span>
]]></left><right></right></fullMethod><access><![CDATA[(read,write)]]></access>
<description>
<text><![CDATA[The name to use for unknown information.]]></text>
</description>
</method>
</methodSection>
<methodSection>
<title><![CDATA[Class methods]]></title>
<method>
<title><![CDATA[getMethodName]]></title><fullMethod><left><![CDATA[static function <b>getMethodName</b> (

]]></left><right><param><name><![CDATA[method]]></name>:<type><![CDATA[Function]]></type></param>,
<param><name><![CDATA[object]]></name></param>) : <![CDATA[String]]></right></fullMethod>
<fields>
<field><title><![CDATA[Overloading]]></title><description><![CDATA[<a href="org_as2lib_env_reflect_ReflectUtil.html#getMethodNameByInstance">getMethodNameByInstance</a> <code>(method:Function, instance) : String</code><br /><a href="org_as2lib_env_reflect_ReflectUtil.html#getMethodNameByType">getMethodNameByType</a> <code>(method:Function, type:Function) : String</code>]]></description></field>
</fields>
</method>
<method>
<title><![CDATA[getMethodNameByInstance]]></title><fullMethod><left><![CDATA[static function <b>getMethodNameByInstance</b> (

]]></left><right><param><name><![CDATA[method]]></name>:<type><![CDATA[Function]]></type></param>,
<param><name><![CDATA[instance]]></name></param>) : <![CDATA[String]]></right></fullMethod>
<description>
<text><![CDATA[Returns the name of the <code>method</code> on the instance's <code>type</code>.<p><code>null</code> will be returned if:<ul><li>The passed-in <code>method</code> or <code>instance</code> are <code>null</code></li><li>The <code>method</code> does not exist on the <code>instance</code>'s type.</li></ul>]]></text>
</description>
<fields>
<field><title><![CDATA[Parameters]]></title>
<param><name><![CDATA[method  ]]></name><description><![CDATA[the method to get the name of]]></description></param>
<param><name><![CDATA[instance]]></name><description><![CDATA[the instance whose type implements the <code>method</code>]]></description></param>
</field>
<field><title><![CDATA[Returns]]></title><description><![CDATA[the name of the <code>method</code> or <code>null</code>]]></description></field>
</fields>
</method>
<method>
<title><private><![CDATA[getMethodNameByObject]]></private></title><private><![CDATA[private]]></private><fullMethod><left><![CDATA[static function <b>getMethodNameByObject</b> (

]]></left><right><param><name><![CDATA[m]]></name>:<type><![CDATA[Function]]></type></param>,
<param><name><![CDATA[o]]></name></param>) : <![CDATA[String]]></right></fullMethod>
<description>
<text><![CDATA[Returns the name of the method <code>m</code> on the passed-in object <code>o</code> or
 <code>null</code>.<p>Only the passed-in object is searched through. Note also that all methods
 regardless of their access permissions are enumerated.<p><code>null</code> will be returned if:<ul><li>The passed-in method or object are <code>null</code></li><li>The method does not exist on the object.</li></ul>]]></text>
</description>
<fields>
<field><title><![CDATA[Parameters]]></title>
<param><name><![CDATA[m]]></name><description><![CDATA[the method to find]]></description></param>
<param><name><![CDATA[o]]></name><description><![CDATA[the object that may contain the method]]></description></param>
</field>
<field><title><![CDATA[Returns]]></title><description><![CDATA[the name of the method or <code>null</code>]]></description></field>
</fields>
</method>
<method>
<title><private><![CDATA[getMethodNameByPrototype]]></private></title><private><![CDATA[private]]></private><fullMethod><left><![CDATA[static function <b>getMethodNameByPrototype</b> (

]]></left><right><param><name><![CDATA[m]]></name>:<type><![CDATA[Function]]></type></param>,
<param><name><![CDATA[p]]></name></param>) : <![CDATA[String]]></right></fullMethod>
<description>
<text><![CDATA[Returns the name of the method <code>m</code> on the prototype chain starting from
 the passed-in prototype <code>p</code>.<p><code>null</code> will be returned if:<ul><li>The passed-in method or prototype are <code>null</code></li><li>The method does not exist on the prototype chain.</li></ul>]]></text>
</description>
<fields>
<field><title><![CDATA[Parameters]]></title>
<param><name><![CDATA[m]]></name><description><![CDATA[the method to get the name of]]></description></param>
<param><name><![CDATA[o]]></name><description><![CDATA[the prototype that has the <code>method</code>]]></description></param>
</field>
<field><title><![CDATA[Returns]]></title><description><![CDATA[the name of the <code>method</code> or <code>null</code>]]></description></field>
</fields>
</method>
<method>
<title><![CDATA[getMethodNameByType]]></title><fullMethod><left><![CDATA[static function <b>getMethodNameByType</b> (

]]></left><right><param><name><![CDATA[method]]></name>:<type><![CDATA[Function]]></type></param>,
<param><name><![CDATA[type]]></name>:<type><![CDATA[Function]]></type></param>) : <![CDATA[String]]></right></fullMethod>
<description>
<text><![CDATA[Returns the name of the <code>method</code> on the <code>type</code>.<p><code>null</code> will be returned if:<ul><li>The passed-in <code>method</code> or <code>type</code> are <code>null</code></li><li>The <code>method</code> does not exist on the <code>type</code>.</li></ul>]]></text>
</description>
<fields>
<field><title><![CDATA[Parameters]]></title>
<param><name><![CDATA[method]]></name><description><![CDATA[the method to get the name of]]></description></param>
<param><name><![CDATA[type  ]]></name><description><![CDATA[the type that implements the <code>method</code>]]></description></param>
</field>
<field><title><![CDATA[Returns]]></title><description><![CDATA[the name of the <code>method</code> or <code>null</code>]]></description></field>
</fields>
</method>
<method>
<title><![CDATA[getTypeAndMethodInfo]]></title><fullMethod><left><![CDATA[static function <b>getTypeAndMethodInfo</b> (

]]></left><right><param><name><![CDATA[object]]></name></param>,
<param><name><![CDATA[method]]></name>:<type><![CDATA[Function]]></type></param>) : <![CDATA[Array]]></right></fullMethod>
<fields>
<field><title><![CDATA[Overloading]]></title><description><![CDATA[<a href="org_as2lib_env_reflect_ReflectUtil.html#getTypeAndMethodInfoByType">getTypeAndMethodInfoByType</a> <code>(type:Function, method:Function) : Array</code><br /><a href="org_as2lib_env_reflect_ReflectUtil.html#getTypeAndMethodInfoByInstance">getTypeAndMethodInfoByInstance</a> <code>(instance, method:Function) : Array</code>]]></description></field>
</fields>
</method>
<method>
<title><![CDATA[getTypeAndMethodInfoByInstance]]></title><fullMethod><left><![CDATA[static function <b>getTypeAndMethodInfoByInstance</b> (

]]></left><right><param><name><![CDATA[instance]]></name></param>,
<param><name><![CDATA[method]]></name>:<type><![CDATA[Function]]></type></param>) : <![CDATA[Array]]></right></fullMethod>
<description>
<text><![CDATA[Returns an array that contains the passed-in <code>method</code>'s scope, the name
 of the type that declares the method and the name of the method itself.<p>The type that declares the <code>method</code> must not be the direct type of the
 passed-in <code>instance</code>. It may also be a super-type of this type.<p><code>null</code> will be returned if the passed-in <code>type</code> is <code>null</code>.]]></text>
</description>
<fields>
<field><title><![CDATA[Parameters]]></title>
<param><name><![CDATA[method  ]]></name><description><![CDATA[the method to return information about]]></description></param>
<param><name><![CDATA[instance]]></name><description><![CDATA[the instance of the type to start the search for the method]]></description></param>
</field>
<field><title><![CDATA[Returns]]></title><description><![CDATA[an array containing the passed-in <code>method</code>'s scope, the name of
 the declaring type and the passed-in <code>method</code>'s name]]></description></field>
</fields>
</method>
<method>
<title><![CDATA[getTypeAndMethodInfoByPrototype]]></title><fullMethod><left><![CDATA[static function <b>getTypeAndMethodInfoByPrototype</b> (

]]></left><right><param><name><![CDATA[p]]></name></param>,
<param><name><![CDATA[m]]></name>:<type><![CDATA[Function]]></type></param>) : <![CDATA[Array]]></right></fullMethod>
<description>
<text><![CDATA[Returns an array that contains the passed-in method's <code>m</code> scope, the name
 of the type that declares the method and the name of the method itself.<p>The type that declares the method must not be the direct type of the
 passed-in prototype <code>p</code>. It may also be a super-type of this type.<p><code>null</code> will be returned if the passed-in prototype is <code>null</code>.]]></text>
</description>
<fields>
<field><title><![CDATA[Parameters]]></title>
<param><name><![CDATA[m]]></name><description><![CDATA[the method to return information about]]></description></param>
<param><name><![CDATA[p]]></name><description><![CDATA[the beginning of the prototype chain to search through]]></description></param>
</field>
<field><title><![CDATA[Returns]]></title><description><![CDATA[an array containing the passed-in method's scope, the name of the
 declaring type and the passed-in method's name]]></description></field>
</fields>
</method>
<method>
<title><![CDATA[getTypeAndMethodInfoByType]]></title><fullMethod><left><![CDATA[static function <b>getTypeAndMethodInfoByType</b> (

]]></left><right><param><name><![CDATA[type]]></name>:<type><![CDATA[Function]]></type></param>,
<param><name><![CDATA[method]]></name>:<type><![CDATA[Function]]></type></param>) : <![CDATA[Array]]></right></fullMethod>
<description>
<text><![CDATA[Returns an array that contains the passed-in <code>method</code>'s scope, the name
 of the type that declares the method and the name of the method itself.<p>The type that declares the <code>method</code> must not be the passed-in <code>type</code>.
 It may also be a super-type of the passed-in <code>type</code>.<p><code>null</code> will be returned if the passed-in <code>type</code> is <code>null</code>.]]></text>
</description>
<fields>
<field><title><![CDATA[Parameters]]></title>
<param><name><![CDATA[method]]></name><description><![CDATA[the method to return information about]]></description></param>
<param><name><![CDATA[type  ]]></name><description><![CDATA[the type to start the search for the method]]></description></param>
</field>
<field><title><![CDATA[Returns]]></title><description><![CDATA[an array containing the passed-in <code>method</code>'s scope, the name of
 the declaring type and the passed-in <code>method</code>'s name]]></description></field>
</fields>
</method>
<method>
<title><![CDATA[getTypeName]]></title><fullMethod><left><![CDATA[static function <b>getTypeName</b> (
]]></left><right><param><name><![CDATA[object]]></name></param>) : <![CDATA[String]]></right></fullMethod>
<fields>
<field><title><![CDATA[Overloading]]></title><description><![CDATA[<a href="org_as2lib_env_reflect_ReflectUtil.html#getTypeNameForInstance">getTypeNameForInstance</a> <code>(instance) : String</code><br /><a href="org_as2lib_env_reflect_ReflectUtil.html#getTypeNameForType">getTypeNameForType</a> <code>(type:Function) : String</code>]]></description></field>
</fields>
</method>
<method>
<title><![CDATA[getTypeNameForInstance]]></title><fullMethod><left><![CDATA[static function <b>getTypeNameForInstance</b> (
]]></left><right><param><name><![CDATA[instance]]></name></param>) : <![CDATA[String]]></right></fullMethod>
<description>
<text><![CDATA[Returns the name of the type, the passed-in object is an instance of.<p><code>null</code> will be returned if:<ul><li>The passed-in <code>instance</code> is <code>null</code> or <code>undefined</code>.</li><li>The appropriate type could not be found in <code>_global</code>.</li></ul>]]></text>
</description>
<fields>
<field><title><![CDATA[Parameters]]></title>
<param><name><![CDATA[instance]]></name><description><![CDATA[the instance of the type to return the name of]]></description></param>
</field>
<field><title><![CDATA[Returns]]></title><description><![CDATA[the name of the type of the instance or <code>null</code>]]></description></field>
</fields>
</method>
<method>
<title><private><![CDATA[getTypeNameForPrototype]]></private></title><private><![CDATA[private]]></private><fullMethod><left><![CDATA[static function <b>getTypeNameForPrototype</b> (



]]></left><right><param><name><![CDATA[c]]></name></param>,
<param><name><![CDATA[p]]></name></param>,
<param><name><![CDATA[n]]></name>:<type><![CDATA[String]]></type></param>,
<param><name><![CDATA[a]]></name>:<type><![CDATA[Array]]></type></param>) : <![CDATA[String]]></right></fullMethod>
<description>
<text><![CDATA[Searches for the passed-in <code>c</code> (prototype) in the passed-in {code p}
 (package) and sub-packages and returns the name of the type that declares the
 prototype.<p><code>null</code> will be returned if:<ul><li>The prototype or package is <code>null</code> or <code>undefined</code></li><li>The type defining the prototype could not be found.</li></ul>]]></text>
</description>
<fields>
<field><title><![CDATA[Parameters]]></title>
<param><name><![CDATA[c]]></name><description><![CDATA[the prototype to search for]]></description></param>
<param><name><![CDATA[p]]></name><description><![CDATA[the package to find the type that defines the prototype in]]></description></param>
<param><name><![CDATA[n]]></name><description><![CDATA[the name of the preceding path separated by periods]]></description></param>
<param><name><![CDATA[a]]></name><description><![CDATA[already searched through packages]]></description></param>
</field>
<field><title><![CDATA[Returns]]></title><description><![CDATA[the name of the type defining the prototype of <code>null</code>]]></description></field>
</fields>
</method>
<method>
<title><![CDATA[getTypeNameForType]]></title><fullMethod><left><![CDATA[static function <b>getTypeNameForType</b> (
]]></left><right><param><name><![CDATA[type]]></name>:<type><![CDATA[Function]]></type></param>) : <![CDATA[String]]></right></fullMethod>
<description>
<text><![CDATA[Returns the name of the passed-in <code>type</code>.<p><code>null</code> will be returned if:<ul><li>The passed-in <code>type</code> is <code>null</code> or <code>undefined</code>.</li><li>The <code>type</code> could not be found in <code>_global</code>.</li></ul>]]></text>
</description>
<fields>
<field><title><![CDATA[Parameters]]></title>
<param><name><![CDATA[type]]></name><description><![CDATA[the type to return the name of]]></description></param>
</field>
<field><title><![CDATA[Returns]]></title><description><![CDATA[the name of the passed-in <code>type</code> or <code>null</code>]]></description></field>
</fields>
</method>
<method>
<title><![CDATA[getUnusedMemberName]]></title><fullMethod><left><![CDATA[static function <b>getUnusedMemberName</b> (
]]></left><right><param><name><![CDATA[object]]></name></param>) : <![CDATA[String]]></right></fullMethod>
<description>
<text><![CDATA[Searches for a member name that is currently not used.<p>Uses <a href="org_as2lib_env_reflect_ReflectUtil.html#MEMBER_PREFIX">MEMBER_PREFIX</a> and a number from 1 to 10000 with two variants to
 find a member name that is currently not used (20.000 possible variants).]]></text>
</description>
<fields>
<field><title><![CDATA[Parameters]]></title>
<param><name><![CDATA[object]]></name><description><![CDATA[the object to find an unused member name in]]></description></param>
</field>
<field><title><![CDATA[Returns]]></title><description><![CDATA[the name of the unused member or <code>null</code> if all names are already
 reserved]]></description></field>
</fields>
</method>
<method>
<title><![CDATA[getVariableNames]]></title><fullMethod><left><![CDATA[static function <b>getVariableNames</b> (
]]></left><right><param><name><![CDATA[instance]]></name></param>) : <![CDATA[Array]]></right></fullMethod>
<description>
<text><![CDATA[Returns an array that contains the names of the variables of the passed-in
 <code>instance</code> as <code>String</code>s.<p>The resulting array contains all variables' names even those hidden from
 for..in loops. Excluded are only <code>"__proto__"</code>, <code>"prototype"</code>,
 <code>"__constructor__"</code> and <code>"constructor"</code> and members that are of
 type <code>"function"</code>.<p>Note that it is not possible to get variables that have been declared in the
 class but have not been initialized yet. These variables' names are thus not
 contained in the resulting array.<p>This method will never return <code>null</code>. If the passed-in <code>instance</code>
 has no variables an empty array will be returned.]]></text>
</description>
<fields>
<field><title><![CDATA[Parameters]]></title>
<param><name><![CDATA[instance]]></name><description><![CDATA[the instance whose varaibles to return]]></description></param>
</field>
<field><title><![CDATA[Returns]]></title><description><![CDATA[all initialized variables of the passed-in <code>instance</code>]]></description></field>
</fields>
</method>
<method>
<title><![CDATA[isConstructor]]></title><fullMethod><left><![CDATA[static function <b>isConstructor</b> (

]]></left><right><param><name><![CDATA[constructor]]></name>:<type><![CDATA[Function]]></type></param>,
<param><name><![CDATA[object]]></name></param>) : <![CDATA[Boolean]]></right></fullMethod>
<fields>
<field><title><![CDATA[Overloading]]></title><description><![CDATA[<a href="org_as2lib_env_reflect_ReflectUtil.html#isConstructorByInstance">isConstructorByInstance</a> <code>(method:Function, instance) : Boolean</code><br /><a href="org_as2lib_env_reflect_ReflectUtil.html#isConstructorByType">isConstructorByType</a> <code>(method:Function, type:Function) : Boolean</code>]]></description></field>
</fields>
</method>
<method>
<title><![CDATA[isConstructorByInstance]]></title><fullMethod><left><![CDATA[static function <b>isConstructorByInstance</b> (

]]></left><right><param><name><![CDATA[method]]></name>:<type><![CDATA[Function]]></type></param>,
<param><name><![CDATA[instance]]></name></param>) : <![CDATA[Boolean]]></right></fullMethod>
<description>
<text><![CDATA[Returns whether the passed-in <code>method</code> is the constructor of the passed-in
 <code>instance</code>.<p><code>false</code> will always be returned if the passed-in <code>method</code> is
 <code>null</code> or if the passed-in <code>instance</code> is <code>null</code>.]]></text>
</description>
<fields>
<field><title><![CDATA[Parameters]]></title>
<param><name><![CDATA[method  ]]></name><description><![CDATA[the method to check whether it is the constructor of the passed-in
 <code>instance</code>]]></description></param>
<param><name><![CDATA[instance]]></name><description><![CDATA[the instance that might be instantiated by the passed-in <code>method</code>]]></description></param>
</field>
<field><title><![CDATA[Returns]]></title><description><![CDATA[<code>true</code> if <code>method</code> is the constructor of <code>instance</code>
 else <code>false</code>]]></description></field>
</fields>
</method>
<method>
<title><![CDATA[isConstructorByType]]></title><fullMethod><left><![CDATA[static function <b>isConstructorByType</b> (

]]></left><right><param><name><![CDATA[method]]></name>:<type><![CDATA[Function]]></type></param>,
<param><name><![CDATA[type]]></name>:<type><![CDATA[Function]]></type></param>) : <![CDATA[Boolean]]></right></fullMethod>
<description>
<text><![CDATA[Returns whether the passed-in <code>method</code> is the constructor of the passed-in
 <code>type</code>.<p>Note that in Flash the constructor is the same as the type.<p><code>false</code> will always be returned if the passed-in <code>method</code> is
 <code>null</code> or if the passed-in <code>type</code> is <code>null</code>.]]></text>
</description>
<fields>
<field><title><![CDATA[Parameters]]></title>
<param><name><![CDATA[method]]></name><description><![CDATA[the method to check whether it is the constructor of the passed-in
 <code>type</code>]]></description></param>
<param><name><![CDATA[type  ]]></name><description><![CDATA[the type that might declare the passed-in <code>method</code> as constructor]]></description></param>
</field>
<field><title><![CDATA[Returns]]></title><description><![CDATA[<code>true</code> if <code>method</code> is the constructor of <code>type</code> else
 <code>false</code>]]></description></field>
</fields>
</method>
<method>
<title><![CDATA[isMethodStatic]]></title><fullMethod><left><![CDATA[static function <b>isMethodStatic</b> (

]]></left><right><param><name><![CDATA[methodName]]></name>:<type><![CDATA[String]]></type></param>,
<param><name><![CDATA[object]]></name></param>) : <![CDATA[Boolean]]></right></fullMethod>
<fields>
<field><title><![CDATA[Overloading]]></title><description><![CDATA[<a href="org_as2lib_env_reflect_ReflectUtil.html#isMethodStaticByInstance">isMethodStaticByInstance</a> <code>(methodName:String, instance) : Boolean</code><br /><a href="org_as2lib_env_reflect_ReflectUtil.html#isMethodStaticByType">isMethodStaticByType</a> <code>(methodName:String, type:Function) : Boolean</code>]]></description></field>
</fields>
</method>
<method>
<title><![CDATA[isMethodStaticByInstance]]></title><fullMethod><left><![CDATA[static function <b>isMethodStaticByInstance</b> (

]]></left><right><param><name><![CDATA[methodName]]></name>:<type><![CDATA[String]]></type></param>,
<param><name><![CDATA[instance]]></name></param>) : <![CDATA[Boolean]]></right></fullMethod>
<description>
<text><![CDATA[Returns whether the method with the passed-in <code>methodName</code> is static, that
 means a per type method.<p><code>false</code> will always be returned if the passed-in <code>methodName</code> is
 <code>null</code> or an empty string or if the passed-in <code>instance</code> is <code>null</code>.]]></text>
</description>
<fields>
<field><title><![CDATA[Parameters]]></title>
<param><name><![CDATA[methodName]]></name><description><![CDATA[the name of the method to check whether it is static]]></description></param>
<param><name><![CDATA[instance  ]]></name><description><![CDATA[the instance of the type that implements the method]]></description></param>
</field>
<field><title><![CDATA[Returns]]></title><description><![CDATA[<code>true</code> if the method is static else <code>false</code>]]></description></field>
</fields>
</method>
<method>
<title><![CDATA[isMethodStaticByType]]></title><fullMethod><left><![CDATA[static function <b>isMethodStaticByType</b> (

]]></left><right><param><name><![CDATA[methodName]]></name>:<type><![CDATA[String]]></type></param>,
<param><name><![CDATA[type]]></name>:<type><![CDATA[Function]]></type></param>) : <![CDATA[Boolean]]></right></fullMethod>
<description>
<text><![CDATA[Returns whether the method with the passed-in <code>methodName</code> is static, that
 means a per type method.<p><code>false</code> will always be returned if the passed-in <code>methodName</code> is
 <code>null</code> or an empty string or if the passed-in <code>type</code> is <code>null</code>.]]></text>
</description>
<fields>
<field><title><![CDATA[Parameters]]></title>
<param><name><![CDATA[methodName]]></name><description><![CDATA[the name of the method to check whether it is static]]></description></param>
<param><name><![CDATA[type      ]]></name><description><![CDATA[the type that implements the method]]></description></param>
</field>
<field><title><![CDATA[Returns]]></title><description><![CDATA[<code>true</code> if the method is static else <code>false</code>]]></description></field>
</fields>
</method>
</methodSection>
</methodSections>
<footer><copyright><![CDATA[2005 as2lib]]></copyright>
<date><![CDATA[Tuesday, 31 May 2005, 20:28:41]]>
</date><showTOC>show TOC</showTOC><hideTOC>hide TOC</hideTOC><showPrivate>show private members</showPrivate><hidePrivate>hide private members</hidePrivate>
</footer>
</document>