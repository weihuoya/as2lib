<?xml version="1.0" encoding="utf-8"?>
<document>
<cssFile><![CDATA[css/VisDoc.css]]></cssFile>
<title><![CDATA[FatalException]]></title>
<classDocScript />
<classData>
<inheritsFrom>
<title><![CDATA[Inherits from]]></title><item><link><name><![CDATA[AbstractThrowable]]></name><uri><![CDATA[org_as2lib_env_except_AbstractThrowable]]></uri></link></item><item><link><name><![CDATA[Error]]></name></link></item>
</inheritsFrom>
<conformsTo>
<title><![CDATA[Implements]]></title><item><link><name><![CDATA[Throwable]]></name><uri><![CDATA[org_as2lib_env_except_Throwable]]></uri></link></item>
</conformsTo>
<classDetails>
<item><title><![CDATA[Author]]></title><value><![CDATA[Simon Wacker]]></value></item>
<item><title><![CDATA[Classpath]]></title><value><![CDATA[org.as2lib.env.except.FatalException]]></value></item>
<item><title><![CDATA[File last modified]]></title><value><![CDATA[Saturday, 28 May 2005, 12:11:00]]></value></item>
</classDetails>
<classDescription><summary><![CDATA[<code>FatalException</code> is a default implementation of the <code>Throwable</code>
 interface.]]></summary><restOfDescription><![CDATA[<p>It differs from the <a href="org_as2lib_env_except_Exception.html">Exception</a> class in that it marks the throwable as
 fatal. That means it differs from a normal <code>Exception</code> in its fatality.<p>It also uses the <code>Logger.fatal</code> method to log itself, while the
 <code>Exception</code> class uses the <code>Logger.error</code> method.<p>Example:<pre><span class="codeKeyword">throw</span> <span class="codeKeyword">new</span> FatalException(<span class="codeString">"This is a detailed message that explains the problem."</span>, <span class="codeIdentifier">this</span>, arguments);</pre><p>The above example is supposed to be in a method, that has been declared on a
 class.<p>Note that you normally do not throw instances of this class directly. It is
 better to sub-class it, that means to create a custom exception, that explains its
 purpose more closely by its name, and throw this exception instead.<p>If you are building a framework that shall be reused it is also helpful to built
 a exception inheritance hierarchy, where you have one base class. You can then
 categorize different exceptions by their inheritance hierarchy. This enables you to
 catch all exceptions from your whole framework or only from specific parts of your
 framework.<p>For a detailed explanation on how to use throwables, what this exception
 framework offers you and how to work appropriately with throwables take a look at
 the class documentation of the <code>Throwable</code> interface.]]></restOfDescription>
</classDescription>
</classData>
<pageSummary>
<methodList>
<title><![CDATA[Summary]]></title>
<methodSummaryPart>
<title><![CDATA[Constructor]]></title>
<item><![CDATA[FatalException]]></item>
</methodSummaryPart>
<methodSummaryPart>
<title><![CDATA[Class methods]]></title>
<inheritedMethods>
<fromClass><title><text><![CDATA[Class methods inherited from]]></text><link><name><![CDATA[AbstractThrowable]]></name><uri><![CDATA[org_as2lib_env_except_AbstractThrowable]]></uri></link></title><item><link><name>getStringifier</name><uri>org_as2lib_env_except_AbstractThrowable</uri><method>getStringifier</method></link></item><item><link><name>setStringifier</name><uri>org_as2lib_env_except_AbstractThrowable</uri><method>setStringifier</method></link></item></fromClass>
</inheritedMethods>
</methodSummaryPart>
<methodSummaryPart>
<title><![CDATA[Instance methods]]></title>
<item><![CDATA[toString]]></item>
<inheritedMethods>
<fromClass><title><text><![CDATA[Instance methods inherited from]]></text><link><name><![CDATA[AbstractThrowable]]></name><uri><![CDATA[org_as2lib_env_except_AbstractThrowable]]></uri></link></title><item><link><name>addStackTraceElement</name><uri>org_as2lib_env_except_AbstractThrowable</uri><method>addStackTraceElement</method></link></item><item><link><name>getCause</name><uri>org_as2lib_env_except_AbstractThrowable</uri><method>getCause</method></link></item><item><link><name>getMessage</name><uri>org_as2lib_env_except_AbstractThrowable</uri><method>getMessage</method></link></item><item><link><name>getStackTrace</name><uri>org_as2lib_env_except_AbstractThrowable</uri><method>getStackTrace</method></link></item><item><link><name>initCause</name><uri>org_as2lib_env_except_AbstractThrowable</uri><method>initCause</method></link></item></fromClass>
</inheritedMethods>
</methodSummaryPart>
</methodList>
</pageSummary>
<methodSections>
<methodSection>
<title><![CDATA[Constructor]]></title>
<method>
<title><![CDATA[FatalException]]></title><fullMethod><left><![CDATA[function <b>FatalException</b> (


]]></left><right><param><name><![CDATA[message]]></name>:<type><![CDATA[String]]></type></param>,
<param><name><![CDATA[thrower]]></name></param>,
<param><name><![CDATA[args]]></name>:<type><![CDATA[Array]]></type></param>)</right></fullMethod>
<description>
<text><![CDATA[Constructs a new <code>FatalException</code> instance.<p>All arguments are allowed to be <code>null</code> or <code>undefined</code>. But if
 one is, the string representation returned by the <code>toString</code> method will
 not be complete.<p>The <code>args</code> array should be the internal arguments array of the method
 that throws the throwable. The internal arguments array exists in every method
 and contains its parameters, the callee method and the caller method. You can
 refernce it in every method using the name <code>"arguments"</code>.]]></text>
</description>
<fields>
<field><title><![CDATA[Parameters]]></title>
<param><name><![CDATA[message]]></name><description><![CDATA[the message that describes the problem in detail]]></description></param>
<param><name><![CDATA[thrower]]></name><description><![CDATA[the object that declares the method that throws this fatal
 exception]]></description></param>
<param><name><![CDATA[args   ]]></name><description><![CDATA[the arguments of the throwing method]]></description></param>
</field>
<field><title><![CDATA[Overrides]]></title><description><![CDATA[<a href="org_as2lib_env_except_AbstractThrowable.html#AbstractThrowable">AbstractThrowable.AbstractThrowable</a>]]></description></field>
</fields>
</method>
</methodSection>
<methodSection>
<title><![CDATA[Instance methods]]></title>
<method>
<title><![CDATA[toString]]></title><fullMethod><left><![CDATA[function <b>toString</b> (
]]></left><right>) : <![CDATA[String]]></right></fullMethod>
<description>
<text><![CDATA[Returns the string representation of this fatal exception.<p>If you do not call this method out of another method, it also executes the
 <code>fatal</code> method of the logger returned by the
 <a href="org_as2lib_env_except_AbstractThrowable.html#getLogger">AbstractThrowable.getLogger</a> method passing <code>this</code> because it thinks
 that the virtual machine called this method.<p>The string representation is obtained via the invocation of the
 <a href="org_as2lib_env_except_AbstractThrowable.html#doToString">AbstractThrowable.doToString</a> method that uses the stringifier returned
 by the static <a href="org_as2lib_env_except_AbstractThrowable.html#getStringifier">AbstractThrowable.getStringifier</a> method.<p>If you want to change the appearance of all exceptions set a new stringifier
 via the static <a href="org_as2lib_env_except_AbstractThrowable.html#setStringifier">AbstractThrowable.setStringifier</a> method.<p>If you only want to change the string representation of one exception and
 its sub-classes overwrite the <code>doToString</code> method in your custom
 exception.<p>Do not overwrite this method because you will lose the functionality that
 invokes the logger when the exception has not been caught and has now reached
 the final 'level', the virtual machine, that invokes this method.]]></text>
</description>
<fields>
<field><title><![CDATA[Returns]]></title><description><![CDATA[the string representation of this fatal exception]]></description></field>
<field><title><![CDATA[Specified by]]></title><description><![CDATA[<a href="org_as2lib_core_BasicInterface.html#toString">org.as2lib.core.BasicInterface.toString</a>]]></description></field>
</fields>
</method>
</methodSection>
</methodSections>
<footer><copyright><![CDATA[2005 as2lib]]></copyright>
<date><![CDATA[Tuesday, 31 May 2005, 20:27:03]]>
</date><showTOC>show TOC</showTOC><hideTOC>hide TOC</hideTOC><showPrivate>show private members</showPrivate><hidePrivate>hide private members</hidePrivate>
</footer>
</document>