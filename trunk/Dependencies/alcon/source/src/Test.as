import net.hiddenresource.util.debug.Debug;/** * Test Class * Tests the imported Debug class when used with Debug.trace(). * @version	1.0.0 (09.02.2006) */class Test{		private var test_obj:Object;	private var test_arr:Array;	private var loadText:LoadVars;			/**	 * Program entry point.	 */	public static function main():Void	{		var newTest:Test = new Test();	}			/**	 * Constructor.	 */	public function Test()	{		Debug.setFilterLevel(0);				Debug.trace("<html>text</html>");		Debug.trace("ampersand: &amp;");		Debug.trace("quotation mark: &quot;");		Debug.trace("lt: &lt;");		Debug.trace("gt: &gt;");		Debug.trace("[%LV0%]copy: &copy;");		// Create some nonsense test object:		test_obj = new Object();		test_obj.props1 = new Object();		test_obj.props1.name = "Talia";		test_obj.props1.age = 27;		test_obj.props1.physic = "average";		test_obj.props2 = new Object();		test_obj.props2.name = "Ronny";		test_obj.props2.age = 32;		test_obj.props2.physic = "fit";				// Create a test Array:		test_arr = new Array();		test_arr = [["Sandrine", 19], ["Charlene", 28], ["Apnea", 26], ["Millie", 23], ["Sophie", 24], ["Kayla", 21]];				//largeText();		test();	}			/**	 * Test loop.	 */	private function test():Void	{		var ref:Test = this;				_root.onEnterFrame = function():Void		{			var rnd:Number = Math.floor(Math.random() * 100);			switch (rnd)			{				case 12:					Debug.trace("日本語テキストにほんごてきすと。");					break;				case 11:					Debug.delimiter();					break;				case 10:					Debug.trace(ref.test_arr, true);					break;				case 9:					Debug.trace(this);					break;				case 8:					Debug.trace(ref.test_obj, 0, true);					break;				case 7:					Debug.trace(Math.PI);					break;				case 6:					Debug.trace("_root.txt: " + _root.txt);					break;				case 5:					Debug.trace("This is usual output information without a given level.");					break;				case 4:					Debug.trace("A non-recoverable problem occured.", 4);					break;				case 3:					Debug.trace("An error occured!", 3);					break;				case 2:					Debug.trace("This is a warning message!", 2);					break;				case 1:					Debug.trace("A general bit of application information.", 1);					break;				case 0:					Debug.trace("This is a piece of debug information.", 0);					break;			}		};	}			/**	 * Handle larger text.	 */	private function largeText():Void	{		// Load in some longer text:		loadText = new LoadVars();		loadText.onData = function(txt:String):Void		{			Debug.trace(txt.split("\n").join(""));		};		loadText.load("Test.txt");	}}