interface org.as2lib.basic.BasicInterface { 
      
     /** 
      * Returns a Class generated by the acutal instance. 
      *  
      * @throws org.as2lib.basic.reflect.ReferenceNotFoundException if no reference from the class was found. 
      */ 
     public function getClass():org.as2lib.reflect.ClassInfo; 
}

interface org.as2lib.basic.Cloneable {
      /** 
      * Returns a clone from actually used Object 
      *  
      * @throws org.as2lib.basic.CloneNotSupportedException if the object was not possible to clone. 
      */ 
     public function clone():Object; 
}

interface org.as2lib.basic.Overloading {
     /** 
      * Processes the overloading, finds a matching type within the TypeArray 
      * 
      * @param 
      * @param
      *
      * @throws  
      */ 
     public function overload(args:Array, overloadHandlers:TypedArray):Void; 
      
     /** 
      * Factory to create a new Overloadhandler simplyfies the access. 
      * 
      * @param 
      */ 
     public function createOverloadHandler(matches:TypedArray,forwardsTo:Function):OverloadHandler;
}
 
class org.as2lib.basic.BasicClass implements org.as2lib.basic.BasicInterface {}
 
 
interface org.as2lib.basic.reflect.ClassInfo { 
      
     /** 
      *  
      */ 
     public function getName(Void):String; 
     
     public function setName(to:String):Void;
     
     /** 
      *  
      */ 
     public function getConstructor(Void):Function; 
     
     /** 
      *  
      */ 
     public function newInstance(Void):Object; 
      
     /** 
      * Returns a TypedArray from type String containing all Vars that an Instance of this class has. 
      */ 
     public function getVars(Void):TypedArray; 
     
     public function setVars(to:TypedArray):Void;
     
     /** 
      * Returns a TypedArray from type MethodInfo containing all Methods that an Instance of this class has. 
      */ 
     public function getMethods(Void):TypedArray; 
     
     public function setMethods(to:TypedArray):Void;
      
     /** 
      * Returns a TypedArray from type String containing all Vars that the Class has. 
      */ 
     public function getStaticVars(Void):TypedArray; 
     
     public function setStaticVars(to:TypedArray):Void;
      
     /** 
      * Returns a TypedArray from type MethodInfo containing all Methods that the Class has. 
      */ 
     public function getStaticMethods(Void):TypedArray; 
     
     public function setStaticMethods(to:TypedArray):Void;
 
} 
 
interface org.as2lib.basic.OverloadHandler { 
     /** 
      * Returns true if the usedArguments 
      */ 
     public function matches (args:Array):Boolean;
      
     /** 
      * Executes  
      */ 
     public function execute (target:Object, args:Array):Void; 
} 
 
class org.as2lib.basic.SimpleOverloadHandler implements org.as2lib.basic.OverloadHandler {} 
 
interface org.as2lib.basic.reflect.MethodInfo { 
     public function getName():String; 
     public function getMethod():Function; 
     public function getDeclaringClass():ClassInfo; 
} 
 
class org.as2lib.basic.reflect.SimpleMethodInfo implements org.as2lib.basic.reflect.MethodInfo {} 

interface org.as2lib.basic.Cloneable {
     public function clone():Object;
}

class org.as2lib.basic.Exception extends Error implements BasicInterface {
     public function toString():String;
     public function getStack():Stack;
     public function getStackTrace():String;
     public function initCause(e:Exception):Void;
     public function getCause():Exception;
     public function getMessage():String;
     public function getClass():ClassInfo;
}