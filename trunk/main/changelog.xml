<?xml version="1.0" encoding="utf-8"?>
<changelog xmlns="as2lib"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="aslib http://www.as2lib.org/changelog_0.91.xsd">
  <release name="as2lib 0.1 rc1" day="1" month="1" year="2004">
    <year value="2005">
       <month value="3">
         <day value="3">
           <entry type="add" package="org.as2lib.env.log.handler" class="AlconHandler">Handler support for Alcon.</entry>
           <entry type="add" package="org.as2lib.env.log.logger" class="AlconLogger">Logger support for Alcon.</entry>
         </day>
         <day value="1">
           <entry type="add" package="org.as2lib.env.log.handler" class="AscbHandler">Handler support for ASCB Logging API.</entry>
           <entry type="add" package="org.as2lib.env.log.logger" class="AscbLogger">Logger support for ASCB Logging API.</entry>
           <entry type="add" package="org.as2lib.env.log.handler" class="FlashoutHandler">Handler support for Flashout.</entry>
           <entry type="add" package="org.as2lib.env.log.logger" class="FlashoutLogger">Logger support for Flashout.</entry>
           <entry type="remove" package="org.as2lib.env.log" class="Logger" method="getLevel">Unbinds the general interface from the 'LogLevel' class.</entry>
           <entry type="remove" package="org.as2lib.env.log" class="Logger" method="log">Unbinds the general interface from the 'LogLevel' class.</entry>
           <entry type="remove" package="org.as2lib.env.log" class="Logger" method="isEnabled">Unbinds the general interface from the 'LogLevel' class.</entry>
         </day>
         <day value="31">
           <entry type="add" package="org.as2lib.env.log.handler" class="LuminicBoxHandler">Support for LuminicBox Logging Console.</entry>
           <entry type="add" package="org.as2lib.env.log.logger" class="LuminicBoxLogger">Support for whole LuminicBox Logging API.</entry>
         </day>
         <day value="29">
           <entry type="add" package="org.as2lib.util" class="DateFormatter">Formats a date according to a string pattern.</entry>
         </day>
         <day value="26">
           <entry type="change" package="static org.as2lib.env.reflect" class="ReflectConfig" method="get-/setRootPackage"><change-move to="PackageInfo" /></entry>
           <entry type="change" package="org.as2lib.env.except" class="Throwable" method="initCause(cause:Throwable):Void"><change-arguments to="cause:*" /></entry>
           <entry type="change" package="org.as2lib.env.except" class="Throwable" method="getCause(Void):Throwable"><change-returnType to="*" /></entry>
           <entry type="change" package="org.as2lib.test.mock" class="Behavior" method="removeAllBehavior"><change-rename to="removeAllBehaviors" /></entry>
           <entry type="change" package="org.as2lib.env.event" class="EventBroadcaster" method="removeAllListener"><change-rename to="removeAllListeners" /></entry>
           <entry type="change" package="org.as2lib.env.event" class="EventBroadcaster" method="addAllListener"><change-rename to="addAllListeners" /></entry>
           <entry type="change" package="org.as2lib.env.event" class="EventBroadcaster" method="getAllListener"><change-rename to="getAllListeners" /></entry>
           <entry type="change" package="org.as2lib.env.log" class="HierarchicalLogger" method="getAllHandler"><change-rename to="getAllHandlers" /></entry>
           <entry type="change" package="org.as2lib.env.log" class="ConfigurableLogger" method="removeAllHandler"><change-rename to="removeAllHandlers" /></entry>
           <entry type="change" package="org.as2lib.env.log" class="ConfigurableLogger" method="getAllHandler"><change-rename to="getAllHandlers" /></entry>
         </day>
       </month>
       <month value="2">
         <day value="27">
           <entry type="add" package="org.as2lib.env.reflect" class="PackageNotFoundException"></entry>
           <entry type="add" package="org.as2lib.env.reflect" class="ClassNotFoundException"></entry>
           <entry type="add" package="org.as2lib.env.reflect" class="NoSuchPropertyException"></entry>
           <entry type="add" package="org.as2lib.env.reflect" class="NoSuchMethodException"></entry>
           <entry type="add" package="org.as2lib.env.reflect" class="ReflectionException">Base exception of all exception regarding reflections.</entry>
           <entry type="change" package="static org.as2lib.env.reflect" class="ReflectConfig" method="set-/getPackageMemberAlgorithm"><change-move to="PackageInfo" /></entry>
           <entry type="change" package="static org.as2lib.env.reflect" class="ReflectConfig" method="set-/getPackageAlgorithm"><change-move to="PackageInfo" /></entry>
           <entry type="change" package="static org.as2lib.env.reflect" class="ReflectConfig" method="set-/getPropertyAlgorithm"><change-move to="ClassInfo" /></entry>
           <entry type="change" package="static org.as2lib.env.reflect" class="ReflectConfig" method="set-/getMethodAlgorithm"><change-move to="ClassInfo" /></entry>
           <entry type="change" package="static org.as2lib.env.reflect" class="ReflectConfig" method="set-/getClassAlgorithm"><change-move to="ClassInfo" /></entry>
           <entry type="remove" package="org.as2lib.env.reflect" class="PackageInfo" method="set-/getPackageMemberAlgorithm"></entry>
           <entry type="remove" package="org.as2lib.env.reflect" class="ClassInfo" method="set-/getClassAlgorithm"></entry>
           <entry type="remove" package="org.as2lib.env.reflect" class="ClassInfo" method="set-/getMethodAlgorithm"></entry>
           <entry type="remove" package="org.as2lib.env.reflect" class="ClassInfo" method="set-/getPropertyAlgorithm"></entry>
         </day>
         <day value="20">
           <entry type="change" package="static org.as2lib.util" class="AccessPermission" variable="NOTHING_ALLOWED"><change-rename to="ALLOW_NOTHING" /></entry>
           <entry type="change" package="static org.as2lib.util" class="AccessPermission" variable="IS_HIDDEN"><change-rename to="HIDE" /></entry>
           <entry type="change" package="static org.as2lib.util" class="AccessPermission" variable="ALL_ALLOWED"><change-rename to="ALLOW_ALL" /></entry>
         </day>
         <day value="18">
           <entry type="change" package="org.as2lib.env.overload" class="OverloadHandler" method="getArguments"><change-rename to="getArgumentsTypes" /></entry>
         </day>
         <day value="17">
           <entry type="change" package="org.as2lib.env.reflect" class="ClassInfo" method="getParent"><change-rename to="getPackage" /></entry>
           <entry type="add" package="org.as2lib.env.reflect" class="TypeInfo" method="getPackage(Void):PackageInfo"></entry>
           <entry type="remove" package="org.as2lib.env.reflect" class="PackageMemberInfo" method="getParent"></entry>
           <entry type="add" package="org.as2lib.env.log.logger" class="AbstractLogger">Provides common functionalities normally needed by loggers.</entry>
         </day>
         <day value="16">
           <entry type="add" package="org.as2lib.env.log.repository" class="LoggerFactory"></entry>
           <entry type="add" package="org.as2lib.env.log.repository" class="DynamicLoggerRepository"></entry>
           <entry type="add" package="org.as2lib.env.log" class="LogManager" method="setLogger(Logger):Void">Offers easy to use support for singleton repositories.</entry>
           <entry type="add" package="org.as2lib.env.log.logger" class="SimpleHierarchicalLogger" method="new(name:String)">Added second optional constructor argument 'broadcaster:EventBroadcaster'.</entry>
           <entry type="remove" package="org.as2lib.env.log.logger" class="SimpleHierarchicalLogger" method="set-/getBroadcaster"></entry>
         </day>
         <day value="15">
           <entry type="change" package="org.as2lib.env.log.repository" class="LoggerHierarchy" method="putLogger"><change-rename to="addLogger" /></entry>
         </day>
         <day value="12">
           <entry type="remove" package="org.as2lib.env.reflect" class="ReflectException"></entry>
           <entry type="change" package="static org.as2lib.env.reflect" class="ReflectConfig" method="get-/setMethodInfoStringifier">Moved to MethodInfo class and renamed to get-/setStringifier.</entry>
           <entry type="change" package="org.as2lib.env.reflect" class="MethodInfo" method="applyTo"><change-rename to="invoke" /></entry>
           <entry type="add" package="org.as2lib.env.reflect" class="PackageInfo" method="getMembersByFlag(filterSubPackages:Boolean):Array">'filterSubPackages' defines whether members of sub-packages shall also be included in the result.</entry>
           <entry type="add" package="org.as2lib.env.reflect" class="PackageInfo" method="getMembersByFilter(PackageMemberFilter):Array">Let's you filter members with your own set of rules.</entry>
           <entry type="add" package="org.as2lib.env.reflect" class="PackageInfo" method="getMemberClassesByFlag(filterSubPackages:Boolean):Array">'filterSubPackages' defines whether member classes of sub-packages shall also be included in the result.</entry>
           <entry type="add" package="org.as2lib.env.reflect" class="PackageInfo" method="getMemberClassesByFilter(PackageMemberFilter):Array">Let's you filter member classes with your own set of rules.</entry>
           <entry type="add" package="org.as2lib.env.reflect" class="PackageInfo" method="getMemberPackagesByFlag(filterSubPackages:Boolean):Array">'filterSubPackages' defines whether member packages of sub-packages shall also be included in the result.</entry>
           <entry type="add" package="org.as2lib.env.reflect" class="PackageInfo" method="getMemberPackagesByFilter(PackageMemberFilter):Array">Let's you filter member packages with your own set of rules.></entry>
         </day>
         <day value="11">
           <entry type="add" package="org.as2lib.env.reflect" class="PackageMemberFilter">Filters/Excludes package members when searched for by e.g. the PackageInfo.getPackages or PackageInfo.getClasses methods.</entry>
           <entry type="change" package="org.as2lib.env.reflect" class="ReflectConfig" method="set-/getChildAlgorithm"><change-rename to="set-/getPackageMemberAlgorithm" /></entry>
           <entry type="change" package="org.as2lib.env.reflect.algorithm" class="ChildAlgorithm"><change-rename to="PackageMemberAlgorithm" /></entry>
           <entry type="change" package="org.as2lib.env.reflect" class="CompositeMemberInfo"><change-rename to="PackageMemberInfo" /></entry>
           <entry type="change" package="org.as2lib.env.reflect" class="PackageInfo" method="get-/setChildAlgorithm"><change-rename to="get-/setPackageMemberAlgorithm" /></entry>
           <entry type="change" package="org.as2lib.env.reflect" class="PackageInfo" method="getChildPackage"><change-rename to="getMemberPackage" /></entry>
           <entry type="change" package="org.as2lib.env.reflect" class="PackageInfo" method="getChildClass"><change-rename to="getMemberClass" /></entry>
           <entry type="change" package="org.as2lib.env.reflect" class="PackageInfo" method="getChildPackages"><change-rename to="getMemberPackages" /></entry>
           <entry type="change" package="org.as2lib.env.reflect" class="PackageInfo" method="getChildClasses"><change-rename to="getMemberClasses" /></entry>
         </day>
         <day value="9">
           <entry type="add" package="org.as2lib.env.reflect.algorithm" class="ClassAlgorithm" method="executeByName(String):ClassInfo">Returns a class info instance corresponding to the name.</entry>
           <entry type="add" package="org.as2lib.env.reflect" class="TypeInfo" method="getMethodsByFlag(filterSuperTypes:Boolean):Array">Excludes methods of super types when you pass-in true.</entry>
           <entry type="add" package="org.as2lib.env.reflect" class="TypeInfo" method="getMethodsByFilter(TypeMemberFilter):Array">Excludes the methods that do not pass the filter policies.</entry>
           <entry type="add" package="org.as2lib.env.reflect" class="ClassInfo" method="getPropertiesByFlag(filterSuperTypes:Boolean):Array">Excludes properties of super types when you pass-in true.</entry>
           <entry type="add" package="org.as2lib.env.reflect" class="ClassInfo" method="getPropertiesByFilter(TypeMemberFilter):Array">Excludes the properties that do not pass the filter policies.</entry>
         </day>
         <day value="8">
           <entry type="add" package="org.as2lib.env.reflect" class="TypeMemberFilter">Filters type members when searched for by e.g. the ClassInfo.getMethods() method.</entry>
           <entry type="add" package="org.as2lib.env.log" class="LogUtil">Offers the basic functionalities of a logger, but it is not directly dependent on the other parts of the logging api. See its documentation for more information.</entry>
           <entry type="add" package="org.as2lib.env.log" class="LogMessage" method="getLoggerName(Void):String">Returns the name of the logger that logs the message. The name is also included in the log output.</entry>
           <entry type="add" package="org.as2lib.env.log" class="LogManager" method="getLogger(String):Logger">Provides a simple access point to retrieve Logger instances.</entry>
           <entry type="change" package="org.as2lib.env.log" class="LogManager" method="get/-setRepository(..)"><change-rename to="get/-setLoggerRepository" /></entry>
           <entry type="change" package="org.as2lib.env.log" class="LoggerRepositoryManager"><change-rename to="LogManager" /></entry>
         </day>
         <day value="7">
           <entry type="add" package="org.as2lib.data.holder.list" class="ArrayList" method="new(Array)">Constructor that populates list with contents of passed-in array.</entry>
           <entry type="add" package="org.as2lib.data.holder.map" class="PrimitiveTypeMap" method="new(*)">Constructor that populates map with contents of passed-in object.</entry>
           <entry type="add" package="org.as2lib.data.holder.map" class="HashMap" method="new(*)">Constructor that populates map with contents of passed-in object.</entry>
           <entry type="add" package="org.as2lib.data.holder.queue" class="LinearQueue" method="new(Array)">Constructor that populates queue with contents of passed-in array.</entry>
           <entry type="remove" package="org.as2lib.util" class="ArrayUtil" method="toStack(..)">The SimpleStack's new constructor can be used now.</entry>
           <entry type="add" package="org.as2lib.data.holder.stack" class="SimpleStack" method="new(Array)">Constructor that populates stack with contents of passed-in array.</entry>
         </day>
         <day value="6">
           <entry type="add" package="org.as2lib.env.log.logger" class="SimpleLogger">Cannot be used in a hierarchy. Simple implementation of Logger interface.</entry>
           <entry type="change" package="org.as2lib.env.log.logger" class="SimpleLogger"><change-rename to="SimpleHierarchicalLogger" /></entry>
           <entry type="change" package="org.as2lib.util" class="ObjectUtil" method="setAccessPermission(..)">Moved and renamed to AccessPermission.set(..).</entry>
           <entry type="change" package="org.as2lib.util" class="ObjectUtil" method="getAccessPermission(..)">Moved and renamed to AccessPermission.get(..).</entry>
           <entry type="change" package="org.as2lib.util" class="ObjectUtil" method="isEnumerable(..)"><change-move to="AccessPermission" /></entry>
           <entry type="change" package="org.as2lib.util" class="ObjectUtil" method="isOverwritable(..)"><change-move to="AccessPermission" /></entry>
           <entry type="change" package="org.as2lib.util" class="ObjectUtil" method="isDeletable(..)"><change-move to="AccessPermission" /></entry>
           <entry type="change" package="org.as2lib.util" class="ObjectUtil" method="ACCESS_ALL_ALLOWED, ACCESS_IS_HIDDEN/ACCESS_PROTECT_DELETE/ACCESS_PROTECT_OVERWRITE/ACCESS_NOTHING_ALLOWED">Moved and renamed to AccessPermission.ALL_ALLOWED/IS_HIDDEN/PROTECT_DELETE/PROTECT_OVERWRITE/NOTHING_ALLOWED</entry>
         </day>
         <day value="4">
           <entry type="add" package="org.as2lib.util" class="AccessPermission"></entry>
           <entry type="change" package="static org.as2lib.env.reflect" class="ReflectUtil" method="getClassName(..)"><change-rename to="getTypeName(..)" /></entry>
           <entry type="change" package="static org.as2lib.env.reflect" class="ReflectUtil" method="getClassNameForClass(..)"><change-rename to="getTypeNameForType(..)" /></entry>
           <entry type="change" package="static org.as2lib.env.reflect" class="ReflectUtil" method="getClassNameForInstance(..)"><change-rename to="getTypeNameForInstance(..)" /></entry>
           <entry type="change" package="static org.as2lib.env.reflect" class="ReflectUtil" method="getMethodNameByClass(..)"><change-rename to="getMethodNameByType(..)" /></entry>
           <entry type="change" package="static org.as2lib.env.reflect" class="ReflectUtil" method="isMethodStaticByClass(..)"><change-rename to="isMethodStaticByType(..)" /></entry>
           <entry type="change" package="static org.as2lib.env.reflect" class="ReflectUtil" method="isConstructorByClass(..)"><change-rename to="isConstructorByType(..)" /></entry>
           <entry type="change" package="static org.as2lib.env.except" class="ExceptConfig" method="get-/setThrowableStringifier(..)">Moved methods to static AbstractThrowable.get/-setStringifier(..)</entry>
           <entry type="change" package="static org.as2lib.env.except" class="ExceptConfig" method="get-/setStackTraceElementStringifier(..)">Moved methods to static StackTraceElement.get/-setStringifier(..)</entry>
           <entry type="remove" package="org.as2lib.env.except" class="StackTraceStringifier">ThrowableStringifier is now also responsible for stringifying the stack trace.</entry>
           <entry type="remove" package="org.as2lib.env.except" class="ExceptConfig">Moved methods into appropriate classes.</entry>
         </day>
         <day value="3">
           <entry type="add" package="org.as2lib.data.holder.stack" class="TypedStack" method="getType(Void):Function"></entry>
           <entry type="add" package="org.as2lib.data.holder.queue" class="TypedQueue" method="getType(Void):Function"></entry>
           <entry type="add" package="org.as2lib.data.holder.map" class="TypedMap" method="getType(Void):Function"></entry>
           <entry type="add" package="org.as2lib.data.holder.array" class="TypedArray" method="getType(Void):Function"></entry>
           <entry type="change" package="org.as2lib.data.holder.queue" class="TypedQueue" method="new(Stack, Function)">Changed arguments signature to new(Function, Stack).</entry>
           <entry type="change" package="org.as2lib.data.holder.stack" class="TypedStack" method="new(Stack, Function)">Changed arguments signature to new(Function, Stack).</entry>
         </day>
         <day value="2">
           <entry type="change" package="org.as2lib.env.reflect" class="ResolveProxyFactory"><change-rename to="TypeProxyFactory" /></entry>
           <entry type="add" package="org.as2lib.env.reflect" class="InterfaceProxyFactory">Is capable of creating proxies for interfaces and offers higher performance than TypeProxyFactory.</entry>
         </day>
       </month>
       <month value="1">
         <day value="28">
           <entry type="change" package="org.as2lib.test.unit.info" class="InstanciationError"><change-rename to="InstantiationError" /></entry>
           <entry type="change" package="org.as2lib.aop.advice" class="AfterThrowingAdvice" method="execute(JoinPoint, Throwable):Void">Changed arguments types to execute(JoinPoint, *):Void.</entry>
           <entry type="change" package="org.as2lib.env.except" class="Throwable" method="getStackTrace(Void):Stack">Changed return type to Array to reduce dependencies.</entry>
         </day>
         <day value="27">
           <entry type="remove" package="org.as2lib.data.holder" class="HolderConfig">Moved stringifier into specific data holder to reduce unnecessary imports of stringifiers.</entry>
           <entry type="add" package="org.as2lib.data.holder.map" class="AbstractMap">Contains the set- and getStringifier method to stringify maps.</entry>
           <entry type="add" package="org.as2lib.data.holder.stack" class="SimpleStack" method="set-/getStringifier"></entry>
           <entry type="add" package="org.as2lib.data.holder.queue" class="LinearQueue" method="set-/getStringifier"></entry>
           <entry type="add" package="org.as2lib.data.holder.list" class="ArrayList" method="set-/getStringifier"></entry>
         </day>
         <day value="26">
           <entry type="remove" package="org.as2lib.env.except" class="StackTraceElementFactory"></entry>
           <entry type="change" package="org.as2lib.env.except" class="SimpleStackTraceElement"><change-rename to="StackTraceElement" /></entry>
         </day>
         <day value="25">
           <entry type="add" package="org.as2lib.env.reflect" class="ReflectUtil">Offers lightweight reflection support. It has no dependence on any other as2lib module. That means if you use it no other modules will be included.</entry>
           <entry type="remove" package="org.as2lib.core" class="BasicInterface" method="getClass(Void):ClassInfo">Removed method to remove dependency on reflection module (org.as2lib.env.reflect).</entry>
         </day>
         <day value="24">
           <entry type="change" package="org.as2lib.env.except" class="StackTraceElement" method="getThrower(Void):ClassInfo">Changed return type to *.</entry>
           <entry type="change" package="org.as2lib.env.except" class="StackTraceElement" method="getMethod(Void):MethodInfo">Changed return type to Function.</entry>
           <entry type="add">Introduction of a configfile: as2lib.config.as</entry>
           <entry type="change" package="org.as2lib.test.unit" class="TestRunner" method="run(TestCase/TestSuite)">Removed doNotPrintResult because its not necessary with config</entry>
           <entry type="remove" package="org.as2lib.test.unit" class="TestResult" method="print()">Print removed due to Configuration change</entry>
           <entry type="remove" package="org.as2lib.test.unit" class="TestConfig">Removed due to Configuration</entry>
           <entry type="add" package="org.as2lib.test.unit" class="LoggerTestListener">Default listener to be used with the TestSuite</entry>
           <entry type="add" package="org.as2lib.env.event" class="ConsumableEventInfo">SimpleEventInfo that is consumable</entry>
           <entry type="add" package="org.as2lib.env.log.handler" class="TraceHandler" method="getInstance(Void):TraceHandler">Added method for singleton access.</entry>
           <entry type="add" package="org.as2lib.env.log.logger" class="TraceLogger">Introduced simple logger that redirects to the output console</entry>
         </day>
         <day value="22">
           <entry type="add" package="static org.as2lib.test.mock" class="MockControl" method="getDefaultArgumentsMatcher(Void):DefaultArgumentsMatcher">Matches arguments by value.</entry>
           <entry type="add" package="static org.as2lib.test.mock" class="MockControl" method="getTypeArgumentsMatcher(Array):TypeArgumentsMatcher">Matches arguments by type.</entry>
           <entry type="add" package="org.as2lib.data.holder" class="Stack" method="size(Void):Number"></entry>
           <entry type="add" package="org.as2lib.data.holder" class="Queue" method="size(Void):Number"></entry>
         </day>
         <day value="19">
           <entry type="remove" package="org.as2lib.data.holder.map" class="MapIterator">Added KeyMapIterator and ValueMapIterator instead.</entry>
           <entry type="add" package="org.as2lib.data.holder.map" class="KeyMapIterator">Iterates over the keys of a map.</entry>
           <entry type="add" package="org.as2lib.data.holder.map" class="ValueMapIterator">Iterates over the values of a map.</entry>
           <entry type="add" package="org.as2lib.data.holder.map" class="Map" method="keyIterator(Void):Iterator">Returns an iterator to iterate over the keys of a map.</entry>
           <entry type="add" package="org.as2lib.data.holder.map" class="Map" method="valueIterator(Void):Iterator">Returns an iterator to iterate over the values of a map.</entry>
           <entry type="change">Changed all occurences of type FunctionArguments to Array. Done change because FunctionArguments cannot be instantiated, FunctionArguments is not explicitely needed, to allow for better testing.</entry>
         </day>
         <day value="16">
           <entry type="add" package="org.as2lib.env.overload" class="Overload" method="setDefaultHandler(handler:Function):Void">Allows alternative handling if no matching handler was found.</entry>
           <entry type="add" package="org.as2lib.env.overload" class="Overload" method="removeDefaultHandler(handler:Function):Void">Allows removing of the alternative handler.</entry>
         </day>
       </month>
    </year>
    <year value="2004">
      <month value="12">
        <day value="31">
          <entry type="remove" package="org.as2lib.env.reflect" class="RootInfo">The root of the package hierarchy gets now represented by a package info, whose parent is null or undefined.</entry>
          <entry type="remove" package="org.as2lib.env.util" class="ReflectUtil">The methods have been moved to the corresponding classes ClassInfo, PackageInfo and ReflectConfig.</entry>
          <entry type="add" package="static org.as2lib.env.reflect" class="ClassInfo" method="forName(String):ClassInfo">Replaces the old ReflectUtil.getClassInfoByName(String):ClassInfo-method.</entry>
          <entry type="add" package="static org.as2lib.env.reflect" class="ClassInfo" method="forObject(*):ClassInfo">Replaces the old ReflectUtil.getClassInfoByObject(*):ClassInfo-method.</entry>
          <entry type="add" package="static org.as2lib.env.reflect" class="ClassInfo" method="forInstance(*):ClassInfo">Searches explicitely for class infos corresponding to instances.</entry>
          <entry type="add" package="static org.as2lib.env.reflect" class="ClassInfo" method="forClass(Function):ClassInfo">Searches explicitely for class infos corresponding to classes.</entry>
          <entry type="add" package="static org.as2lib.env.reflect" class="PackageInfo" method="forName(String):ClassInfo">Replaces the old ReflectUtil.getPackageInfoByName(String):ClassInfo-method.</entry>
          <entry type="add" package="static org.as2lib.env.reflect" class="PackageInfo" method="forPackage(*):ClassInfo">Replaces the old RefletUtil.getPackageInfoByPackage(*):ClassInfo-method.</entry>
          <entry type="add" package="static org.as2lib.env.reflect" class="ReflectConfig" method="getRootPackage(Void):PackageInfo"></entry>
          <entry type="add" package="static org.as2lib.env.reflect" class="ReflectConfig" method="setRootPackage(PackageInfo):Void"></entry>
          <entry type="add" package="org.as2lib.data.holder" class="Stack" method="toArray(Void):Array"></entry>
          <entry type="add" package="org.as2lib.data.holder" class="Queue" method="toArray(Void):Array"></entry>
          <entry type="add" package="org.as2lib.data.holder" class="List" method="toArray(Void):Array"></entry>
        </day>
        <day value="29">
          <entry type="remove" package="org.as2lib.aop.matcher" class="Matcher"></entry>
          <entry type="add" package="org.as2lib.aop.matcher" class="DefaultMatcher">The old org.as2lib.aop.matcher.Matcher class but with non-static methods.</entry>
          <entry type="add" package="org.as2lib.aop" class="Matcher">Matcher interface.</entry>
          <entry type="change" package="org.as2lib.aop.pointcut" class="DynamicPointcutFactory" method="bindFactory(..)"><change-rename to="bindPointcutFactory" /></entry>
          <entry type="remove" package="org.as2lib.aop.pointcut" class="PointcutConfig">Added AopConfig instead.</entry>
          <entry type="remove" package="org.as2lib.aop.advice" class="AdviceConfig">Added AopConfig instead.</entry>
          <entry type="add" package="org.as2lib.aop" class="AopConfig">Replaces PointcutConfig and AdviceConfig.</entry>
        </day>
        <day value="20">
          <entry type="add" package="org.as2lib.env.event" class="EventBroadcaster" method="addAllListener(Array):Void"></entry>
          <entry type="remove" package="org.as2lib.env.reflect" class="NoSuchChildException"></entry>
          <entry type="remove" package="org.as2lib.env.reflect" class="NoSuchTypeMemberException"></entry>
          <entry type="remove" package="org.as2lib.env.reflect" class="ReferenceNotFoundException"></entry>
        </day>
        <day value="19">
          <entry type="change" package="org.as2lib.env.reflect.algorithm" class="ChildrenAlgorithm"><change-rename to="ChildAlgorithm" /></entry>
          <entry type="remove" package="org.as2lib.env.reflect.algorithm" class="ContentAlgorithm"></entry>
          <entry type="remove" package="org.as2lib.env.reflect.algorithm" class="CacheAlgorithm"></entry>
        </day>
        <day value="8">
          <entry type="add" package="org.as2lib.env.overload" class="Overload" method="getMatchingHandler(..):OverloadHandler">Added public getMatchingHandler-Method that can be used to obtain an overload handler to be able execute the right method directly without more delegates. This enables the use of more recursions.</entry>
          <entry type="add" package="org.as2lib.env.overload" class="OverloadHandler" method="getMethod(Void):Function">Added public getMethod-Method that can be used to obtain the method to execute of an overload handler to be able execute the method directly without more delegates. This enables the use of more recursions.</entry>
        </day>
        <day value="2">
          <entry type="add" package="org.as2lib.util" class="ConstructorCall">New Class to call a constructor within a assertThrows testcase</entry>
          <entry type="add" package="org.as2lib.data.type" class="Angle">Common Interface to work with angles</entry>
          <entry type="add" package="org.as2lib.data.type" class="Degree">Degree implementation of angle</entry>
          <entry type="add" package="org.as2lib.data.type" class="Radian">Radian implementation of angle</entry>
          <entry type="add" package="org.as2lib.data.type" class="Integer">Class to work with integers</entry>
          <entry type="add" package="org.as2lib.data.type" class="NaturalNumber">Class to work with natural numbers</entry>
          <entry type="add" package="org.as2lib.data.type" class="NaturalNumberIncludingZero">Class to work with natural numbers (including zero)</entry>
          <entry type="add" package="org.as2lib.data.type" class="NumberFormatException">Exception to throw if a Number was not transformable into a different format</entry>
        </day>
      </month>
      <month value="11">
	    <day value="29">
	      <entry type="add" package="org.as2lib.util" class="ArrayUtil" method="isSame(array1:Array, array2:Array):Boolean"></entry>
	    </day>
        <day value="21">
          <entry type="bugfix" package="org.as2lib.data.holder.list" class="PriorityList" method="insertFirst(value):Void">Did not work when there was not any value inserted before calling the method.</entry>
          <entry type="bugfix" package="org.as2lib.data.holder.list" class="PriorityList" method="insertLast(value):Void">Did not work when there was not any value inserted before calling the method.</entry>
          <entry type="bugfix" package="org.as2lib.data.holder.list" class="PriorityList" method="setAll(index:Number, list:List):Void">Did not work at all because methods with name 'set' are causing bugs.</entry>
          <entry type="bugfix" package="org.as2lib.data.holder.list" class="PriorityList" method="retainAll(list:List):Void">Did not work when there was more than one value to delete from the list because of a missing '--'.</entry>
        </day>
        <day value="18">
          <entry type="change" package="org.as2lib.util" class="Call"><change-throws to="IllegalArgumentException"></change-throws> If the applied arguments are null.</entry>
          <entry type="add" package="org.as2lib.util" class="ArrayUtil" method="removeAllOccurances(array:Array, element)"></entry>
          <entry type="add" package="org.as2lib.util" class="ArrayUtil" method="removeFirstOccurance(array:Array, element)"></entry>
          <entry type="add" package="org.as2lib.util" class="ArrayUtil" method="removeLastOccurance(array:Array, element)"></entry>
        </day>
        <day value="7">
		  <entry type="add" package="org.as2lib.util" class="ArrayUtil" method="swap(array:Array, i:Number, j:Number):Array"></entry>
		  <entry type="add" package="org.as2lib.util" class="MathUtil"></entry>
        </day>
        <day value="1">
          <entry type="change" package="org.as2lib.util" class="StringUtil"><change-throws to="IllegalArgumentException"></change-throws></entry>
        </day>
      </month>
      <month value="10">
      	<day value="28">
		  <entry type="add" package="org.as2ib.data.holder.list" class="ListStringifier" />
		  <entry type="change" package="org.as2ib.data.holder.list" class="ArrayList" />
		  <entry type="change" package="org.as2ib.data.holder" class="HolderConfig" />
		</day>
	    <day value="27">
		  <entry type="documentation" package="org.as2lib.util" class="ObjectUtil" method="forEach(...)">Added extended documentation</entry>
		  <entry type="change" package="org.as2lib.util" class="ObjectUtil" method="forEach(..)">Additional submitting of the entries name.</entry>
		  <entry type="add" package="org.as2ib.test.unit" class="TestCase" method="assertTypeOf(message:String, value, type:String)" />
		  <entry type="add" package="org.as2ib.test.unit" class="TestCase" method="assertInstanceOf(message:String, value, type)" />
		  <entry type="add" package="org.as2ib.data.file" class="File" />
		  <entry type="add" package="org.as2ib.data.file" class="FileListener" />
		  <entry type="add" package="org.as2ib.data.file" class="FileEventInfo" />
		  <entry type="add" package="org.as2ib.data.file" class="FileNotLoadedException" />
		  <entry type="add" package="org.as2ib.data.file" class="SimpleFile" />
		  <entry type="add" package="org.as2ib.data.file" class="BitFormat" />
		  <entry type="add" package="org.as2ib.data.file" class="ByteFormat" />
		</day>
        <day value="20">
          <entry type="change" package="org.as2lib.data.io.conn.core.event" class="MethodInvocationReturnListener" method="onResponse(..)"><change-rename to="onReturn" /></entry>
          <entry type="change" package="org.as2lib.data.io.conn.core.event" class="MethodInvocationReturnInfo" method="getResponse(..)"><change-rename to="getReturnValue" /></entry>
          <entry type="change" package="org.as2lib.data.io.conn.core.event" class="MethodInvocationResponseInfo"><change-rename to="MethodInvocationReturnInfo" /></entry>
          <entry type="change" package="org.as2lib.data.io.conn.core.event" class="MethodInvocationResponseListener"><change-rename to="MethodInvocationReturnListener" /></entry>
        </day>
        <day value="10">
          <entry type="add" package="org.as2lib.env.reflect" class="ProxyFactory" />
          <entry type="add" package="org.as2lib.env.reflect" class="InvocationHandler" />
          <entry type="add" package="org.as2lib.env.reflect" class="ResolveProxyFactory" />
        </day>
        <day value="9">
          <entry type="add" package="org.as2lib.env.out" class="HierarchicalOut" />
        </day>
        <day value="8">
          <entry type="change" package="org.as2lib.env.overload" class="OverloadHandler" method="isMoreExplicitThan(handler:OverlaodHandler):Boolean"><change-rename to="isMoreExplicit" /></entry>
          <entry type="add" package="org.as2lib.env.out" class="OutAccess" method="isLogEnabled(Void):Boolean" />
          <entry type="add" package="org.as2lib.env.out" class="OutAccess" method="isDebugEnabled(Void):Boolean" />
          <entry type="add" package="org.as2lib.env.out" class="OutAccess" method="isInfoEnabled(Void):Boolean" />
          <entry type="add" package="org.as2lib.env.out" class="OutAccess" method="isWarningEnabled(Void):Boolean" />
          <entry type="add" package="org.as2lib.env.out" class="OutAccess" method="isErrorEnabled(Void):Boolean" />
          <entry type="add" package="org.as2lib.env.out" class="OutAccess" method="isFatalEnabled(Void):Boolean" />
        </day>
        <day value="7">
          <entry type="change" package="org.as2lib.env.except" class="AbstractException"><change-rename to="AbstractThrowable" /></entry>
          <entry type="add" package="org.as2lib.env.out" class="OutAccess" method="isEnabled(level:OutLevel):Boolean"></entry>
          <entry type="change" package="org.as2lib.env.out" class="Out" method="isEnabledFor(level:OutLevel):Boolean"><change-rename to="isEnabled" /></entry>
          <entry type="add" package="org.as2lib.env.out" class="ConfigurableOut" />
        </day>
        <day value="6">
          <entry type="add" package="org.as2lib.env.out" class="OutFactory" />
          <entry type="add" package="org.as2lib.env.out" class="DefaultOutFactory" />
          <entry type="add" package="org.as2lib.env.out" class="OutRepository" />
          <entry type="add" package="org.as2lib.env.out" class="OutRepositoryManager" />
          <entry type="add" package="org.as2lib.env.out" class="OutHierarchy" />
          <entry type="add" package="org.as2lib.env.out" class="RootOut" />
          <entry type="add" package="org.as2lib.env.out" class="Out" method="getParent(Void):Out" />
          <entry type="add" package="org.as2lib.env.out" class="Out" method="setParent(parent:Out):Void" />
          <entry type="add" package="org.as2lib.env.out" class="Out" method="getName(Void):String" />
          <entry type="change" package="org.as2lib.env.out" class="Out" method="new(Void)"><change-arguments to="name:String" /></entry>
          <entry type="add" package="org.as2lib.env.out" class="Out" method="static getOut():Out" />
          <entry type="add" package="org.as2lib.env.out" class="Out" method="static getOutByName(name:String):Out" />
          <entry type="add" package="org.as2lib.env.out" class="Out" method="static getOutByNameAndFactory(name:String, factory:OutFactory):Out" />
          <entry type="add" package="org.as2lib.env.out" class="Out" method="static getRootOut(Void):Out" />
        </day>
        <day value="3">
          <entry type="bugfix" package="org.as2lib.env.reflect" class="ClassInfo" variable="constructor:ConstructorInfo"><change-rename to="classConstructor">Renamed it because the name 'constructor' caused an exception in Flex.</change-rename></entry>
        </day>
      </month>
      <month value="9">
        <day value="26">
          <entry type="bugfix" package="org.as2lib.env.reflect" link="https://sourceforge.net/tracker/index.php?func=detail&aids=1028923&group_id=94206&atid=607074">Important Bugfix#1028923 about infinite recursion in reflections.</entry>
          <entry type="bugfix" package="org.as2lib.env.reflect" link="https://sourceforge.net/tracker/index.php?func=detail&aid=1035084&group_id=94206&atid=607074">Removed hiding of classes by reflections</entry>
        </day>
        <day value="16">
          <entry type="documentation" package="org.as2lib.aop.joinpoint" class="*">Added documentation.</entry>
          <entry type="documentation" package="org.as2lib.aop.pointcut" class="*">Added documentation.</entry>
          <entry type="documentation" package="org.as2lib.aop.aspect" class="*">Added documentation.</entry>
          <entry type="documentation" package="org.as2lib.aop.weaver" class="*">Added documentation.</entry>
          <entry type="documentation" package="org.as2lib.aop.matcher" class="*">Added documentation.</entry>
          <entry type="documentation" package="org.as2lib.aop.advice" class="*">Added documentation.</entry>
          <entry type="add" package="org.as2lib.aop.advice" class="AdviceConfig" method="setDynamicAdviceFactory(factory:DynamicAdviceFactory):Void"></entry>
	    </day>
        <day value="15">
          <entry type="documentation" package="org.as2lib.aop" class="*">Added documentation.</entry>
          <entry type="add" package="org.as2lib.core" class="BasicMovieClip">Basic class for classes that need to extend MovieClip.</entry>
        </day>
        <day value="10">
          <entry type="add" package="org.as2lib.env.out" class="Out">Added method .addStaticHandler and .removeStaticHandler to print output of all instances.</entry>
          <entry type="add" package="org.as2lib.test.unit" class="TestSuiteFactory" method="collectAgent()">Added possibility to block the collecting of a Testcase by the static method .blockCollecting(Void):Boolean.</entry>
        </day>
      </month>
    </year>
  </release>
</changelog>