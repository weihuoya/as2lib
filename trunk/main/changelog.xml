<?xml version="1.0" encoding="utf-8"?>
<changelog xmlns="as2lib-changelog"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:noSchemaLocation="changelog.xsd">
  <year value="2004">
    <month value="8">
      <day value="24">
        <entry type="change" package="org.as2lib.test.unit">Refactored the complete Testunit System (new API)</entry>
      </day>
      <day value="20">
        <entry type="change" package="org.as2lib.env.reflect.algorithm" class="ContentAlgorithm" method="execute(info:CompositeMemberInfo):Map">to execute(info:CompositeMemberInfo):Array</entry>
        <entry type="change" package="org.as2lib.env.reflect" class="PackageInfo" method="getChildPackages(Void):Map">to getChildPackages(Void):Array</entry>
        <entry type="change" package="org.as2lib.env.reflect" class="PackageInfo" method="getChildClasses(Void):Map">to getChildClasses(Void):Array</entry>
        <entry type="change" package="org.as2lib.env.reflect" class="PackageInfo" method="getChildren(Void):Map">to getChildren(Void):Array</entry>
        <entry type="change" package="org.as2lib.env.reflect" class="ClassInfo" method="getProperties(Void):Map">to getProperties(Void):Array</entry>
        <entry type="change" package="org.as2lib.env.reflect" class="TypeInfo" method="getMethods(Void):Map">to getMethods(Void):Array</entry>
      </day>
    </month>
    <month value="7">
      <day value="23">
        <entry type="bugfix" package="">Important Bugfix SF-Request#996433</entry>
        <entry type="add" package="org.as2lib.util" class="ArrayUtil" method="shuffle(array:Array):Array"></entry>
      </day>
      <day value="22">
        <entry type="enhancement" package="org.as2lib.util" class="Call" method="toString(Void):String"></entry>
        <entry type="change" package="org.as2lib.util" class="?" method="?">Change Argument Type from Function to Object</entry>
      </day>
      <day value="21">
        <entry type="add" package="org.as2lib.util" class="ArrayUtil" method="indexOf(array:Array):Array"></entry>
        <entry type="change" package="org.as2lib.util" class="ArrayUtil" method="contains(array:Array, object):Boolean">Implementation to use a for..in loop (could have sideeffects to useages).</entry>
      </day>
      <day value="18">
        <entry type="add" package="org.as2lib.env.reflect" class="ClassUtil" method="createCleanInstance(clazz:Function):Object"></entry>
      </day>
      <day value="17">
        <entry type="add" package="org.as2lib.env.except" class="Throwable" method="addStackTraceElement(thrower, method:Function, args:FunctionArguments):Void"></entry>
        <entry type="changed" package="org.as2lib.env.except">Changed the addStackTraceElement() access specifier in org.as2lib.env.except.AbstractException from private to public.</entry>
      </day>
      <day value="15">
        <entry type="add" package="org.as2lib.aop">AOP Framework added.</entry>
      </day>
      <day value="12">
        <entry type="change" package="org.as2lib.env.overload" class="SimpleOverloadHandler" method="matches(args:Array):Boolean">it now returns true if you check null against any type as expected.</entry>
      </day>
      <day value="11">
        <entry type="add" package="org.as2lib.util" class="StringUtil" method="endsWith(string:String, searchString:String):Boolean"></entry>
      </day>
      <day value="2">
        <entry type="change" package="org.as2lib.env.except" class="AbstractException" method="new(message:String, thrower, args:FunctionArguments)">'!message' to '(message == undefined)' because passing a blank String resulted in a failure.</entry>
      </day>
    </month>
    <month value="6">
      <day value="25">
        <entry type="add" package="org.as2lib.util" class="StringUtil" method="addSpaceIndent(string:String, count:Number):String"></entry>
        <entry type="add" package="org.as2lib.util" class="StringUtil" method="multiply(string:String, count:Number):String"></entry>
        <entry type="documentation" package="org.as2lib.util" class="StringUtil"></entry>
      </day>
      <day value="18">
        <entry type="add" package="org.as2lib.util" class="StopWatch">to stop time differences.</entry>
        <entry type="change" package="org.as2lib.env.reflect.ReflectConfig">Moved initialization of static vars into appropriate getter methods.</entry>
        <entry type="change" package="org.as2lib.Config">Moved initialization of static vars into appropriate getter methods.</entry>
        <entry type="change" package="org.as2lib.data.holder.HolderConfig">Moved initialization of static vars into appropriate getter methods.</entry>
        <entry type="change" package="org.as2lib.env.except.ExceptConfig">Moved initialization of static vars into appropriate getter methods.</entry>
        <entry type="change" package="org.as2lib.env.reflect.RootInfo">Moved initialization of static vars into appropriate getter methods.</entry>
      </day>
      <day value="6">
        <entry type="add" package="org.as2lib.env.out.info" class="OutErrorInfo" method="toString(Void):String"></entry>
        <entry type="add" package="org.as2lib.env.out.info" class="OutWriteInfo" method="toString(Void):String"></entry>
        <entry type="add" package="org.as2lib.env.except" class="StackTraceElementFactory"></entry>
        <entry type="add" package="org.as2lib.env.except" class="SimpleStackTraceElementFactory"></entry>
        <entry type="add" package="org.as2lib.env.except" class="ExceptConfig" method="getStackTraceElementFactory(Void):StackTraceElementFactory"></entry>
        <entry type="add" package="org.as2lib.env.except" class="ExceptConfig" method="setStackTraceElementFactory(factory:StackTraceElementFactory):Void"></entry>
        <entry type="change" package="org.as2lib.env.except" class="AbstractException" method="addStackTraceElement(thrower, method:Function, args:FunctionArguments):Void">to use the newly created classes and operations.</entry>
      </day>
      <day value="5">
        <entry type="bugfix" package="org.as2lib.env.except" class="SimpleStackTraceElement" method="getMethod():MethodInfo">Fixed serious bug that broke the whole program if a Throwable was thrown by an operation of the superclass (the operation couldn't be found in the throwing subclass and a Throwable has thus been thrown) - it was actually no bug in the SimpleStackTraceElement but in the ClassInfo's.getMethods() operation.</entry>
        <entry type="change" package="org.as2lib.env.reflect" class="ClassInfo" method="getMethods(Void):Map">It now also returns the operations declared by super types.</entry>
      </day>
      <day value="3">
        <entry type="change" package="org.as2lib.env.event" class="DynamicEventBroadcasterFactory" method="createEventBroadcaster(Void):EventBroadcaster" throws="org.as2lib.env.except.UndefinedPropertyExceptiont">to org.as2lib.env.except.IllegalStateException.</entry>
        <entry type="remove" package="org.as2lib.env.except" class="UndefinedPropertyException"></entry>
        <entry type="add" package="org.as2lib.out.handler" class="SocketOutputServerHandler"></entry>
      </day>
    </month>
    <month value="5">
      <day value="31">
        <entry type="documentation" package="org.as2lib.env.event">Improved overall documentation.</entry>
        <entry type="change" package="org.as2lib.env.event" class="SimpleEventBroadcaster" variable="listeners:ListenerArray">to listeners:Array.</entry>
        <entry type="change" package="org.as2lib.env.event" class="EventBroadcaster" method="getAllListener(Void):ListenerArray">to getAllListener(Void):Array.</entry>
        <entry type="change" package="org.as2lib.env.event" class="SimpleEventBroadcaster" variable="normalDispatcher:EventDispatcher">to NORMAL_DISPATCHER:EventDispatcher.</entry>
        <entry type="change" package="org.as2lib.env.event" class="SimpleEventBroadcaster" variable="logDispatcher:EventDispatcher">to LOG_DISPATCHER:EventDispatcher.</entry>
        <entry type="change" package="org.as2lib.env.event" class="EventDispatcher" method="dispatch(event:EventInfo, listeners:ListenerArray):Void">to dispatch(event:EventInfo, listeners:Array):Void.</entry>
        <entry type="remove" package="org.as2lib.env.event" class="ListenerArray"></entry>
        <entry type="change" package="org.as2lib.env.event">Renamed Consumeable to Consumable.</entry>
        <entry type="change" package="org.as2lib.env.event" class="EventDispatcher" method="dispatchConsumeable(event:EventInfo, listeners:Array):Void">to dispatchConsumable(event:EventInfo, listeners:Array):Void.</entry>
        <entry type="add" package="org.as2lib.env.event" class="SpeedEventBroadcaster">for fast broadcasting.</entry>
        <entry type="change" package="org.as2lib.env.reflect" class="ClassInfo" method="newInstance(Void)">to newInstance(args:Array).</entry>
      </day>
      <day value="30">
        <entry type="remove" package="org.as2lib.util" class="Executeable"></entry>
        <entry type="change" package="org.as2lib.util" class="Call" method="new(object, func:Function, args:Array)">to new(object, func:Function).</entry>
        <entry type="change" package="org.as2lib.util" class="Call" method="execute(Void)">to execute(args:Array).</entry>
      </day>
      <day value="28">
        <entry type="change" package="org.as2lib.env.reflect.algorythm">to algorithm.</entry>
        <entry type="change" package="org.as2lib.env.reflect.algorithm.ClassAlgorythm">to ClassAlgorithm.</entry>
        <entry type="change" package="org.as2lib.env.reflect.algorithm.PackageAlgorythm">to PackageAlgorithm.</entry>
        <entry type="change" package="org.as2lib.env.reflect.algorithm.ChildrenAlgorythm">to ChildrenAlgorithm.</entry>
        <entry type="change" package="org.as2lib.env.reflect.algorithm.MethodAlgorythm">to MethodAlgorithm.</entry>
        <entry type="change" package="org.as2lib.env.reflect.algorithm.PropertyAlgorythm">to PropertyAlgorithm.</entry>
        <entry type="change" package="org.as2lib.env.reflect.algorithm.AbstractContentAlgorythm">to AbstractContentAlgorithm.</entry>
        <entry type="change" package="org.as2lib.env.reflect.algorithm.ContentAlgorythm">to ContentAlgorithm.</entry>
        <entry type="change" package="org.as2lib.env.reflect.algorithm.CacheAlgorythm">to CacheAlgorithm.</entry>
        <entry type="change" package="org.as2lib.env.reflect.ReflectConfig" method="get-/set*Algorythm(*):*">to get-/set*Algorithm(*):*.</entry>
        <entry type="change" package="org.as2lib.env.reflect.TypeInfo" method="getRepresentedType(Void):Function">to getType(Void):Function.</entry>
        <entry type="change" package="org.as2lib.env.reflect.ClassInfo" method="getRepresentedType(Void):Function">to getType(Void):Function.</entry>
      </day>
      <day value="26">
        <entry type="remove" package="org.as2lib.env.reflect" class="CompositeMemberInfo" method="getName(Void):String">[is already defined in interface MemberInfo].</entry>
        <entry type="remove" package="org.as2lib.env.reflect" class="TypeInfo" method="getParent(Void):PackageInfo">[is already defined in interface CompositeMemberInfo].</entry>
      </day>
    </month
  ></year>
</changelog>