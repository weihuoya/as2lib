<?xml version="1.0" encoding="utf-8"?>
<changelog xmlns="as2lib-changelog"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:noSchemaLocation="changelog.xsd">
  <year value="2004">
    <month value="9">
      <day value="1">
        <entry type="change" package="org.as2lib.env.out" class="OutAccess" method="*(message:String):Void"><change-arguments to="message" /></entry>
        <entry type="change" package="org.as2lib.env.out" class="OutAccess" method="*(throwable:Throwable):Void"><change-arguments to="error" /></entry>
        <entry type="change" package="org.as2lib.env.out" class="OutLevel" method="*(message:String, broadcaster:EventBroadcaster):Void"><change-arguments to="message, broadcaster:EventBroadcaster" /></entry>
        <entry type="change" package="org.as2lib.env.out" class="OutLevel" method="*(throwable:Throwable, broadcaster:EventBroadcaster):Void"><change-arguments to="error, broadcaster:EventBroadcaster" /></entry>
      </day>
    </month>
    <month value="8">
      <day value="24">
        <entry type="change" package="org.as2lib.test.unit">Refactored the complete Testunit System (new API)</entry>
        <entry type="change" package="org.as2lib.data.holder" class="ArrayList"><change-move to="org.as2lib.data.holder.list" /></entry>
        <entry type="change" package="org.as2lib.data.holder" class="HashMap"><change-move to="org.as2lib.data.holder.map" /></entry>
        <entry type="change" package="org.as2lib.data.holder" class="LinearQueue"><change-move to="org.as2lib.data.holder.queue" /></entry>
        <entry type="change" package="org.as2lib.data.holder" class="PrimitiveTypeMap"><change-move to="org.as2lib.data.holder.map" /></entry>
        <entry type="change" package="org.as2lib.data.holder" class="PriorityList"><change-move to="org.as2lib.data.holder.list" /></entry>
        <entry type="change" package="org.as2lib.data.holder" class="PriorityMap"><change-move to="org.as2lib.data.holder.map" /></entry>
        <entry type="change" package="org.as2lib.data.holder" class="SimpleStack"><change-move to="org.as2lib.data.holder.stack" /></entry>
        <entry type="change" package="org.as2lib.data.holder" class="TypedArray"><change-move to="org.as2lib.data.holder.array" /></entry>
        <entry type="change" package="org.as2lib.data.holder" class="TypedMap"><change-move to="org.as2lib.data.holder.map" /></entry>
        <entry type="change" package="org.as2lib.data.holder" class="TypedQueue"><change-move to="org.as2lib.data.holder.queue" /></entry>
        <entry type="change" package="org.as2lib.data.holder" class="TypedStack"><change-move to="org.as2lib.data.holder.stack" /></entry>
        <entry type="change" package="org.as2lib.data.holder.string" class="MapStringifier"><change-move to="org.as2lib.data.holder.map" /></entry>
        <entry type="change" package="org.as2lib.data.holder.string" class="StackStringifier"><change-move to="org.as2lib.data.holder.stack" /></entry>
        <entry type="change" package="org.as2lib.data.holder.string" class="QueueStringifier"><change-move to="org.as2lib.data.holder.queue" /></entry>
        <entry type="change" package="org.as2lib.data.iterator" class="Iterator"><change-move to="org.as2lib.data.holder" /></entry>
        <entry type="change" package="org.as2lib.data.iterator" class="ArrayIterator"><change-move to="org.as2lib.data.holder.array" /></entry>
        <entry type="change" package="org.as2lib.data.iterator" class="MapIterator"><change-move to="org.as2lib.data.holder.map" /></entry>
        <entry type="remove" package="org.as2lib.data.iterator" class="ProtectedArrayIterator"></entry>
        <entry type="add" package="org.as2lib.data.holder" class="ProtectedIterator">Acts as a general protected iterator for all iterator types.</entry>
        <entry type="change" package="org.as2lib.data.iterator" class="NoSuchElementException"><change-move to="org.as2lib.data.holder" /></entry>
        <entry type="change" package="org.as2lib.util.string" class="Stringifier"><change-move to="org.as2lib.util" /></entry>
        <entry type="change" package="org.as2lib.util.string" class="ObjectStringifier"><change-move to="org.as2lib.core" /></entry>
        <entry type="remove" package="org.as2lib.util.string"></entry>
      </day>
      <day value="20">
        <entry type="change" package="org.as2lib.env.reflect.algorithm" class="ContentAlgorithm" method="execute(info:CompositeMemberInfo):Map"><change-returnType to="Array" /></entry>
        <entry type="change" package="org.as2lib.env.reflect" class="PackageInfo" method="getChildPackages(Void):Map"><change-returnType to="Array" /></entry>
        <entry type="change" package="org.as2lib.env.reflect" class="PackageInfo" method="getChildClasses(Void):Map"><change-returnType to="Array" /></entry>
        <entry type="change" package="org.as2lib.env.reflect" class="PackageInfo" method="getChildren(Void):Map"><change-returnType to="Array" /></entry>
        <entry type="change" package="org.as2lib.env.reflect" class="ClassInfo" method="getProperties(Void):Map"><change-returnType to="Array" /></entry>
        <entry type="change" package="org.as2lib.env.reflect" class="TypeInfo" method="getMethods(Void):Map"><change-returnType to="Array" /></entry>
      </day>
    </month>
    <month value="7">
      <day value="23">
        <entry type="bugfix" package="">Important Bugfix SF-Request#996433</entry>
        <entry type="add" package="org.as2lib.util" class="ArrayUtil" method="shuffle(array:Array):Array"></entry>
      </day>
      <day value="22">
        <entry type="enhancement" package="org.as2lib.util" class="Call" method="toString(Void):String"></entry>
        <entry type="change" package="org.as2lib.util" class="?" method="?">Change Argument Type from Function to Object</entry>
      </day>
      <day value="21">
        <entry type="add" package="org.as2lib.util" class="ArrayUtil" method="indexOf(array:Array):Array"></entry>
        <entry type="change" package="org.as2lib.util" class="ArrayUtil" method="contains(array:Array, object):Boolean">Implementation to use a for..in loop (could have sideeffects to useages).</entry>
      </day>
      <day value="18">
        <entry type="add" package="org.as2lib.env.reflect" class="ClassUtil" method="createCleanInstance(clazz:Function):Object"></entry>
      </day>
      <day value="17">
        <entry type="add" package="org.as2lib.env.except" class="Throwable" method="addStackTraceElement(thrower, method:Function, args:FunctionArguments):Void"></entry>
        <entry type="change" package="org.as2lib.env.except" class="AbstractException" method="addStackTraceElement(thrower, method:Function, args:FunctionArguments):Void">Changed access specifier from private to public.</entry>
      </day>
      <day value="15">
        <entry type="add" package="org.as2lib.aop">AOP Framework added.</entry>
      </day>
      <day value="12">
        <entry type="change" package="org.as2lib.env.overload" class="SimpleOverloadHandler" method="matches(args:Array):Boolean">It now returns true if you check null against any type as expected.</entry>
      </day>
      <day value="11">
        <entry type="add" package="org.as2lib.util" class="StringUtil" method="endsWith(string:String, searchString:String):Boolean"></entry>
      </day>
      <day value="2">
        <entry type="change" package="org.as2lib.env.except" class="AbstractException" method="new(message:String, thrower, args:FunctionArguments)">'!message' to '(message == undefined)' because passing a blank String resulted in a failure.</entry>
      </day>
    </month>
    <month value="6">
      <day value="25">
        <entry type="add" package="org.as2lib.util" class="StringUtil" method="addSpaceIndent(string:String, count:Number):String"></entry>
        <entry type="add" package="org.as2lib.util" class="StringUtil" method="multiply(string:String, count:Number):String"></entry>
        <entry type="documentation" package="org.as2lib.util" class="StringUtil"></entry>
      </day>
      <day value="18">
        <entry type="add" package="org.as2lib.util" class="StopWatch">to stop time differences.</entry>
        <entry type="change" package="org.as2lib.env.reflect.ReflectConfig">Moved initialization of static vars into appropriate getter methods.</entry>
        <entry type="change" package="org.as2lib.Config">Moved initialization of static vars into appropriate getter methods.</entry>
        <entry type="change" package="org.as2lib.data.holder.HolderConfig">Moved initialization of static vars into appropriate getter methods.</entry>
        <entry type="change" package="org.as2lib.env.except.ExceptConfig">Moved initialization of static vars into appropriate getter methods.</entry>
        <entry type="change" package="org.as2lib.env.reflect.RootInfo">Moved initialization of static vars into appropriate getter methods.</entry>
      </day>
      <day value="6">
        <entry type="add" package="org.as2lib.env.out.info" class="OutErrorInfo" method="toString(Void):String"></entry>
        <entry type="add" package="org.as2lib.env.out.info" class="OutWriteInfo" method="toString(Void):String"></entry>
        <entry type="add" package="org.as2lib.env.except" class="StackTraceElementFactory"></entry>
        <entry type="add" package="org.as2lib.env.except" class="SimpleStackTraceElementFactory"></entry>
        <entry type="add" package="org.as2lib.env.except" class="ExceptConfig" method="getStackTraceElementFactory(Void):StackTraceElementFactory"></entry>
        <entry type="add" package="org.as2lib.env.except" class="ExceptConfig" method="setStackTraceElementFactory(factory:StackTraceElementFactory):Void"></entry>
        <entry type="change" package="org.as2lib.env.except" class="AbstractException" method="addStackTraceElement(thrower, method:Function, args:FunctionArguments):Void">It now uses the newly created classes and operations.</entry>
      </day>
      <day value="5">
        <entry type="bugfix" package="org.as2lib.env.except" class="SimpleStackTraceElement" method="getMethod():MethodInfo">Fixed serious bug that broke the whole program if a Throwable was thrown by an operation of the superclass (the operation couldn't be found in the throwing subclass and a Throwable has thus been thrown) - it was actually no bug in the SimpleStackTraceElement but in the ClassInfo's.getMethods() operation.</entry>
        <entry type="change" package="org.as2lib.env.reflect" class="ClassInfo" method="getMethods(Void):Map">It now also returns the operations declared by super types.</entry>
      </day>
      <day value="3">
        <entry type="change" package="org.as2lib.env.event" class="DynamicEventBroadcasterFactory" method="createEventBroadcaster(Void):EventBroadcaster" throws="org.as2lib.env.except.UndefinedPropertyExceptiont"><change-throws to="org.as2lib.env.except.IllegalStateException" /></entry>
        <entry type="remove" package="org.as2lib.env.except" class="UndefinedPropertyException"></entry>
        <entry type="add" package="org.as2lib.out.handler" class="SocketOutputServerHandler"></entry>
      </day>
    </month>
    <month value="5">
      <day value="31">
        <entry type="documentation" package="org.as2lib.env.event">Improved overall documentation.</entry>
        <entry type="change" package="org.as2lib.env.event" class="SimpleEventBroadcaster" variable="listeners:ListenerArray"><change-type to="Array" /></entry>
        <entry type="change" package="org.as2lib.env.event" class="EventBroadcaster" method="getAllListener(Void):ListenerArray"><change-returnType to="Array" /></entry>
        <entry type="change" package="org.as2lib.env.event" class="SimpleEventBroadcaster" variable="normalDispatcher:EventDispatcher"><change-rename to="NORMAL_DISPATCHER" /></entry>
        <entry type="change" package="org.as2lib.env.event" class="SimpleEventBroadcaster" variable="logDispatcher:EventDispatcher"><change-rename to="LOG_DISPATCHER:EventDispatcher" /></entry>
        <entry type="change" package="org.as2lib.env.event" class="EventDispatcher" method="dispatch(event:EventInfo, listeners:ListenerArray):Void"><change-arguments to="event:EventInfo, listeners:Array" /></entry>
        <entry type="remove" package="org.as2lib.env.event" class="ListenerArray"></entry>
        <entry type="change" package="org.as2lib.env.event" class="Consumeable"><change-rename to="Consumable" /></entry>
        <entry type="change" package="org.as2lib.env.event" class="EventDispatcher" method="dispatchConsumeable(event:EventInfo, listeners:Array):Void"><change-rename to="dispatchConsumable" /></entry>
        <entry type="add" package="org.as2lib.env.event" class="SpeedEventBroadcaster">for fast broadcasting.</entry>
        <entry type="change" package="org.as2lib.env.reflect" class="ClassInfo" method="newInstance(Void)"><change-arguments to="newInstance(args:Array)" /></entry>
      </day>
      <day value="30">
        <entry type="remove" package="org.as2lib.util" class="Executeable"></entry>
        <entry type="change" package="org.as2lib.util" class="Call" method="new(object, func:Function, args:Array)"><change-arguments to="object, func:Function" /></entry>
        <entry type="change" package="org.as2lib.util" class="Call" method="execute(Void)"><change-arguments to="args:Array" /></entry>
      </day>
      <day value="28">
        <entry type="change" package="org.as2lib.env.reflect.algorythm"><change-rename to="algorithm" /></entry>
        <entry type="change" package="org.as2lib.env.reflect.algorithm" class="ClassAlgorythm"><change-rename to="ClassAlgorithm." /></entry>
        <entry type="change" package="org.as2lib.env.reflect.algorithm" class="PackageAlgorythm"><change-rename to="PackageAlgorithm" /></entry>
        <entry type="change" package="org.as2lib.env.reflect.algorithm" class="ChildrenAlgorythm"><change-rename to="ChildrenAlgorithm" /></entry>
        <entry type="change" package="org.as2lib.env.reflect.algorithm" class="MethodAlgorythm"><change-rename to="MethodAlgorithm" /></entry>
        <entry type="change" package="org.as2lib.env.reflect.algorithm" class="PropertyAlgorythm"><change-rename to="PropertyAlgorithm" /></entry>
        <entry type="change" package="org.as2lib.env.reflect.algorithm" class="AbstractContentAlgorythm"><change-rename to="AbstractContentAlgorithm" /></entry>
        <entry type="change" package="org.as2lib.env.reflect.algorithm" class="ContentAlgorythm"><change-rename to="ContentAlgorithm" /></entry>
        <entry type="change" package="org.as2lib.env.reflect.algorithm" class="CacheAlgorythm"><change-rename to="CacheAlgorithm" /></entry>
        <entry type="change" package="org.as2lib.env.reflect" class="ReflectConfig" method="get-/set*Algorythm(*):*"><change-rename to="get-/set*Algorithm" /></entry>
        <entry type="change" package="org.as2lib.env.reflect" class="TypeInfo" method="getRepresentedType(Void):Function"><change-rename to="getType" /></entry>
        <entry type="change" package="org.as2lib.env.reflect" class="ClassInfo" method="getRepresentedType(Void):Function"><change-rename to="getType" /></entry>
      </day>
      <day value="26">
        <entry type="remove" package="org.as2lib.env.reflect" class="CompositeMemberInfo" method="getName(Void):String">[is already defined in interface MemberInfo].</entry>
        <entry type="remove" package="org.as2lib.env.reflect" class="TypeInfo" method="getParent(Void):PackageInfo">[is already defined in interface CompositeMemberInfo].</entry>
      </day>
    </month
  ></year>
</changelog>