<?xml version="1.0" encoding="utf-8"?>
<changelog xmlns="as2lib"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="aslib http://www.as2lib.org/changelog_0.91.xsd">
  <release name="as2lib 0.1 rc1" day="1" month="1" year="2004">
    <year value="2005">
       <month value="1">
         <day value="16">
           <entry type="add" package="org.as2lib.env.overload" class="Overload" method="setDefaultHandler(handler:Function):Void">Allows alternative handling if no matching handler was found.</entry>
           <entry type="add" package="org.as2lib.env.overload" class="Overload" method="removeDefaultHandler(handler:Function):Void">Allows removing of the alternative handler.</entry>
         </day>
       </month>
    </year>
    <year value="2004">
      <month value="12">
        <day value="31">
          <entry type="remove" package="org.as2lib.env.reflect" class="RootInfo">The root of the package hierarchy gets now represented by a package info, whose parent is null or undefined.</entry>
          <entry type="remove" package="org.as2lib.env.util" class="ReflectUtil">The methods have been moved to the corresponding classes ClassInfo, PackageInfo and ReflectConfig.</entry>
          <entry type="add" package="org.as2lib.env.reflect" class="ClassInfo" method="static forName(String):ClassInfo">Replaces the old ReflectUtil.getClassInfoByName(String):ClassInfo-method.</entry>
          <entry type="add" package="org.as2lib.env.reflect" class="ClassInfo" method="static forObject(*):ClassInfo">Replaces the old ReflectUtil.getClassInfoByObject(*):ClassInfo-method.</entry>
          <entry type="add" package="org.as2lib.env.reflect" class="ClassInfo" method="static forInstance(*):ClassInfo">Searches explicitely for class infos corresponding to instances.</entry>
          <entry type="add" package="org.as2lib.env.reflect" class="ClassInfo" method="static forClass(Function):ClassInfo">Searches explicitely for class infos corresponding to classes.</entry>
          <entry type="add" package="org.as2lib.env.reflect" class="PackageInfo" method="forName(String):ClassInfo">Replaces the old ReflectUtil.getPackageInfoByName(String):ClassInfo-method.</entry>
          <entry type="add" package="org.as2lib.env.reflect" class="PackageInfo" method="forPackage(*):ClassInfo">Replaces the old RefletUtil.getPackageInfoByPackage(*):ClassInfo-method.</entry>
          <entry type="add" package="org.as2lib.env.reflect" class="ReflectConfig" method="getRootPackage(Void):PackageInfo"></entry>
          <entry type="add" package="org.as2lib.env.reflect" class="ReflectConfig" method="setRootPackage(PackageInfo):Void"></entry>
          <entry type="add" package="org.as2lib.data.holder" class="Stack" method="toArray(Void):Array"></entry>
          <entry type="add" package="org.as2lib.data.holder" class="Queue" method="toArray(Void):Array"></entry>
          <entry type="add" package="org.as2lib.data.holder" class="List" method="toArray(Void):Array"></entry>
        </day>
        <day value="29">
          <entry type="remove" package="org.as2lib.aop.matcher" class="Matcher"></entry>
          <entry type="add" package="org.as2lib.aop.matcher" class="DefaultMatcher">The old org.as2lib.aop.matcher.Matcher class but with non-static methods.</entry>
          <entry type="add" package="org.as2lib.aop" class="Matcher">Matcher interface.</entry>
          <entry type="change" package="org.as2lib.aop.pointcut" class="DynamicPointcutFactory" method="bindFactory(..)"><change-rename to="bindPointcutFactory" /></entry>
          <entry type="remove" package="org.as2lib.aop.pointcut" class="PointcutConfig">Added AopConfig instead.</entry>
          <entry type="remove" package="org.as2lib.aop.advice" class="AdviceConfig">Added AopConfig instead.</entry>
          <entry type="add" package="org.as2lib.aop" class="AopConfig">Replaces PointcutConfig and AdviceConfig.</entry>
        </day>
        <day value="20">
          <entry type="add" package="org.as2lib.env.event" class="EventBroadcaster" method="addAllListener(Array):Void"></entry>
          <entry type="remove" package="org.as2lib.env.reflect" class="NoSuchChildException"></entry>
          <entry type="remove" package="org.as2lib.env.reflect" class="NoSuchTypeMemberException"></entry>
          <entry type="remove" package="org.as2lib.env.reflect" class="ReferenceNotFoundException"></entry>
        </day>
        <day value="19">
          <entry type="change" package="org.as2lib.env.reflect.algorithm" class="ChildrenAlgorithm"><change-rename to="ChildAlgorithm" /></entry>
          <entry type="remove" package="org.as2lib.env.reflect.algorithm" class="ContentAlgorithm"></entry>
          <entry type="remove" package="org.as2lib.env.reflect.algorithm" class="CacheAlgorithm"></entry>
        </day>
        <day value="8">
          <entry type="add" package="org.as2lib.env.overload" class="Overload" method="getMatchingHandler(..):OverloadHandler">Added public getMatchingHandler-Method that can be used to obtain an overload handler to be able execute the right method directly without more delegates. This enables the use of more recursions.</entry>
          <entry type="add" package="org.as2lib.env.overload" class="OverloadHandler" method="getMethod(Void):Function">Added public getMethod-Method that can be used to obtain the method to execute of an overload handler to be able execute the method directly without more delegates. This enables the use of more recursions.</entry>
        </day>
        <day value="2">
          <entry type="add" package="org.as2lib.util" class="ConstructorCall">New Class to call a constructor within a assertThrows testcase</entry>
          <entry type="add" package="org.as2lib.data.type" class="Angle">Common Interface to work with angles</entry>
          <entry type="add" package="org.as2lib.data.type" class="Degree">Degree implementation of angle</entry>
          <entry type="add" package="org.as2lib.data.type" class="Radian">Radian implementation of angle</entry>
          <entry type="add" package="org.as2lib.data.type" class="Integer">Class to work with integers</entry>
          <entry type="add" package="org.as2lib.data.type" class="NaturalNumber">Class to work with natural numbers</entry>
          <entry type="add" package="org.as2lib.data.type" class="NaturalNumberIncludingZero">Class to work with natural numbers (including zero)</entry>
          <entry type="add" package="org.as2lib.data.type" class="NumberFormatException">Exception to throw if a Number was not transformable into a different format</entry>
        </day>
      </month>
      <month value="11">
	    <day value="29">
	      <entry type="add" package="org.as2lib.util" class="ArrayUtil" method="isSame(array1:Array, array2:Array):Boolean"></entry>
	    </day>
        <day value="21">
          <entry type="bugfix" package="org.as2lib.data.holder.list" class="PriorityList" method="insertFirst(value):Void">Did not work when there was not any value inserted before calling the method.</entry>
          <entry type="bugfix" package="org.as2lib.data.holder.list" class="PriorityList" method="insertLast(value):Void">Did not work when there was not any value inserted before calling the method.</entry>
          <entry type="bugfix" package="org.as2lib.data.holder.list" class="PriorityList" method="setAll(index:Number, list:List):Void">Did not work at all because methods with name 'set' are causing bugs.</entry>
          <entry type="bugfix" package="org.as2lib.data.holder.list" class="PriorityList" method="retainAll(list:List):Void">Did not work when there was more than one value to delete from the list because of a missing '--'.</entry>
        </day>
        <day value="18">
          <entry type="change" package="org.as2lib.util" class="Call"><change-throws to="IllegalArgumentException"></change-throws> If the applied arguments are null.</entry>
          <entry type="add" package="org.as2lib.util" class="ArrayUtil" method="removeAllOccurances(array:Array, element)"></entry>
          <entry type="add" package="org.as2lib.util" class="ArrayUtil" method="removeFirstOccurance(array:Array, element)"></entry>
          <entry type="add" package="org.as2lib.util" class="ArrayUtil" method="removeLastOccurance(array:Array, element)"></entry>
        </day>
        <day value="7">
		  <entry type="add" package="org.as2lib.util" class="ArrayUtil" method="swap(array:Array, i:Number, j:Number):Array"></entry>
		  <entry type="add" package="org.as2lib.util" class="MathUtil"></entry>
        </day>
        <day value="1">
          <entry type="change" package="org.as2lib.util" class="StringUtil"><change-throws to="IllegalArgumentException"></change-throws></entry>
        </day>
      </month>
      <month value="10">
      	<day value="28">
		  <entry type="add" package="org.as2ib.data.holder.list" class="ListStringifier" />
		  <entry type="change" package="org.as2ib.data.holder.list" class="ArrayList" />
		  <entry type="change" package="org.as2ib.data.holder" class="HolderConfig" />
		</day>
	    <day value="27">
		  <entry type="documentation" package="org.as2lib.util" class="ObjectUtil" method="forEach(...)">Added extended documentation</entry>
		  <entry type="change" package="org.as2lib.util" class="ObjectUtil" method="forEach(..)">Additional submitting of the entries name.</entry>
		  <entry type="add" package="org.as2ib.test.unit" class="TestCase" method="assertTypeOf(message:String, value, type:String)" />
		  <entry type="add" package="org.as2ib.test.unit" class="TestCase" method="assertInstanceOf(message:String, value, type)" />
		  <entry type="add" package="org.as2ib.data.file" class="File" />
		  <entry type="add" package="org.as2ib.data.file" class="FileListener" />
		  <entry type="add" package="org.as2ib.data.file" class="FileEventInfo" />
		  <entry type="add" package="org.as2ib.data.file" class="FileNotLoadedException" />
		  <entry type="add" package="org.as2ib.data.file" class="SimpleFile" />
		  <entry type="add" package="org.as2ib.data.file" class="BitFormat" />
		  <entry type="add" package="org.as2ib.data.file" class="ByteFormat" />
		</day>
        <day value="20">
          <entry type="change" package="org.as2lib.data.io.conn.core.event" class="MethodInvocationReturnListener" method="onResponse(..)"><change-rename to="onReturn" /></entry>
          <entry type="change" package="org.as2lib.data.io.conn.core.event" class="MethodInvocationReturnInfo" method="getResponse(..)"><change-rename to="getReturnValue" /></entry>
          <entry type="change" package="org.as2lib.data.io.conn.core.event" class="MethodInvocationResponseInfo"><change-rename to="MethodInvocationReturnInfo" /></entry>
          <entry type="change" package="org.as2lib.data.io.conn.core.event" class="MethodInvocationResponseListener"><change-rename to="MethodInvocationReturnListener" /></entry>
        </day>
        <day value="10">
          <entry type="add" package="org.as2lib.env.reflect" class="ProxyFactory" />
          <entry type="add" package="org.as2lib.env.reflect" class="InvocationHandler" />
          <entry type="add" package="org.as2lib.env.reflect" class="ResolveProxyFactory" />
        </day>
        <day value="9">
          <entry type="add" package="org.as2lib.env.out" class="HierarchicalOut" />
        </day>
        <day value="8">
          <entry type="change" package="org.as2lib.env.overload" class="OverloadHandler" method="isMoreExplicitThan(handler:OverlaodHandler):Boolean"><change-rename to="isMoreExplicit" /></entry>
          <entry type="add" package="org.as2lib.env.out" class="OutAccess" method="isLogEnabled(Void):Boolean" />
          <entry type="add" package="org.as2lib.env.out" class="OutAccess" method="isDebugEnabled(Void):Boolean" />
          <entry type="add" package="org.as2lib.env.out" class="OutAccess" method="isInfoEnabled(Void):Boolean" />
          <entry type="add" package="org.as2lib.env.out" class="OutAccess" method="isWarningEnabled(Void):Boolean" />
          <entry type="add" package="org.as2lib.env.out" class="OutAccess" method="isErrorEnabled(Void):Boolean" />
          <entry type="add" package="org.as2lib.env.out" class="OutAccess" method="isFatalEnabled(Void):Boolean" />
        </day>
        <day value="7">
          <entry type="change" package="org.as2lib.env.except" class="AbstractException"><change-rename to="AbstractThrowable" /></entry>
          <entry type="add" package="org.as2lib.env.out" class="OutAccess" method="isEnabled(level:OutLevel):Boolean"></entry>
          <entry type="change" package="org.as2lib.env.out" class="Out" method="isEnabledFor(level:OutLevel):Boolean"><change-rename to="isEnabled" /></entry>
          <entry type="add" package="org.as2lib.env.out" class="ConfigurableOut" />
        </day>
        <day value="6">
          <entry type="add" package="org.as2lib.env.out" class="OutFactory" />
          <entry type="add" package="org.as2lib.env.out" class="DefaultOutFactory" />
          <entry type="add" package="org.as2lib.env.out" class="OutRepository" />
          <entry type="add" package="org.as2lib.env.out" class="OutRepositoryManager" />
          <entry type="add" package="org.as2lib.env.out" class="OutHierarchy" />
          <entry type="add" package="org.as2lib.env.out" class="RootOut" />
          <entry type="add" package="org.as2lib.env.out" class="Out" method="getParent(Void):Out" />
          <entry type="add" package="org.as2lib.env.out" class="Out" method="setParent(parent:Out):Void" />
          <entry type="add" package="org.as2lib.env.out" class="Out" method="getName(Void):String" />
          <entry type="change" package="org.as2lib.env.out" class="Out" method="new(Void)"><change-arguments to="name:String" /></entry>
          <entry type="add" package="org.as2lib.env.out" class="Out" method="static getOut():Out" />
          <entry type="add" package="org.as2lib.env.out" class="Out" method="static getOutByName(name:String):Out" />
          <entry type="add" package="org.as2lib.env.out" class="Out" method="static getOutByNameAndFactory(name:String, factory:OutFactory):Out" />
          <entry type="add" package="org.as2lib.env.out" class="Out" method="static getRootOut(Void):Out" />
        </day>
        <day value="3">
          <entry type="bugfix" package="org.as2lib.env.reflect" class="ClassInfo" variable="constructor:ConstructorInfo"><change-rename to="classConstructor">Renamed it because the name 'constructor' caused an exception in Flex.</change-rename></entry>
        </day>
      </month>
      <month value="9">
        <day value="26">
          <entry type="bugfix" package="org.as2lib.env.reflect" link="https://sourceforge.net/tracker/index.php?func=detail&aids=1028923&group_id=94206&atid=607074">Important Bugfix#1028923 about infinite recursion in reflections.</entry>
          <entry type="bugfix" package="org.as2lib.env.reflect" link="https://sourceforge.net/tracker/index.php?func=detail&aid=1035084&group_id=94206&atid=607074">Removed hiding of classes by reflections</entry>
        </day>
        <day value="16">
          <entry type="documentation" package="org.as2lib.aop.joinpoint" class="*">Added documentation.</entry>
          <entry type="documentation" package="org.as2lib.aop.pointcut" class="*">Added documentation.</entry>
          <entry type="documentation" package="org.as2lib.aop.aspect" class="*">Added documentation.</entry>
          <entry type="documentation" package="org.as2lib.aop.weaver" class="*">Added documentation.</entry>
          <entry type="documentation" package="org.as2lib.aop.matcher" class="*">Added documentation.</entry>
          <entry type="documentation" package="org.as2lib.aop.advice" class="*">Added documentation.</entry>
          <entry type="add" package="org.as2lib.aop.advice" class="AdviceConfig" method="setDynamicAdviceFactory(factory:DynamicAdviceFactory):Void"></entry>
	    </day>
        <day value="15">
          <entry type="documentation" package="org.as2lib.aop" class="*">Added documentation.</entry>
          <entry type="add" package="org.as2lib.core" class="BasicMovieClip">Basic class for classes that need to extend MovieClip.</entry>
        </day>
        <day value="10">
          <entry type="add" package="org.as2lib.env.out" class="Out">Added method .addStaticHandler and .removeStaticHandler to print output of all instances.</entry>
          <entry type="add" package="org.as2lib.test.unit" class="TestSuiteFactory" method="collectAgent()">Added possibility to block the collecting of a Testcase by the static method .blockCollecting(Void):Boolean.</entry>
        </day>
      </month>
    </year>
  </release>
</changelog>