<?xml version="1.0" encoding="UTF-8"?><book title="as2logger" directory="as2logger" xmlns:as2doc="urn:http://www.as2doc.com/as2doc"><page href="introduction.html" title="Introduction" text="Logging Framework for ActionScript 2.0" /><page href="idaslj5.html" title="DefaultFormatter" text="A default formatter implementation. Ralf Siegel" /><page href="idanmj5.html" title="DefaultFormatter.format()" text="logging.IFormatter{@link logging.IFormatter#format format} in interface {@link logging.IFormatter}Format the given log record and return the formatted string. The log record to be formatted. The formatted log record as string." /><page href="idainj5.html" title="IFilter" text="A Filter can be used to provide fine grain control over what is logged, beyond the control provided by log levels. Ralf Siegel" /><page href="idaznj5.html" title="IFilter.isLoggable()" text="Check if a given log record should be published. A LogRecordtrue if the log record should be published." /><page href="idaooj5.html" title="IFormatter" text="A Formatter provides support for formatting LogRecords. Typically each Publisher will have a Formatter associated with it. The Formatter takes a LogRecord and converts it to a string. Ralf Siegel" /><page href="ida5oj5.html" title="IFormatter.format()" text="Format the given log record and return the formatted string. The log record to be formatted. The formatted log record as string." /><page href="idaupj5.html" title="IPublisher" text="A publisher takes log messages from a Logger and exports them. It might for example, write them to the Flash IDE output window or write them to a file, or send them to a network logging service, or forward them to an OS log, or whatever. Ralf Siegel" /><page href="idaraj5.html" title="IPublisher.publish()" text="Publish a LogRecord. The logging request was made initially to a Logger object, which initialized the LogRecord and forwarded it here. The Handler is responsible for formatting the message. The log record to be published" /><page href="idadbj5.html" title="IPublisher.setFilter()" text="Set a filter to control output on this Publisher. For each call of publish the Publisher will call this Filter (if it is non-null) to check if the LogRecord should be published or discarded. A filter object" /><page href="idavbj5.html" title="IPublisher.getFilter()" text="Get the current filter for this Publisher. A filter object or undefined." /><page href="idabcj5.html" title="IPublisher.setFormatter()" text="Set a formatter for this publisher a suitable formatter object" /><page href="idatcj5.html" title="IPublisher.getFormatter()" text="Gets the formatter currently associated with this publisher the formatter object /" /><page href="ida5cj5.html" title="IPublisher.setLevel()" text="Set the log level specifying which message levels will be logged by this Publisher. Message levels lower than this value will be discarded. the new value for the log level" /><page href="idardj5.html" title="IPublisher.getLevel()" text="Get the log level specifying which messages will be logged by this Publisher. Message levels lower than this level will be discarded. the level of messages being logged." /><page href="ida3dj5.html" title="IPublisher.isLoggable()" text="Check if this Publisher would actually log a given LogRecord. This method checks if the LogRecord has an appropriate Level and whether it satisfies any Filter. It also may make other Publisher specific checks that might prevent a publisher from logging the LogRecord. the LogRecord to be checkedtrue if loggable, otherwise false" /><page href="idasej5.html" title="Level" text="The Level class defines a set of standard logging levels that can be used to control logging output. The logging Level objects are ordered and are specified by ordered integers. Enabling logging at a given level also enables logging at all higher levels. Clients should normally use the predefined Level constants such as Level.SEVERE. Ralf Siegel" /><page href="idajfj5.html" title="Level.ALL" text="ALL indicates that all messages should be logged" /><page href="idatfj5.html" title="Level.FINEST" text="CONFIG is a message level for static configuration messages." /><page href="ida3fj5.html" title="Level.FINER" text="FINE is a message level providing tracing information." /><page href="idahgj5.html" title="Level.FINE" text="FINER indicates a fairly detailed tracing message." /><page href="idargj5.html" title="Level.CONFIG" text="FINEST indicates a highly detailed tracing message." /><page href="ida1gj5.html" title="Level.INFO" text="INFO is a message level for informational messages." /><page href="idafhj5.html" title="Level.WARNING" text="WARNING is a message level indicating a potential problem." /><page href="idaphj5.html" title="Level.SEVERE" text="SEVERE is a message level indicating a serious failure." /><page href="idazhj5.html" title="Level.OFF" text="OFF is a special level that can be used to turn off logging." /><page href="idagqj5.html" title="Level.forName()" text="Returns the level object for the given level string the level's namethe level object" /><page href="ida2qj5.html" title="Level.getName()" text="Get the name of this level The name as string." /><page href="idairj5.html" title="Level.valueOf()" text="Get the integer value for this level The name as string." /><page href="idaurj5.html" title="Level.toString()" text="Object.toString()" /><page href="ida3rj5.html" title="Logger" text="A Logger object is used to log messages for a specific system or application component. Loggers are normally named, using a hierarchical dot-separated namespace. Logger names can be arbitrary strings, but they should normally be based on the package name or class name of the logged component, such as mx.core or mx.controls. In additon it is possible to create &quot;anonymous&quot; Loggers that are not stored in the Logger namespace. &lt;a href=&quot;http://java.sun.com/j2se/1.4.2/docs/guide/util/logging/overview.html&quot;&gt;Java Logging Overview&lt;/a&gt;Ralf Siegel" /><page href="idagtj5.html" title="Logger.getLogger()" text="Find or create a logger for a named subsystem. If a logger has already been created with the given name it is returned. Otherwise a new logger is created. If a new logger is created its log level will be configured based on the LogManager configuration and it will configured to also send logging output to its parent's publishers. A name for the logger, or nothing for anonymous loggers. A name should be a dot-separated name and should normally be based on the package name or class name of the subsystem, such as mx.core or mx.controls A suitable logger." /><page href="ida2tj5.html" title="Logger.getParent()" text="Return the parent for this Logger. This method returns the nearest extant parent in the namespace. Thus if a Logger is called &quot;a.b.c.d&quot;, and a Logger called &quot;a.b&quot; has been created but no logger &quot;a.b.c&quot; exists, then a call of getParent on the Logger &quot;a.b.c.d&quot; will return the Logger &quot;a.b&quot;. The parent for the anonymous Logger is always the root (global) Logger. The result will be undefined if it is called on the root (global) Logger in the namespace. A logger object or undefined" /><page href="idaiuj5.html" title="Logger.getName()" text="Get the name for this logger. The logger's name or undefined for anonymous loggers." /><page href="idauuj5.html" title="Logger.finest()" text="Log a FINEST message. If the logger is currently enabled for the FINEST message level then the given message is forwarded to all the registered publishers. A string message" /><page href="idagvj5.html" title="Logger.finer()" text="Log a FINER message. If the logger is currently enabled for the FINER message level then the given message is forwarded to all the registered publishers. A string message" /><page href="idayvj5.html" title="Logger.fine()" text="Log a FINE message. If the logger is currently enabled for the FINE message level then the given message is forwarded to all the registered publishers. A string message" /><page href="idakwj5.html" title="Logger.info()" text="Log a INFO message. If the logger is currently enabled for the INFO message level then the given message is forwarded to all the registered publishers. A string message" /><page href="ida2wj5.html" title="Logger.warning()" text="Log a WARNING message. If the logger is currently enabled for the WARNING message level then the given message is forwarded to all the registered publishers. A string message" /><page href="idaoxj5.html" title="Logger.severe()" text="Log a SEVERE message. If the logger is currently enabled for the SEVERE message level then the given message is forwarded to all the registered publishers. A string message" /><page href="idadyj5.html" title="Logger.log()" text="Log a message. If the logger is currently enabled for the given message level then the given message is forwarded to all the registered publishers. The level objectThe string message" /><page href="ida3yj5.html" title="Logger.setLevel()" text="Set the log level specifying which message levels will be logged by this logger. Message levels lower than this value will be discarded. The level value Level.OFF can be used to turn off logging. If the new level is undefined, it means that this node should inherit its level from its nearest ancestor with a specific (non-undefined) level value. The new level or undefined." /><page href="idapzj5.html" title="Logger.getLevel()" text="Get the log Level that has been specified for this Logger. The result may be undefined, which means that this logger's effective level will be inherited from its parent. The level object for this logger or undefined." /><page href="ida1zj5.html" title="Logger.setFilter()" text="Set a filter to control output on this Logger. After passing the initial &quot;level&quot; check, the Logger will call this Filter to check if a log record should really be published. A filter object" /><page href="idan0j5.html" title="Logger.getFilter()" text="Get the current filter for this Logger. A filter object or undefined." /><page href="idaz0j5.html" title="Logger.addPublisher()" text="Adds a publisher for this logger to receive logging messages. By default, Loggers also send their output to their parent logger. A new publisher object.true if the publisher has been added successfully, otherwise false" /><page href="idao1j5.html" title="Logger.removePublisher()" text="Removes a publisher currently associated with this logger. A publisher object.true if the publisher has been removed successfully, otherwise false" /><page href="idad2j5.html" title="Logger.getPublishers()" text="Gets a list with Publishers currently associated with this logger. A list with publishers (may be empty)" /><page href="idap2j5.html" title="Logger.isLoggable()" text="Check if a message of the given level would actually be logged by this logger. This check is based on the Loggers effective level, which may be inherited from its parent. The level to be checkedtrue if the given message is currently being logged" /><page href="idae3j5.html" title="LogManager" text="The LogManager provides a hook mechanism applications can use for loading the logging.xml file which applications can use. The global LogManager object can be retrieved using LogManager.getInstance(). The LogManager object is created during class initialization and cannot subsequently be changed. Ralf Siegel" /><page href="idaw4j5.html" title="LogManager.getInstance()" text="Get the singleton instance. The LogManager instance" /><page href="idad5j5.html" title="LogManager.createFilterByName()" text="Returns the Filter object associated with the class with the given string name the filter's class name the Filter object" /><page href="idaz5j5.html" title="LogManager.createFormatterByName()" text="Returns the Formatter object associated with the class with the given string name the formatters's class name the Formatter object" /><page href="idasak5.html" title="LogManager.createPublisherByName()" text="Returns the Publisher object associated with the class with the given string name the publishers's class name the Publisher object" /><page href="idaibk5.html" title="LogManager.enableLogging()" text="Enables logging (logging is enabled by default) for all loggers." /><page href="idarbk5.html" title="LogManager.disableLogging()" text="Disables logging (logging is enabled by default) for all loggers." /><page href="ida0bk5.html" title="LogManager.addPropertyChangeListener()" text="Registers a property change listener with the log manager. The listener object to be addedtrue if listener was added successfully, otherwise false." /><page href="idapck5.html" title="LogManager.removePropertyChangeListener()" text="Unregisters a property change listener from the log manager. The listener object to be removedtrue if listener was actually removed, otherwise false." /><page href="idaedk5.html" title="LogManager.getDefaultPublisher()" text="Gets the default publisher, which usually will be the trace output. the default publisher instance" /><page href="idaqdk5.html" title="LogManager.readProperties()" text="Convenience method to start reading the external logging properties. The method is supposed to be invoked by an application's main class on startup as part of the hook mechanism. Make sure you have registered a listener before in order to proceed. A file location which contains logging properties" /><page href="idacek5.html" title="LogManager.onPropertiesRead()" text="Proxy handler which will be invoked when properties are read. It then will forward the event to all registered property change listeners." /><page href="idalek5.html" title="LogRecord" text="LogRecord value objects are used to pass logging requests between the logging framework and individual publishers. Ralf Siegel" /><page href="ida5ek5.html" title="LogRecord Constructor" text="Construct a LogRecord with the given date, source's logger name, level and message values. The date object stored in this log record objectThe logger name string stored in this log record objectThe level object stored in this log record objectThe message string stored in this log record object" /><page href="idaigk5.html" title="LogRecord.getDate()" text="Get the event date. a Date object" /><page href="idaugk5.html" title="LogRecord.getLoggerName()" text="Get the source's logger name the logger name string" /><page href="idaahk5.html" title="LogRecord.getLevel()" text="Get the logging message level, for example Level.SEVERE. the logging message level object" /><page href="idamhk5.html" title="LogRecord.getMessage()" text="Get the &quot;raw&quot; log message before formatting. the raw message string" /><page href="idayhk5.html" title="PropertyHandler" text="The property handler takes various logging properties and assigns them to the suitable loggers. Ralf Siegel" /><page href="ida4ik5.html" title="PropertyHandler.handleLoggerProperties()" text="Handles appliable properties for loggers. Important: If a filter is specified, make sure to import and reference the given class so it can be accessed by the Logger framework the Logger's name string, e.g. &quot;a.b.c&quot;the logging level, e.g. &quot;WARNING&quot;the filter class name, e.g. &quot;com.domain.CustomFilter&quot;" /><page href="idaakk5.html" title="PropertyHandler.handlePublisherProperties()" text="Handles appliable properties for publishers. Important: If a publisher or formatter is specified, make sure to import and reference the given class so it can be accessed by the Logging Framework the Logger's name string, e.g. &quot;a.b.c&quot;the publisher class name, e.g. &quot;com.domain.CustomPublisher&quot;filter the formatter class name, e.g. &quot;com.domain.CustomFormatter&quot;" /><page href="idaglk5.html" title="PropertyLoader" text="Responsible for loading and traversing the logging properties file data. Ralf Siegel" /><page href="idadmk5.html" title="PropertyLoader.read()" text="Read the given logging property xml file and travers the data. Inform the LogManager when done. the logging.xmla reference to the property handler objecta reference to the global LogManager" /><page href="idafnk5.html" title="TraceOutput" text="Standard implementation of the Logger's framework IPublisher interface. Plain text formats incoming logging messages and sends them (traces) to the output window. Ralf Siegel" /><page href="idamok5.html" title="TraceOutput Constructor" text="Constructs a new trace publisher with the default formatter" /><page href="idauok5.html" title="TraceOutput.publish()" text="logging.IPublisher{@link logging.IPublisher#publish publish} in interface {@link logging.IPublisher}Publish a LogRecord. The logging request was made initially to a Logger object, which initialized the LogRecord and forwarded it here. The Handler is responsible for formatting the message. The log record to be published" /><page href="idampk5.html" title="TraceOutput.setFilter()" text="logging.IPublisher{@link logging.IPublisher#setFilter setFilter} in interface {@link logging.IPublisher}Set a filter to control output on this Publisher. For each call of publish the Publisher will call this Filter (if it is non-null) to check if the LogRecord should be published or discarded. A filter object" /><page href="idahqk5.html" title="TraceOutput.getFilter()" text="logging.IPublisher{@link logging.IPublisher#getFilter getFilter} in interface {@link logging.IPublisher}Get the current filter for this Publisher. A filter object or undefined." /><page href="idazqk5.html" title="TraceOutput.setFormatter()" text="logging.IPublisher{@link logging.IPublisher#setFormatter setFormatter} in interface {@link logging.IPublisher}Set a formatter for this publisher a suitable formatter object" /><page href="idarrk5.html" title="TraceOutput.getFormatter()" text="logging.IPublisher / {@link logging.IPublisher#getFormatter getFormatter} in interface {@link logging.IPublisher}Gets the formatter currently associated with this publisher the formatter object /" /><page href="idadsk5.html" title="TraceOutput.setLevel()" text="logging.IPublisher{@link logging.IPublisher#setLevel setLevel} in interface {@link logging.IPublisher}Set the log level specifying which message levels will be logged by this Publisher. Message levels lower than this value will be discarded. the new value for the log level" /><page href="ida1sk5.html" title="TraceOutput.getLevel()" text="logging.IPublisher{@link logging.IPublisher#getLevel getLevel} in interface {@link logging.IPublisher}Get the log level specifying which messages will be logged by this Publisher. Message levels lower than this level will be discarded. the level of messages being logged." /><page href="idantk5.html" title="TraceOutput.isLoggable()" text="logging.IPublisher{@link logging.IPublisher#isLoggable isLoggable} in interface {@link logging.IPublisher}Check if this Publisher would actually log a given LogRecord. This method checks if the LogRecord has an appropriate Level and whether it satisfies any Filter. It also may make other Publisher specific checks that might prevent a publisher from logging the LogRecord. the LogRecord to be checkedtrue if loggable, otherwise false" /><page href="idaiuk5.html" title="XMLFormatter" text="A XML formatter implementation. Ralf Siegel" /><page href="idadvk5.html" title="XMLFormatter.format()" text="logging.IFormatter{@link logging.IFormatter#format format} in interface {@link logging.IFormatter}Format the given log record and return the formatted string. The log record to be formatted. The formatted log record as string." /><page href="ida4vk5.html" title="XMLOutput" text="Standard implementation of the Logger's framework IPublisher interface. XML formats incoming logging messages and sends them (traces) to the output window. Ralf Siegel" /><page href="idafxk5.html" title="XMLOutput Constructor" text="Constructs a new trace publisher with the standard XML formatter" /><page href="idanxk5.html" title="XMLOutput.publish()" text="logging.IPublisher / {@link logging.IPublisher#publish publish} in interface {@link logging.IPublisher}Publish a LogRecord. The logging request was made initially to a Logger object, which initialized the LogRecord and forwarded it here. The Handler is responsible for formatting the message. The log record to be published" /><page href="idaiyk5.html" title="XMLOutput.setFilter()" text="logging.IPublisher{@link logging.IPublisher#setFilter setFilter} in interface {@link logging.IPublisher}Set a filter to control output on this Publisher. For each call of publish the Publisher will call this Filter (if it is non-null) to check if the LogRecord should be published or discarded. A filter object" /><page href="idaazk5.html" title="XMLOutput.getFilter()" text="logging.IPublisher{@link logging.IPublisher#getFilter getFilter} in interface {@link logging.IPublisher}Get the current filter for this Publisher. A filter object or undefined." /><page href="idaszk5.html" title="XMLOutput.setFormatter()" text="logging.IPublisher / {@link logging.IPublisher#setFormatter setFormatter} in interface {@link logging.IPublisher}Set a formatter for this publisher a suitable formatter object" /><page href="idak0k5.html" title="XMLOutput.getFormatter()" text="logging.IPublisher / {@link logging.IPublisher#getFormatter getFormatter} in interface {@link logging.IPublisher}Gets the formatter currently associated with this publisher the formatter object /" /><page href="ida20k5.html" title="XMLOutput.setLevel()" text="logging.IPublisher{@link logging.IPublisher#setLevel setLevel} in interface {@link logging.IPublisher}Set the log level specifying which message levels will be logged by this Publisher. Message levels lower than this value will be discarded. the new value for the log level" /><page href="idau1k5.html" title="XMLOutput.getLevel()" text="logging.IPublisher{@link logging.IPublisher#getLevel getLevel} in interface {@link logging.IPublisher}Get the log level specifying which messages will be logged by this Publisher. Message levels lower than this level will be discarded. the level of messages being logged." /><page href="idag2k5.html" title="XMLOutput.isLoggable()" text="logging.IPublisher{@link logging.IPublisher#isLoggable isLoggable} in interface {@link logging.IPublisher}Check if this Publisher would actually log a given LogRecord. This method checks if the LogRecord has an appropriate Level and whether it satisfies any Filter. It also may make other Publisher specific checks that might prevent a publisher from logging the LogRecord. the LogRecord to be checkedtrue if loggable, otherwise false" /><page href="idaf3k5.html" title="EventObject" text="Ralf Siegelwill use standard classes if available" /><page href="idav3k5.html" title="EventObject Constructor" text="" /><page href="ida43k5.html" title="EventObject.getSource()" text="" /><page href="idad4k5.html" title="IPropertyChangeListener" text="Ralf Siegelwill use standard classes if available" /><page href="idau4k5.html" title="IPropertyChangeListener.onPropertyChanged()" text="" /><page href="ida44k5.html" title="PropertyChangeEvent" text="Ralf Siegelwill use standard classes if available" /><page href="idas5k5.html" title="PropertyChangeEvent Constructor" text="" /><page href="idacal5.html" title="ClassNotFoundError" text="Ralf Siegelwill use standard classes if available" /><page href="idasal5.html" title="ClassNotFoundError.name" text="" /><page href="idaxal5.html" title="ClassNotFoundError.message" text="" /><page href="ida2al5.html" title="ClassNotFoundError Constructor" text="" /><page href="idafbl5.html" title="ClassNotFoundError.toString()" text="" /><page href="idakbl5.html" title="IllegalArgumentError" text="Ralf Siegelwill use standard classes if available" /><page href="ida0bl5.html" title="IllegalArgumentError.name" text="" /><page href="ida5bl5.html" title="IllegalArgumentError.message" text="" /><page href="idaecl5.html" title="IllegalArgumentError Constructor" text="" /><page href="idancl5.html" title="IllegalArgumentError.toString()" text="" /><page href="idascl5.html" title="InvalidFilterError" text="Ralf Siegel" /><page href="ida5cl5.html" title="InvalidFilterError.name" text="" /><page href="idaedl5.html" title="InvalidFilterError.message" text="" /><page href="idajdl5.html" title="InvalidFilterError Constructor" text="" /><page href="idasdl5.html" title="InvalidFilterError.toString()" text="" /><page href="idaxdl5.html" title="InvalidFormatterError" text="Ralf Siegel" /><page href="idaeel5.html" title="InvalidFormatterError.name" text="" /><page href="idajel5.html" title="InvalidFormatterError.message" text="" /><page href="idaoel5.html" title="InvalidFormatterError Constructor" text="" /><page href="idaxel5.html" title="InvalidFormatterError.toString()" text="" /><page href="ida2el5.html" title="InvalidLevelError" text="Ralf Siegel" /><page href="idajfl5.html" title="InvalidLevelError.name" text="" /><page href="idaofl5.html" title="InvalidLevelError.message" text="" /><page href="idatfl5.html" title="InvalidLevelError Constructor" text="" /><page href="ida2fl5.html" title="InvalidLevelError.toString()" text="" /><page href="idabgl5.html" title="InvalidPublisherError" text="Ralf Siegel" /><page href="idaogl5.html" title="InvalidPublisherError.name" text="" /><page href="idatgl5.html" title="InvalidPublisherError.message" text="" /><page href="idaygl5.html" title="InvalidPublisherError Constructor" text="" /><page href="idabhl5.html" title="InvalidPublisherError.toString()" text="" /><page href="idakhl5.html" title="Class" text="Ralf Siegelwill use standard classes if available" /><page href="idaeil5.html" title="Class.forName()" text="Returns the Function object associated with the class with the given string name. the Function object" /><page href="idawil5.html" title="List" text="Ralf Siegelwill use standard classes if available" /><page href="idadjl5.html" title="List.addItem()" text="Adds the specified item to the list. true when the item was added successfully, otherwise false" /><page href="idaujl5.html" title="List.addAll()" text="Adds all items to the list. true when all items were added successfully, otherwise false" /><page href="idafkl5.html" title="List.clear()" text="Clear all items in the list /" /><page href="idaokl5.html" title="List.containsItem()" text="Checks whether the given object is an item of that list true if the list contains the object /" /><page href="ida5kl5.html" title="List.getItem()" text="Gets the item at the specified index the requested object /" /><page href="idaqll5.html" title="List.indexOf()" text="Return the index number of a given list item the index /" /><page href="idabml5.html" title="List.isEmpty()" text="Checks whether the list is empty or not true if empty, otherwise false /" /><page href="idanml5.html" title="List.removeItem()" text="Removes an item from the list true if the empty was removed successfully, otherwise false (e.g. because it didn't exist) /" /><page href="ida4ml5.html" title="List.size()" text="Returns the number of items in the list the number of items in the list" /><page href="idaknl5.html" title="List.toArray()" text="Returns the list as array object an Array object /" /><page href="idawnl5.html" title="Vector" text="Ralf Siegelwill use standard classes if available" /><page href="idaool5.html" title="Vector Constructor" text="Constructs a new Vector object" /><page href="ida1ol5.html" title="Vector.addItem()" text="logging.util.List{@link logging.util.List#addItem addItem} in interface {@link logging.util.List}Adds the specified item to the list. true when the item was added successfully, otherwise false" /><page href="idaspl5.html" title="Vector.addAll()" text="logging.util.List / {@link logging.util.List#addAll addAll} in interface {@link logging.util.List}Adds all items to the list. true when all items were added successfully, otherwise false" /><page href="idamql5.html" title="Vector.clear()" text="logging.util.List{@link logging.util.List#clear clear} in interface {@link logging.util.List}Clear all items in the list /" /><page href="ida1ql5.html" title="Vector.containsItem()" text="logging.util.List{@link logging.util.List#containsItem containsItem} in interface {@link logging.util.List}Checks whether the given object is an item of that list true if the list contains the object /" /><page href="idasrl5.html" title="Vector.getItem()" text="logging.util.List{@link logging.util.List#getItem getItem} in interface {@link logging.util.List}Gets the item at the specified index the requested object /" /><page href="idajsl5.html" title="Vector.indexOf()" text="logging.util.List{@link logging.util.List#indexOf indexOf} in interface {@link logging.util.List}Return the index number of a given list item the index /" /><page href="idaatl5.html" title="Vector.isEmpty()" text="logging.util.List{@link logging.util.List#isEmpty isEmpty} in interface {@link logging.util.List}Checks whether the list is empty or not true if empty, otherwise false /" /><page href="idastl5.html" title="Vector.removeItem()" text="logging.util.List{@link logging.util.List#removeItem removeItem} in interface {@link logging.util.List}Removes an item from the list true if the empty was removed successfully, otherwise false (e.g. because it didn't exist) /" /><page href="idajul5.html" title="Vector.size()" text="logging.util.List{@link logging.util.List#size size} in interface {@link logging.util.List}Returns the number of items in the list the number of items in the list" /><page href="ida1ul5.html" title="Vector.toArray()" text="logging.util.List{@link logging.util.List#toArray toArray} in interface {@link logging.util.List}Returns the list as array object an Array object /" /></book>